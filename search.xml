<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Cloud使用log4j2的yml配置</title>
      <link href="/2018/05/25/Spring-Cloud%E4%BD%BF%E7%94%A8log4j2%E7%9A%84yml%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/25/Spring-Cloud%E4%BD%BF%E7%94%A8log4j2%E7%9A%84yml%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自从 <code>log4j2</code> 发布后，就一直在使用 <code>slf4j</code> + <code>log4j2</code> 了，最近在用 <code>Spring Cloud</code> 搭建项目，于是就研究了一下如何在 <code>Spring Cloud</code> 中引入 <code>log4j2</code> 。之前对比了 <code>XML</code> 和 <code>Properties</code> 的方式进行配置，感觉 XML 配置更易理解，后来学习 Spring Boot 框架，由于 <code>Spring Boot</code> 的很多资料都使用了 <code>YAML</code> 语法的配置文件，使用之后感觉，相对于 <code>XML</code> 和 <code>Properties</code> 配置，<code>YAML</code> 语法层次感更强，看起来确实更清晰，于是这次决定使用 <code>YAML</code> 语法对 <code>log4j</code> 进行配置。</p><h1 id="排除对-logback-的依赖"><a href="#排除对-logback-的依赖" class="headerlink" title="排除对 logback 的依赖"></a>排除对 <code>logback</code> 的依赖</h1><p>看了一下依赖关系，发现 <code>spring-boot-starter(version = 1.4.3.RELEASE)</code> 依赖 <code>spring-boot-starter-logging(version = 1.4.3.RELEASE)</code>，而 <code>spring-boot-starter-logging</code> 使用了 <code>slf4j</code> + <code>logback</code>，因此这里首先需要排除对 <code>logback</code> 的依赖，在 <code>build.gradle</code> 中加入如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    // 在整个构建过程中排除 `ch.qos.logback:logback-classic`</span><br><span class="line">    all*.exclude group: &apos;ch.qos.logback&apos;, module: &apos;logback-classic&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="添加-log4j2-依赖"><a href="#添加-log4j2-依赖" class="headerlink" title="添加 log4j2 依赖"></a>添加 <code>log4j2</code> 依赖</h1><p><code>Spring Boot</code> 已经提供了 <code>log4j2</code> 对应的 <code>Starter</code> 模块 <code>spring-boot-starter-log4j2</code>，这里我们可以直接在 <code>build.gradle</code> 中引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">// ...</span><br><span class="line">    compile &apos;org.springframework.boot:spring-boot-starter-log4j2:+&apos;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>log4j2.yml</code> 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Configuration:</span><br><span class="line">  status: warn</span><br><span class="line">  name: YAMLConfig</span><br><span class="line">  properties:</span><br><span class="line">    property:</span><br><span class="line">      name: project.name</span><br><span class="line">      value: spring-cloud-demo</span><br><span class="line">    property:</span><br><span class="line">      name: pattern</span><br><span class="line">      value: &quot;%d %-5p [%c]\\: %L - %m%n&quot;</span><br><span class="line">  appenders:</span><br><span class="line">    Console:</span><br><span class="line">      name: STDOUT</span><br><span class="line">      PatternLayout:</span><br><span class="line">        Pattern: $&#123;pattern&#125;</span><br><span class="line"></span><br><span class="line">  Loggers:</span><br><span class="line">    Root:</span><br><span class="line">      level: debug</span><br><span class="line">      AppenderRef:</span><br><span class="line">        ref: STDOUT</span><br></pre></td></tr></table></figure></p><p>运行项目发现会报如下异常提示信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console.</span><br></pre></td></tr></table></figure></p><h1 id="添加-com-fasterxml-jackson-依赖"><a href="#添加-com-fasterxml-jackson-依赖" class="headerlink" title="添加 com.fasterxml.jackson 依赖"></a>添加 <code>com.fasterxml.jackson</code> 依赖</h1><p>查看 <code>log4j2</code> 关于如何 <code>log4j2</code> 如何查找配置文件的的介绍，<code>log4j2</code> 会按照<br>> 01. <code>-Dlog4j.configurationFile</code></p><p>> 02. <code>classpath:log4j2-test.properties</code><br>> 03. <code>classpath:log4j2-test.yaml</code><br>> 04. <code>classpath:log4j2-test.yml</code><br>> 05. <code>classpath:log4j2-test.json</code><br>> 06. <code>classpath:log4j2-test.jsn</code><br>> 07. <code>classpath:log4j2-test.xml</code><br>> 08. <code>classpath:log4j2.properties</code></p><p>> 09. <code>classpath:log4j2.yaml</code><br>> 10. <code>classpath:log4j2.yml</code><br>> 11. <code>classpath:log4j2.json</code><br>> 12. <code>classpath:log4j2.jsn</code><br>> 13. <code>classpath:log4j2.xml</code></p><p>> 14. <code>DefaultConfiguration</code><br>的顺序查找配置文件，发现并没有问题，那又是为什么呢？<br>查看 <code>log4j2</code> <a href="https://logging.apache.org/log4j/2.x/runtime-dependencies.html" target="_blank" rel="noopener">文档</a>后发现，使用 <code>YAML</code> 格式的配置，需要依赖 <code>jackson</code> 的几个包，在 <code>build.gradle</code> 中追加以下依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">// ...</span><br><span class="line">    compile &apos;com.fasterxml.jackson.core:jackson-databind:+&apos;</span><br><span class="line">    compile &apos;com.fasterxml.jackson.core:jackson-core:+&apos;</span><br><span class="line">    compile &apos;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:+&apos;</span><br><span class="line">    compile &apos;com.fasterxml.jackson.core:jackson-annotations:+&apos;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure></p><p>再次启动项目，可以正常输出日志。</p><p>参考资料：<a href="https://www.cnblogs.com/zcy_soft/p/3566208.html" target="_blank" rel="noopener">jcl-over-slf4j log桥接工具简介</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring-cloud </tag>
            
            <tag> spring-cloud-log4j2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Config Server报JSchException: UnknownHostKey异常</title>
      <link href="/2018/05/22/Spring-Cloud-Config-Server%E6%8A%A5JSchException-UnknownHostKey%E5%BC%82%E5%B8%B8/"/>
      <url>/2018/05/22/Spring-Cloud-Config-Server%E6%8A%A5JSchException-UnknownHostKey%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>配置 <code>Spring Cloud Config Server</code> 时，<code>spring.cloud.config.git.uri</code> 用的是 <code>ssh</code> 的方式，结果报了如下异常，提示未知的git所在服务器的 <code>HostKey</code> 不在本地<code>~/.ssh/known_hosts</code> 列表里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">2018-05-22 15:59:03.054 ERROR 32067 --- [nio-8085-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: Cannot clone or checkout repository] with root cause</span><br><span class="line"></span><br><span class="line">com.jcraft.jsch.JSchException: UnknownHostKey: gitlab.com. RSA key fingerprint is b6:03:0e:39:97:9e:d0:e7:24:ce:a3:77:3e:01:42:09</span><br><span class="line">at com.jcraft.jsch.Session.checkHost(Session.java:786) ~[jsch-0.1.50.jar:na]</span><br><span class="line">at com.jcraft.jsch.Session.connect(Session.java:342) ~[jsch-0.1.50.jar:na]</span><br><span class="line">at org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(JschConfigSessionFactory.java:116) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.transport.SshTransport.getSession(SshTransport.java:136) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.transport.TransportGitSsh$SshFetchConnection.&lt;init&gt;(TransportGitSsh.java:262) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.transport.TransportGitSsh.openFetch(TransportGitSsh.java:161) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:136) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:122) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1115) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:130) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.api.CloneCommand.fetch(CloneCommand.java:178) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.eclipse.jgit.api.CloneCommand.call(CloneCommand.java:125) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar:3.5.3.201412180710-r]</span><br><span class="line">at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.cloneToBasedir(JGitEnvironmentRepository.java:392) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.copyRepository(JGitEnvironmentRepository.java:364) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.createGitClient(JGitEnvironmentRepository.java:349) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.refresh(JGitEnvironmentRepository.java:165) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.getLocations(JGitEnvironmentRepository.java:144) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.MultipleJGitEnvironmentRepository.getLocations(MultipleJGitEnvironmentRepository.java:116) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.AbstractScmEnvironmentRepository.findOne(AbstractScmEnvironmentRepository.java:40) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.MultipleJGitEnvironmentRepository.findOne(MultipleJGitEnvironmentRepository.java:154) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.EnvironmentEncryptorEnvironmentRepository.findOne(EnvironmentEncryptorEnvironmentRepository.java:53) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.EnvironmentController.labelled(EnvironmentController.java:112) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at org.springframework.cloud.config.server.environment.EnvironmentController.defaultLabel(EnvironmentController.java:101) ~[spring-cloud-config-server-1.2.3.RELEASE.jar:1.2.3.RELEASE]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_162]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_162]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_162]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_162]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) ~[spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105) ~[spring-boot-actuator-1.4.3.RELEASE.jar:1.4.3.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) ~[spring-boot-actuator-1.4.3.RELEASE.jar:1.4.3.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_162]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_162]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar:8.5.6]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) [na:1.8.0_162]</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>打开命令行，执行以下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -t rsa &#123;hostname or IP&#125; &gt;&gt; ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://markmail.org/message/icfo5j5wufzpadjc" target="_blank" rel="noopener">Re: Gerrit Replication problem - “Cannot replicate .. reject HostKey” - Marcel Huber - com.googlegroups.repo-discuss - MarkMail</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring-cloud </tag>
            
            <tag> spring-cloud-config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用正则表达式提取CSS中的背景图地址</title>
      <link href="/2018/05/09/%E5%88%A9%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96CSS%E4%B8%AD%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/05/09/%E5%88%A9%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96CSS%E4%B8%AD%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>工作需要，用到在java中提取微信公众号文章内的背景图地址，深入了解了一下正则表达式的反向引用、环视的概念，发现非常好用，节省了很多代码，以下是最终提取CSS中背景图地址的正则表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(background|background\-image)\s*:\s*url\s*\(\s*((&apos;|&quot;|&amp;quot;)?)\s*([^\s]+)\2\s*\)</span><br></pre></td></tr></table></figure></p><p>简单解释一下：</p><ol><li><code>(background|background\-image)</code>：首先匹配<code>background</code>或<code>background-image</code>属性</li><li><code>\s*</code>：第1步之后可以跟任意数量的空白字符</li><li><code>:</code>第2步之后必须跟一个英文冒号</li><li><code>\s*</code>：第3步之后可以跟任意数量的空白字符</li><li><code>url</code>：第4步之后必须跟一个字符串，内容为<code>url</code></li><li><code>\s*</code>：第5步之后可以跟任意数量的空白字符</li><li><code>\(</code>：第6步之后必须跟小括号的左半部分，<code>\</code> 是对 <code>(</code> 进行转义</li><li><code>\s*</code>：第7步之后可以跟任意数量的空白字符</li><li><code>((&#39;|&quot;|&amp;quot;)?)</code>：第8步之后可以有或者没有<code>&#39;</code> 、 <code>&quot;</code> 或 <code>&amp;quot;</code></li><li><code>\s*</code>：第9步之后可以跟任意数量的空白字符</li><li><code>([^\s]+)</code>：第10步之后需要跟至少一个非空白字符，这里匹配的即为背景图的完整地址，综合考虑到背景图地址可以是绝对地址和相对地址，以及实际场景（即背景图地址可以被单引号、双引号或 <code>&amp;quot;</code> 引起来，如<code>&quot;http://domain.com/a.jpg&quot;</code>，但不会出现一端是单引号或双引号，另一端不是单引号或双引号的情况，如 <code>&#39;http://domain.com/a.jpg&quot;</code> 或 <code>&quot;http://domain.com/a.jpg&amp;quot;</code>），因此这里认为可以包含任意非空白字符</li><li><code>\2</code>：第11步之后跟一个字符，内容与第9步匹配的内容相同</li><li><code>\s*</code>：第12步之后可以跟任意数量的空白字符</li><li><code>\)</code>：最后跟上小括号的的右半部分，和第7步匹配的对应</li></ol><p>考虑到微信公众号文章内的背景图地址不可能是相对地址，这里可以对第11步进行优化，由<code>([^\s]+)</code> 改造为 <code>(\/\/|http\:\/\/|https\:\/\/)([^\s]+)</code> ，即匹配地址必须以 <code>//</code> 、<code>http://</code> 或 <code>https://</code> 开头，因此，针对提取微信公众号内文章的背景图地址，优化后的正则表达式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(background|background\-image)\s*\:\s*url\s*\(\s*((&apos;|&quot;|&amp;quot;)?)\s*(\/\/|http\:\/\/|https\:\/\/)([^\s]+)\2\s*\)</span><br></pre></td></tr></table></figure></p><p>参考资料：<a href="http://www.zjmainstay.cn/regexp-lookaround" target="_blank" rel="noopener">深入理解正则表达式环视的概念与用法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sed命令使用笔记</title>
      <link href="/2018/04/11/sed%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/11/sed%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux和Mac系统的<code>sed</code>命令稍有差别，其中，如果需要直接修改源文件，都需要加<code>-i</code> 参数<br>Mac下必须给<code>-i</code>指定参数值，如<code>-i &#39;.bak&#39;</code>，系统将备份源文件，备份的文件名为 源文件名 + <code>-i</code>后的参数值，如源文件名为<code>filename.txt</code>，则备份文件名为<code>filename.txt.bak</code>，若不需要备份源文件，则需要将 <code>-i</code> 参数值为空字符串，即 <code>-i &#39;&#39;</code>。<br>Linux下跟 <code>-i</code> 参数仅表示直接修改源文件。</p></blockquote><h1 id="删除指定行"><a href="#删除指定行" class="headerlink" title="删除指定行"></a>删除指定行</h1><ul><li>删除第123行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;123d&apos; filename.txt</span><br></pre></td></tr></table></figure></li></ul><p>上述命令不会直接修改源文件，直接修改源文件，并将源文件备份为 <code>filename.txt.bak</code> 的命令如下（此处演示 <code>-i</code> 参数用法，下同）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;.bak&apos; &apos;123d&apos; filename.txt # Mac</span><br><span class="line">sed -i &apos;123d&apos; filename.txt # Linux （不会备份源文件）</span><br></pre></td></tr></table></figure></p><ul><li>删除第99行和第123行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;99d;123d&apos; filename.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 提交指定文件的部分修改</title>
      <link href="/2018/02/23/Git-%E6%8F%90%E4%BA%A4%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E7%9A%84%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9/"/>
      <url>/2018/02/23/Git-%E6%8F%90%E4%BA%A4%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E7%9A%84%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>有时同时改了两个功能A和B，并且都没有提交，这两个功能涉及到了同一个文件a，都进行了修改，但在某次提交中只希望提交功能A，所以只能提交文件a的关于功能A的部分修改，我们可以使用下面的命令对文件a进行选择性提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --patch &lt;filename&gt;</span><br></pre></td></tr></table></figure></p><p>或其简短模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -p &lt;filename&gt;</span><br></pre></td></tr></table></figure></p><p>执行此命令后，Git将开启一个交互式模式，它会将文件a分解成它认为合理的“块（hunk）”（文件的一部分），并和你分别确认如何处理每处的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stage this hunk [y,n,a,d,g,/,j,J,k,K,s,e,?]?</span><br></pre></td></tr></table></figure></p><p>以下是每个选项的说明：</p><ul><li><code>y</code> 暂存该块</li><li><code>n</code> 不暂存该块</li><li><code>a</code> 暂存该块及该文件中的剩余所有块</li><li><code>d</code> 不暂存该块及该文件中的剩余所有块</li><li><code>g</code> 选择并跳转至指定块块</li><li><code>/</code> 搜索与给定的正则表达式匹配的块</li><li><code>j</code> 离开当前未定的块，处理下一个未定的块</li><li><code>J</code> 离开当前未定的块，处理下一个块</li><li><code>k</code> 离开当前未定的块，处理上一个未定的块</li><li><code>K</code> 离开当前未定的块，处理上一个块</li><li><code>s</code> 将当前的大块分成更小的块</li><li><code>e</code> 手动编辑当前的块</li><li><code>?</code> 打印帮助</li></ul><p>如果该文件尚未存储在存储库中，则可以先执行 <code>git add -N &lt;filename&gt;</code>。之后你可以继续 <code>git add -p &lt;filename&gt;</code>。</p><p>之后，您可以使用：</p><ul><li><code>git diff --staged</code> 检查暂存的修改是否正确</li><li><code>git reset -p</code> 撤销暂存的错误修改</li><li><code>git commit -v</code> 在编辑提交消息时查看您的提交</li></ul><p>注意这与 <code>git format-patch</code> 命令差别很大，<code>git format-patch</code> 是将提交数据解析为 <code>.patch</code> 文件。</p><p>备查：<a href="https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging" target="_blank" rel="noopener">https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging</a></p><p>stackoverflow原文：<a href="https://stackoverflow.com/a/1085191" target="_blank" rel="noopener">https://stackoverflow.com/a/1085191</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序[头脑王者]刷题脚本</title>
      <link href="/2018/01/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%B4%E8%84%91%E7%8E%8B%E8%80%85-%E5%88%B7%E9%A2%98%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/01/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%B4%E8%84%91%E7%8E%8B%E8%80%85-%E5%88%B7%E9%A2%98%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h1><p>目前题库里有1001道题，大部分为[入门新手]和[起步熟手]级别的，即在这两个级别能提示答案的几率比较高</p><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><p>MySQL、NPM、WIFI、手机和电脑在同一WIFI下</p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><ol><li><p>创建MySQL表，SQL文件：<code>database/tounaowangzhe_structure.sql</code></p></li><li><p>导入共享题库，SQL文件：<code>database/tounaowangzhe_data_xx.sql</code></p></li><li><p>安装anyproxy</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g anyproxy</span><br></pre></td></tr></table></figure><ol start="4"><li>安装依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="5"><li><p>修改 <code>tounaowangzhe.js</code> 开头处的MySQL连接信息，如：<code>host</code>、<code>database</code>、<code>user</code>、<code>password</code></p></li><li><p>生成并安装证书</p></li></ol><p>生成证书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anyproxy-ca</span><br></pre></td></tr></table></figure></p><p>把生成的<code>rootCA.crt</code>给手机安装上</p><ol start="7"><li><p>启动anyproxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd tounaowangzhe</span><br><span class="line">anyproxy --rule tounaowangzhe.js</span><br></pre></td></tr></table></figure></li><li><p>给手机WIFI配置代理，IP是电脑的IP，端口是默认的8001</p></li></ol><h1 id="Contribute"><a href="#Contribute" class="headerlink" title="Contribute"></a>Contribute</h1><p>题库越丰富，提示答案的几率越高，请fork本仓库提交你自己的题库，文件名按照 <code>database/tounaowangzhe_data_01.sql</code> 格式，序号依次递增</p><p>获取代码：<a href="https://github.com/liangzai-cool/tounaowangzhe.git" target="_blank" rel="noopener">https://github.com/liangzai-cool/tounaowangzhe.git</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 头脑王者 </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/2017/08/10/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2017/08/10/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文内容转载自 <a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">维基百科</a><br>本文转载时，维基百科内容最后更新时间为 2017年7月4日 (星期二) 09:37</p></blockquote><p>HTTP状态码（英语：HTTP Status Code）是用以表示网页服务器超文本传输协议响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774 与 RFC 4918 等规范扩展。所有状态码的第一个数字代表了响应的五种状态之一。所示的消息短语是典型的，但是可以提供任何可读取的替代方案。 除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。</p><p>HTTP状态码的官方注册表由互联网号码分配局（Internet Assigned Numbers Authority）维护。</p><p>微软互联网信息服务 （Microsoft Internet Information Services）有时会使用额外的十进制子代码来获取更多具体信息，但是这些子代码仅出现在响应有效内容和文档中，而不是代替实际的HTTP状态代码。</p><h1 id="1xx消息"><a href="#1xx消息" class="headerlink" title="1xx消息"></a>1xx消息</h1><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p><ul><li><p>100 Continue<br>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。</p></li><li><p>101 Switching Protocols<br>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。</p><p>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p></li><li><p>102 Processing（WebDAV；RFC 2518）<br>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。</p></li></ul><h1 id="2xx成功"><a href="#2xx成功" class="headerlink" title="2xx成功"></a>2xx成功</h1><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p><ul><li><p>200 OK<br>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p></li><li><p>201 Created<br>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p></li><li><p>202 Accepted<br>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p></li><li><p>203 Non-Authoritative Information（自HTTP / 1.1起）<br>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p></li><li><p>204 No Content<br>服务器成功处理了请求，没有返回任何内容。</p></li><li><p>205 Reset Content<br>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p></li><li><p>206 Partial Content（RFC 7233）<br>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p></li><li><p>207 Multi-Status（WebDAV；RFC 4918）<br>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p></li><li><p>208 Already Reported （WebDAV；RFC 5842）<br>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p></li><li><p>226 IM Used （RFC 3229）<br>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p></li></ul><h1 id="3xx重定向"><a href="#3xx重定向" class="headerlink" title="3xx重定向"></a>3xx重定向</h1><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p><p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p><ul><li><p>300 Multiple Choices<br>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p><p>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p><p>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p></li><li><p>301 Moved Permanently<br>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><p>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p><p>如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p><p>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p></li><li><p>302 Found<br>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><p>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p><p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p><p>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p></li><li><p>303 See Other<br>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p><p>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p><p>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p></li><li><p>304 Not Modified<br>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p></li><li><p>305 Use Proxy<br>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。</p><p>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p></li><li><p>306 Switch Proxy<br>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p></li><li><p>307 Temporary Redirect<br>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p></li><li><p>308 Permanent Redirect (RFC 7538)<br>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p></li></ul><h1 id="4xx客户端错误"><a href="#4xx客户端错误" class="headerlink" title="4xx客户端错误"></a>4xx客户端错误</h1><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p><p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p><ul><li><p>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p></li><li><p>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p></li><li><p>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p></li><li><p>403 Forbidden<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p></li><li><p>404 Not Found<br>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p></li><li><p>405 Method Not Allowed<br>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。</p><p>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p></li><li><p>406 Not Acceptable<br>参见：内容协商<br>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。</p><p>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p></li><li><p>407 Proxy Authentication Required（RFC 2617）<br>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p></li><li><p>408 Request Timeout<br>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p></li><li><p>409 Conflict<br>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p></li><li><p>410 Gone<br>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p></li><li><p>411 Length Required<br>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p></li><li><p>412 Precondition Failed（RFC 7232）<br>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p></li><li><p>413 Request Entity Too Large（RFC 7231）<br>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p><p>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p></li><li><p>414 Request-URI Too Long（RFC 7231）<br>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：</p><ul><li>本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。</li><li>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。</li><li>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</li></ul></li><li><p>415 Unsupported Media Type<br>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p></li><li><p>416 Requested Range Not Satisfiable（RFC 7233）<br>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p></li><li><p>417 Expectation Failed<br>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p></li><li><p>418 I’m a teapot（RFC 2324）<br>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）中用作彩蛋。</p></li><li><p>421 Misdirected Request （RFC 7540）<br>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p></li><li><p>422 Unprocessable Entity（WebDAV；RFC 4918 ）<br>请求格式正确，但是由于含有语义错误，无法响应。</p></li><li><p>423 Locked（WebDAV；RFC 4918）<br>当前资源被锁定。</p></li><li><p>424 Failed Dependency（WebDAV；RFC 4918）<br>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p></li><li><p>426 Upgrade Required（RFC 2817）<br>客户端应当切换到TLS/1.0，并在HTTP/1.1 Upgrade header中给出。</p></li><li><p>428 Precondition Required (RFC 6585)<br>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p></li><li><p>429 Too Many Requests （RFC 6585）<br>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p></li><li><p>431 Request Header Fields Too Large （RFC 6585）<br>服务器不愿处理请求，因为一个或多个头字段过大。</p></li><li><p>451 Unavailable For Legal Reasons<br>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p></li></ul><h1 id="5xx服务器错误"><a href="#5xx服务器错误" class="headerlink" title="5xx服务器错误"></a>5xx服务器错误</h1><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p><ul><li><p>500 Internal Server Error<br>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p></li><li><p>501 Not Implemented<br>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p></li><li><p>502 Bad Gateway<br>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p></li><li><p>503 Service Unavailable<br>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p></li><li><p>504 Gateway Timeout<br>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p><p>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p></li><li><p>505 HTTP Version Not Supported<br>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p></li><li><p>506 Variant Also Negotiates（RFC 2295）<br>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p></li><li><p>507 Insufficient Storage（WebDAV；RFC 4918）<br>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p></li><li><p>508 Loop Detected （WebDAV；RFC 5842）<br>服务器在处理请求时陷入死循环。 （可代替 208状态码）</p></li><li><p>510 Not Extended（RFC 2774）<br>获取资源所需要的策略并没有被满足。</p></li><li><p>511 Network Authentication Required （RFC 6585）<br>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> http-status-code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对于RSA密钥使用openssl和java</title>
      <link href="/2017/08/07/%E5%AF%B9%E4%BA%8ERSA%E5%AF%86%E9%92%A5%E4%BD%BF%E7%94%A8openssl%E5%92%8Cjava/"/>
      <url>/2017/08/07/%E5%AF%B9%E4%BA%8ERSA%E5%AF%86%E9%92%A5%E4%BD%BF%E7%94%A8openssl%E5%92%8Cjava/</url>
      
        <content type="html"><![CDATA[<h1 id="使用openssl生成一个新的密钥对"><a href="#使用openssl生成一个新的密钥对" class="headerlink" title="使用openssl生成一个新的密钥对"></a>使用openssl生成一个新的密钥对</h1><p>您首先使用 <code>genrsa</code> OpenSSL中的工具生成私钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out privatekey.pem 2048</span><br></pre></td></tr></table></figure></p><p>这将创建一个具有2048位长度的新的RSA私钥。密钥存储在文件中 <code>privatekey.pem</code>，它是“PEM”格式。PEM格式本质上是DER编码结构的base64编码变体。您可以查看文件，它应该以“BEGIN RSA PRIVATE KEY”标题开头，并以“END RSA PRIVATE KEY”页尾结尾：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">head -2 privatekey.pem; tail -1 privatekey.pem </span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpAIBAAKCAQEAth6P/MXUGL1y69Ao9THV16taSeUWnM4FQpmHP0yMDS3hB4V0</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p>现在我们需要开始这个文件。虽然这似乎只是私钥，公钥似乎丢失了，但并不是：这个私钥格式包含了重建公钥数据的所有信息。</p><h1 id="提取公钥"><a href="#提取公钥" class="headerlink" title="提取公钥"></a>提取公钥</h1><p>我们将使用的OpenSSL的第二个工具是<code>rsa</code>。这允许对密钥文件进行一些转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in privatekey.pem -out publickey.pem -pubout</span><br></pre></td></tr></table></figure></p><p>如果我们看生成文件 <code>publickey.pem</code>，我们看到，也是PEM格式。页眉和页脚行分别是“BEGIN PUBLIC KEY”和“END PUBLIC KEY”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">head -2 publickey.pem; tail -1 publickey.pem </span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAth6P/MXUGL1y69Ao9THV</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p>现在我们有明文密钥文件可用。您可以分发公钥文件，以允许对方加密一些数据，同时保留私钥。请注意，私钥文件未加密，必须以某种方式保护（如文件权限等）。</p><h1 id="了解关键文件结构"><a href="#了解关键文件结构" class="headerlink" title="了解关键文件结构"></a>了解关键文件结构</h1><p>Java本身不能直接加载在上述步骤中生成的PEM文件。然而，PEM文件实际上只是用附加的页眉和页脚编码的“DER”格式基础64。但是什么是“DER”格式？该手册页解释了一点：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-inform DER|NET|PEM</span><br><span class="line">  This specifies the input format. The DER option uses an ASN1 DER encoded form</span><br><span class="line">  compatible with the PKCS#1 RSAPrivateKey or SubjectPublicKeyInfo format.</span><br><span class="line">  The PEM form is the default format: it consists of the DER format base64</span><br><span class="line">  encoded with additional header and footer lines. On input PKCS#8 format</span><br><span class="line">  private keys are also accepted. The NET form is a format is described</span><br><span class="line">  in the NOTES section.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>所以有标准的PKCS＃1定义了结构RSAPrivateKey和SubjectPublicKeyInfo。该标准也作为RFC 3447出版。附录A.1.2中描述了交换私钥的建议：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class="line">     version           Version,</span><br><span class="line">     modulus           INTEGER,  -- n</span><br><span class="line">     publicExponent    INTEGER,  -- e</span><br><span class="line">     privateExponent   INTEGER,  -- d</span><br><span class="line">     prime1            INTEGER,  -- p</span><br><span class="line">     prime2            INTEGER,  -- q</span><br><span class="line">     exponent1         INTEGER,  -- d mod (p-1)</span><br><span class="line">     exponent2         INTEGER,  -- d mod (q-1)</span><br><span class="line">     coefficient       INTEGER,  -- (inverse of q) mod p</span><br><span class="line">     otherPrimeInfos   OtherPrimeInfos OPTIONAL</span><br><span class="line"> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>你可以看到两件事情：结构基本上是数字列表。私钥结构包含模数，这就是您可以从此私钥文件中提取公钥的原因。</p><p>公钥结构 <code>SubjectPublicKeyInfo</code> 如<a href="https://tools.ietf.org/html/rfc3447#appendix-A.1.1" target="_blank" rel="noopener">附录A.1.1所述</a>：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> RSAPublicKey ::= SEQUENCE &#123;</span><br><span class="line">     modulus           INTEGER,  -- n</span><br><span class="line">     publicExponent    INTEGER   -- e</span><br><span class="line"> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>您可以使用OpenSSL以“人类可读”格式显示此信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in privatekey.pem -text</span><br><span class="line">Private-Key: (2048 bit)</span><br><span class="line">modulus:</span><br><span class="line">    00:b6:1e:8f:fc:c5:d4:18:bd:72:eb:d0:28:f5:31:</span><br><span class="line">...</span><br><span class="line">publicExponent: 65537 (0x10001)</span><br><span class="line">privateExponent:</span><br><span class="line">    00:a9:f4:cb:9a:b1:63:c5:d2:c6:b4:9a:86:1e:8c:</span><br><span class="line">... It will display all the fields. The same is possible with the public key:</span><br><span class="line"></span><br><span class="line">openssl rsa -in publickey.pem -text -pubin</span><br><span class="line">Public-Key: (2048 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:b6:1e:8f:fc:c5:d4:18:bd:72:eb:d0:28:f5:31:</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h1 id="将密钥文件转换为Java（公共密钥）"><a href="#将密钥文件转换为Java（公共密钥）" class="headerlink" title="将密钥文件转换为Java（公共密钥）"></a>将密钥文件转换为Java（公共密钥）</h1><p>普通Java能够理解公钥格式。但是，它不能直接读取PEM文件，但可以理解DER编码。解决方案是，首先使用Base64对文件进行解码，然后通过Java进行解析。这是一个这样做的代码段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static PublicKey loadPublicKey() throws Exception &#123;</span><br><span class="line">    String publicKeyPEM = FileUtils.readFileToString(new File(&quot;publickey.pem&quot;), StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    // strip of header, footer, newlines, whitespaces</span><br><span class="line">    publicKeyPEM = publicKeyPEM</span><br><span class="line">            .replace(&quot;-----BEGIN PUBLIC KEY-----&quot;, &quot;&quot;)</span><br><span class="line">            .replace(&quot;-----END PUBLIC KEY-----&quot;, &quot;&quot;)</span><br><span class="line">            .replaceAll(&quot;\\s&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">    // decode to get the binary DER representation</span><br><span class="line">    byte[] publicKeyDER = Base64.getDecoder().decode(publicKeyPEM);</span><br><span class="line"></span><br><span class="line">    KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">    PublicKey publicKey = keyFactory.generatePublic(new X509EncodedKeySpec(publicKeyDER));</span><br><span class="line">    return publicKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它用于 <code>X509EncodedKeySpec</code> 加载公钥，这只是推荐的 <code>SubjectPublicKeyInfo</code> 实现。</p><p>注意：我使用 <a href="http://commons.apache.org/proper/commons-io/" target="_blank" rel="noopener">Apache的commons-io</a>库 <code>FileUtils</code>。其他一切都包含在标准的Java8 JDK中。</p><h1 id="转换私钥用于Java"><a href="#转换私钥用于Java" class="headerlink" title="转换私钥用于Java"></a>转换私钥用于Java</h1><p>不幸的是，我们不能使用完全相同的技巧来进行私钥。Java具有私钥的编码密钥规范：<code>PKCS8EncodedKeySpec</code> - 但是，它实现了“PKCS＃8”而不是我们使用的“PKCS＃1”。幸运的是，OpenSSL还包含一个这种格式的转换器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -in privatekey.pem -topk8 -nocrypt -out privatekey-pkcs8.pem</span><br></pre></td></tr></table></figure></p><p>如果您检查生成的文件，您将再次看到PEM格式，但现在标题为“BEGIN PRIVATE KEY”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">head -2 privatekey-pkcs8.pem; tail -1 privatekey-pkcs8.pem</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC2Ho/8xdQYvXLr</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p>请注意，这个私钥文件也没有加密（<code>nocrypt</code>），并且必须保持安全。<br>该格式在 <a href="https://tools.ietf.org/html/rfc5208" target="_blank" rel="noopener">RFC 5208</a> 和 <a href="https://tools.ietf.org/html/rfc5208#section-5" target="_blank" rel="noopener">第5节中</a> 的结构中 描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PrivateKeyInfo ::= SEQUENCE &#123;</span><br><span class="line">  version                   Version,</span><br><span class="line">  privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,</span><br><span class="line">  privateKey                PrivateKey,</span><br><span class="line">  attributes           [0]  IMPLICIT Attributes OPTIONAL &#125;</span><br></pre></td></tr></table></figure></p><p>它再次被DER编码，它实际上只是 <code>RSAPrivateKey</code> 在 <code>privateKey</code> 字段中从上面包装结构。但是，此格式允许使用密码加密私钥（我们在此示例中不使用）。</p><p>现在我们也可以在Java中加载私钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static PrivateKey loadPrivateKey() throws Exception &#123;</span><br><span class="line">    String privateKeyPEM = FileUtils.readFileToString(new File(&quot;privatekey-pkcs8.pem&quot;), StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    // strip of header, footer, newlines, whitespaces</span><br><span class="line">    privateKeyPEM = privateKeyPEM</span><br><span class="line">            .replace(&quot;-----BEGIN PRIVATE KEY-----&quot;, &quot;&quot;)</span><br><span class="line">            .replace(&quot;-----END PRIVATE KEY-----&quot;, &quot;&quot;)</span><br><span class="line">            .replaceAll(&quot;\\s&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">    // decode to get the binary DER representation</span><br><span class="line">    byte[] privateKeyDER = Base64.getDecoder().decode(privateKeyPEM);</span><br><span class="line"></span><br><span class="line">    KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">    PrivateKey privateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyDER));</span><br><span class="line">    return privateKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用RSA在Java中加密和解密"><a href="#使用RSA在Java中加密和解密" class="headerlink" title="使用RSA在Java中加密和解密"></a>使用RSA在Java中加密和解密</h1><p>现在我们可以使用Java加密和解密，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);</span><br><span class="line">    String clearText = &quot;Sample plain text&quot;;</span><br><span class="line"></span><br><span class="line">    PublicKey publicKey = loadPublicKey();</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">    byte[] encrypted = cipher.doFinal(clearText.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">    PrivateKey privateKey = loadPrivateKey();</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">    byte[] decrypted = cipher.doFinal(encrypted);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;ClearText: &quot; + clearText);</span><br><span class="line">    System.out.println(&quot;Decrypted: &quot; + new String(decrypted, StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(&quot;ClearText length: &quot; + clearText.getBytes(StandardCharsets.UTF_8).length);</span><br><span class="line">    System.out.println(&quot;Encrypted length: &quot; + encrypted.length);</span><br><span class="line">    System.out.println(&quot;Encrypted: &quot; + Base64.getEncoder().encodeToString(encrypted));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClearText: Sample plain text</span><br><span class="line">Decrypted: Sample plain text</span><br><span class="line">ClearText length: 17</span><br><span class="line">Encrypted length: 256</span><br><span class="line">Encrypted: riHHycTvKaDtX3SkeoZbFCW3KW3vxEIsF3wVQqOKuwAbTtWFyP6yN5essem+jTx16Ggdp6/rzS9r9Wy5O6P8JuOQAKi...</span><br></pre></td></tr></table></figure></p><p>您可以看到明文已经膨胀多达256个字节。这是因为我生成了一个2048位长度的RSA密钥，这是256字节。RSA密码以块为单位加密，并在块中使用填充。我使用“PKCS1Padding”，它使用11个字节进行填充，这意味着，最多可以在一个块中加密256-11 = 245字节的普通数据。如果您有更大的数据要加密，则需要链接这些块。链接块有不同的方法：电子码本（ECB），密码块链接（CBC）。请参阅 <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation" target="_blank" rel="noopener">分组密码操作模式</a>。您还可以考虑使用混合方法，这意味着您将首先通过RSA交换AES的对称密钥，然后将此AES密钥用于要交换的较大数据。<br>另请参见：<br><a href="https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem" target="_blank" rel="noopener">mbedtls - ASN.1 DER和PEM中的关键结构</a><br>英文原文：<a href="https://adangel.org/2016/08/29/openssl-rsa-java/" target="_blank" rel="noopener">Using openssl and java for RSA keys</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rsa </tag>
            
            <tag> openssl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle 修改文件内容后导致中文乱码</title>
      <link href="/2017/05/26/Gradle-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%90%8E%E5%AF%BC%E8%87%B4%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2017/05/26/Gradle-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%90%8E%E5%AF%BC%E8%87%B4%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>gradle version: 3.0</p></blockquote><p>昨天使用 Gradle 为测试环境打包时，使用测试环境的配置信息，替换系统配置文件后，发现配置文件中的中文注释，编程乱码了，导致发布到测试环境后，jetty 报 <code>3 字节的 UTF-8 序列的字节 3 无效</code> 的错误。这里简单介绍一下错误原因和解决方案。</p><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p><code>src/main/resources/log4j2.xml</code> 部分内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &lt;Properties&gt;</span><br><span class="line">    &lt;!-- 项目名称 --&gt;</span><br><span class="line">    &lt;Property name=&quot;project.name&quot;&gt;@project.name@&lt;/Property&gt;</span><br><span class="line">  &lt;/Properties&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><code>build.gradle</code> 部分内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">processResources &#123;</span><br><span class="line">    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换</span><br><span class="line">    from(sourceSets.main.resources.srcDirs) &#123;</span><br><span class="line">        filter(ReplaceTokens, tokens: configuration.toProperties())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面 <code>processResources</code> 方法会导致 <code>log4j2.xml</code> 中的中文注释乱码，最终导致启动报错。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决这个问题并不困难，直接在 <code>processResources</code> 方法添加一行 <code>filteringCharset = &#39;UTF-8&#39;</code> 即可，最终的 <code>processResource</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">processResources &#123;</span><br><span class="line">    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换</span><br><span class="line">    filteringCharset = &apos;UTF-8&apos;</span><br><span class="line">    from(sourceSets.main.resources.srcDirs) &#123;</span><br><span class="line">        filter(ReplaceTokens, tokens: configuration.toProperties())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jetty 9 增加项目部署目录</title>
      <link href="/2017/05/23/Jetty-9-%E5%A2%9E%E5%8A%A0%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E7%9B%AE%E5%BD%95/"/>
      <url>/2017/05/23/Jetty-9-%E5%A2%9E%E5%8A%A0%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jetty version = jetty-9.3.12.v20160915 - 15 September 2016</p></blockquote><ul><li><p>在 <code>jetty</code> 下新建一个目录 <code>webapps-dev</code> 用来发布开发版本的项目</p></li><li><p>找到 <code>jetty/etc/jetty-deploy.xml</code> 配置文件，修改第 42 ~ 49 行：<br>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Set name=&quot;monitoredDirName&quot;&gt;</span><br><span class="line">  &lt;Property&gt;</span><br><span class="line">    &lt;Name&gt;jetty.deploy.monitoredPath&lt;/Name&gt;</span><br><span class="line">    &lt;Default&gt;</span><br><span class="line">      &lt;Property name=&quot;jetty.base&quot; default=&quot;.&quot; /&gt;/&lt;Property name=&quot;jetty.deploy.monitoredDir&quot; deprecated=&quot;jetty.deploy.monitoredDirName&quot; default=&quot;webapps&quot;/&gt;</span><br><span class="line">    &lt;/Default&gt;</span><br><span class="line">  &lt;/Property&gt;</span><br><span class="line">&lt;/Set&gt;</span><br></pre></td></tr></table></figure></li></ul><p>注释，替换为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Set name=&quot;monitoredDirectories&quot;&gt;</span><br><span class="line">  &lt;Array type=&quot;java.lang.String&quot;&gt;</span><br><span class="line">    &lt;Item&gt;</span><br><span class="line">      &lt;Property name=&quot;jetty.base&quot; default=&quot;.&quot; /&gt;/webapps</span><br><span class="line">    &lt;/Item&gt;</span><br><span class="line">    &lt;Item&gt;</span><br><span class="line">      &lt;Property name=&quot;jetty.base&quot; default=&quot;.&quot; /&gt;/webapps-dev</span><br><span class="line">    &lt;/Item&gt;</span><br><span class="line">  &lt;/Array&gt;</span><br><span class="line">&lt;/Set&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>启动 Jetty，从下图启动日志中红框内可以看到，已经将 <code>jetty/webapps</code> 和 <code>jetty/webapps-dev</code> 添加到 Jetty 的项目部署目录中。</p><p>  <img src="http://image.xueliang.org/FuL3xvkUCnumZVZSU-_XNpnIR6uV" alt="启动日志"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jetty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 多列索引优化小记</title>
      <link href="/2017/03/26/MySQL-%E5%A4%9A%E5%88%97%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/"/>
      <url>/2017/03/26/MySQL-%E5%A4%9A%E5%88%97%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySQL 5.6.30</p></blockquote><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>由于爬虫抓取的数据不断增多，这两天在不断对数据库以及查询语句进行优化，其中一个表结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `newspaper_article` (</span><br><span class="line">  `id` varchar(50) NOT NULL COMMENT &apos;编号&apos;,</span><br><span class="line">  `title` varchar(190) NOT NULL COMMENT &apos;标题&apos;,</span><br><span class="line">  `author` varchar(255) DEFAULT NULL COMMENT &apos;作者&apos;,</span><br><span class="line">  `date` date NULL DEFAULT NULL COMMENT &apos;发表时间&apos;,</span><br><span class="line">  `content` longtext COMMENT &apos;正文&apos;,</span><br><span class="line">  `status` tinyint(4) DEFAULT &apos;0&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_status_date` (`status`,`date`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&apos;文章表&apos;;</span><br></pre></td></tr></table></figure></p><p>根据业务需要，添加了 <code>idx_status_date</code> 索引，在执行下面这个 SQL 时特别耗时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id, title, status, date FROM newspaper_article WHERE status &gt; -2 AND date = &apos;2016-01-07&apos;;</span><br></pre></td></tr></table></figure></p><p>根据观察，每天新增的数据大概在2500条以内，本以为这里指定了具体某天的日期 <code>&#39;2016-01-07&#39;</code> ，实际需要扫描的数据量应该在2500条以内才对，但实际并非如此：<br><img src="http://image.xueliang.org/Fk93L0VL2P4oXlfqm3heVGId_z-J" alt="EXPLAIN"><br>实际共扫描了185589条数据，远远高于预估的2500条，且实际执行时间都将近3秒钟：</p><p><img src="http://image.xueliang.org/FiDBpGkTmeMhahJnOl8np9g-8xu_" alt="EXPLAIN"></p><p>这是为什么呢？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>将 <code>idx_status_date (status, date)</code> 改为 <code>idx_status (status)</code> 后，查看 MySQL 执行计划：</p><p><img src="http://image.xueliang.org/FjU1K2BW5hE-Q2RRe8qjbOgp2_ti" alt="EXPLAIN"></p><p>可以看到将多列索引改为单列索引后，执行计划要扫描的数据总量没有任何变化。结合多列索引遵循最左前缀原则，推测上面的查询语句只使用了 <code>idx_status_date</code> 最左边的 <code>status</code> 的索引。</p><p>翻了下《高性能MySQL》找到了下面这段话，证实了我的想法：</p><blockquote><p>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找。例如有查询 <code>WHERE last_name = &#39;Smith&#39; AND first_name LIKE &#39;J%&#39; AND dob = &#39;1976-12-23&#39;</code> ，这个查询只能使用索引的前两列，因为这里 <code>LIKE</code> 是一个范围条件（但是服务器可以把其余列用于其他目的）。如果范围查询列值的数量有限，那么可以通过使用多个等于条件来代替范围条件。</p></blockquote><p>因此，这里解决思路有两种：</p><ul><li>可以通过使用多个等于条件来代替范围条件</li><li>修改 <code>idx_status_date (status, date)</code> 为索引 <code>idx_date_status (date, status)</code> ，并新建一个 <code>idx_status</code> 索引，即可达到同样的效果。</li></ul><p>优化后的执行计划：</p><p><img src="http://image.xueliang.org/Fk174VOrEpgCc9Aw7sDe95xlg8cs" alt="EXPLAIN"></p><p>实际执行结果：</p><p><img src="http://image.xueliang.org/Fif7-uOlq8mLBm4wwRF4FTbRUAvV" alt="EXPLAIN"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当人们谈论索引的时候，如果没有特别指明类型，那么多半说的是 <code>B-Tree</code> 索引，它使用 <code>B-Tree</code> 数据结构来存储数据。我们使用术语“B-Tree”，是因为 MySQL 在 <code>CREATE TABLE</code> 和其他语句中也使用该关键字。不过，底层的存储引擎也可能使用不同的存储结构。InnoDB使用的是B+Tree。<br>假如有如下数据表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE People (</span><br><span class="line">  last_name  varchar(50)    not null,</span><br><span class="line">  first_name varchar(50)    not null,</span><br><span class="line">  dob        date           not null,</span><br><span class="line">  gender     enum(&apos;m&apos;, &apos;f&apos;) not null,</span><br><span class="line">  key(last_name, first_name, dob)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="B-Tree-索引对如下类型的查询有效"><a href="#B-Tree-索引对如下类型的查询有效" class="headerlink" title="B-Tree 索引对如下类型的查询有效"></a>B-Tree 索引对如下类型的查询有效</h2><ul><li>全值匹配<br>全值匹配指的是和索引中的所有列进行匹配，例如上表的索引可用于查找姓名为 Cuba Allen 、出生于 1960-01-01 的人。</li><li>匹配最左前缀<br>上表中的索引可用于查找所有姓为 Allen 的人，即只使用索引的第一列。</li><li>匹配列前缀<br>只匹配某一列的值的开头部分。例如上表的索引可用于查找所有以 J 开头的姓的人。这里也只使用了索引的第一列。</li><li>匹配范围值<br>例如上表中的索引可用于查找姓在 Allen 和 Barrymore 之间的人。这里也只使用了索引的第一列。</li><li>精确匹配某一列并范围匹配另外一列<br>上表的索引也可用于查找所有姓为 Allen ，并且名字是字母 K 开头（比如 Kim 、 Karl 等）的人。即第一列 last_name 全匹配，第二列 first_name 范围匹配。</li><li>只访问索引的查询<br>B-Tree 通常可以支持“只访问索引的查询”，即查询只需要访问索引，而无须访问数据行。</li></ul><h2 id="B-Tree-索引的一些限制"><a href="#B-Tree-索引的一些限制" class="headerlink" title="B-Tree 索引的一些限制"></a>B-Tree 索引的一些限制</h2><ul><li>如果不是按照索引的最左列开始查找，则无法使用索引。例如上表的索引无法用于查找名字为 Bill 的人，也无法查找某个特定生日的人，因为这两列都不是最左数据列。类似地，也无法查找姓氏以某个字母结尾的人。</li><li>不能跳过索引中列。也就是说，上表的索引无法用于查找姓氏为 Smith 并且在某个特定日期出生的人。如果不指定名（first_name），则 MySQL 只能使用索引的第一列。</li><li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找。例如有查询 <code>WHERE last_name = &#39;Smith&#39; AND first_name LIKE &#39;J%&#39; AND dob = &#39;1976-12-23&#39;</code> ，这个查询只能使用索引的前两列，因为这里 <code>LIKE</code> 是一个范围条件（但是服务器可以把其余列用于其他目的）。如果范围查询列值的数量有限，那么可以通过使用多个等于条件来代替范围条件。</li></ul><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ul><li><a href="20160925012806814">MySQL 中 AUTO_INCREMENT 的“坑”</a></li><li><a href="20160805180325276">MySQL主从架构配置详解</a></li><li><a href="20160725154157065">MySQL中字符串、日期时间等常用函数总结</a></li><li><a href="3">MySQL 工作笔记（持续更新）</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC + Security 4 初体验（Java配置版）</title>
      <link href="/2017/03/06/Spring-MVC-Security-4-%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88Java%E9%85%8D%E7%BD%AE%E7%89%88%EF%BC%89/"/>
      <url>/2017/03/06/Spring-MVC-Security-4-%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88Java%E9%85%8D%E7%BD%AE%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>spring Version = 4.3.6.RELEASE<br>springSecurityVersion = 4.2.1.RELEASE<br>Gradle 3.0 + Eclipse Neno(4.6)</p></blockquote><p>这篇文章同样是使用的Java配置，而非XML配置，如果你对于Java配置的Spring MVC开发还不太熟悉，可以先看我<a href="http://xueliang.org/article/detail/20161102173458963" target="_blank" rel="noopener">这篇文章</a>。</p><h1 id="Authority"><a href="#Authority" class="headerlink" title="Authority"></a>Authority</h1><p>创建一个 <code>Authority</code> ，实现自 <code>org.springframework.security.core.GrantedAuthority</code> 类，<code>getAuthority</code> 方法只返回一个表示权限名称的字符串，如 <code>AUTH_USER</code> 、 <code>AUTH_ADMIN</code> 、 <code>AUTH_DBA</code> 等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Authority implements GrantedAuthority &#123;</span><br><span class="line">    </span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private String authority;</span><br><span class="line"></span><br><span class="line">    public Authority() &#123;  &#125;</span><br><span class="line">    public Authority(String authority) &#123;</span><br><span class="line">        this.setAuthority(authority);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public String getAuthority() &#123;</span><br><span class="line">        return this.authority;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAuthority(String authority) &#123;</span><br><span class="line">        this.authority = authority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="User"><a href="#User" class="headerlink" title="User"></a>User</h1><p><code>User</code> 类实现自 <code>org.springframework.security.core.userdetails.UserDetails</code> 接口，包含一组权限的集合 <code>authorities</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class User implements UserDetails &#123;</span><br><span class="line">    </span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    </span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private List&lt;Authority&gt; authorities;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        return this.authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAuthorities(List&lt;Authority&gt; authorities) &#123;</span><br><span class="line">        this.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h1><p><code>MyUserDetailsService</code> 实现了 <code>org.springframework.security.core.userdetails.UserDetailsService</code> 的 <code>loadUserByUsername</code> 方法，该方法根据用户名查询符合条件的用户，若没有找到符合条件的用户，必须抛出 <code>UsernameNotFoundException</code> 异常，而不能返回空。这里可以调用 DAO 层，从数据库查询用户，我为了简单，直接将用户临时放到一个常量内，模拟从数据库查询用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MyUserDetailsService implements UserDetailsService &#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">        List&lt;User&gt; userList = Constants.userList;</span><br><span class="line">        for (int i = 0, len = userList.size(); i &lt; len; i++) &#123;</span><br><span class="line">            User user = userList.get(i);</span><br><span class="line">            if (user.getUsername().equals(username)) &#123;</span><br><span class="line">                return user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new UsernameNotFoundException(&quot;用户不存在！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h1><p><code>SecurityConfig</code> 类继承 <code>org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</code>，<code>WebSecurityConfigurerAdapter</code> 提供了一些默认的配置，方便创建一个实例。</p><p>进入 <code>configure</code> 方法中，首先允许任何情况下的对<code>csrfTokenApi</code> 的请求，该 API 返回一个 <code>csrfToken</code> ，默认情况下除 <code>GET</code>、<code>HEAD</code>、<code>TRACE</code> 和 <code>OPTIONS</code>外，所有请求都必须经过 <a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">CSRF</a> 认证。接下来对不同的API请求设置不同的权限，并且确保所有对 <code>/api/</code> 下的请求都经过了认证。<br>这里向 <code>access</code> 方法传递的表达式中的权限名称，对应上面提到的 <code>Authority</code> 类中 <code>getAuthority</code> 返回的字符串的值，详细的表达式介绍，请移步至<a href="http://docs.spring.io/spring-security/site/docs/4.2.2.RELEASE/reference/htmlsingle/#el-access" target="_blank" rel="noopener">这里</a>。</p><p>接着，对登录表单进行配置。通过 <code>loginProcessingUrl</code> 配置表单提交地址，这个地址对应的API不需要自己写，Spring Security 会自动拦截提交到此地址请求，将其视为登录请求。如果希望登录成功后通过服务器转发到其他页面，可以调用 <code>successForwardUrl(String forwardUrl)</code> 方法指定跳转的地址，对应地，指定失败后跳转地址的方法是 <code>failureForwardUrl(String forwardUrl)</code>。</p><p>这里我使用了RESTful，故不需要配置服务端的转发，而是配置了另外两处：<code>successHandler</code> 和 <code>failureHandler</code> ，<code>successHandler</code> 方法接收一个 <code>AuthenticationSuccessHandler</code> 对象，认证通过之后，Spring Security 将调用该对象的 <code>onAuthenticationSuccess</code> 方法，类似地，<code>failureHandler</code> 方法接收一个 <code>AuthenticationFailureHandler</code> 对象，认证失败之后，将调用该对象的 <code>onAuthenticationFailure</code> 方法。</p><p>配置完登录相关信息之后，接着配置和登出有关的信息。和配置登录表单提交地址类似，这里需要配置登出请求提交地址，这里调用 <code>logoutUrl</code> 方法，指定登出的链接地址，该地址和前面提到的 <code>loginProcessingUrl</code> 都不需要自己写，这两个都是全权交由 Spring Security 来处理。当用户请求 <code>logoutUrl</code> 方法指定的地址时，Spring Security 将对用户执行登出操作。和前面提到的 <code>successForwardUrl</code> 类似，这里提供了 <code>logoutSuccessUrl</code> 方法指定登出成功之后转发的地址。不过我用了RESTful，就不再调用此方法，而是调用 <code>logoutSuccessHandler</code> 传入 <code>LogoutSuccessHandler</code> 对象，登出成功后将调用该对象的 <code>onLogoutSuccess</code> 方法。</p><p>最后，配置对异常的处理 <code>exceptionHandling</code> ，和上面介绍的 <code>successHandler</code> 、 <code>failureHandler</code> 以及 <code>logoutSuccessHandler</code> 差不多，<code>authenticationEntryPoint</code> 接收一个 <code>AuthenticationEntryPoint</code> 对象，当用户请求的操作需要登录时，将抛出 <code>AuthenticationException</code> 异常，并且将该异常传入到 <code>AuthenticationEntryPoint</code> 对象的 <code>commence</code> 方法。<br><code>accessDeniedHandler</code> 方法接收一个 <code>AccessDeniedHandler</code> 对象，该对象的 <code>handle</code> 方法将在权限不足时调用。</p><p>配置完这些，看 <code>configureGlobalSecurity</code> 方法，给 <code>AuthenticationManagerBuilder</code> 配置一个 <code>UserDetailsService</code> 对象，当用户执行登录时，Spring Security 将调用该对象的 <code>loadUserByUsername</code> 方法，将 <code>username</code> 传入此方法，根据 <code>username</code> 获取一个 <code>UserDetails</code> 对象。</p><p>另外，由于不能在数据库中保存明文密码，这里对密码进行 <code>bcrypt</code> 加密后保存，验证密码是否正确时，需要对用户输入的明文密码进行 <code>bcrypt</code> 加密后比较密文是否一致，故这里需要提供一个 <code>BCryptPasswordEncoder</code> 对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;api.csrftoken&#125;&quot;)</span><br><span class="line">    private String csrfTokenApi;</span><br><span class="line">    </span><br><span class="line">    @Value(&quot;$&#123;api.login&#125;&quot;)</span><br><span class="line">    private String loginApi;</span><br><span class="line">    </span><br><span class="line">    @Value(&quot;$&#123;api.logout&#125;&quot;)</span><br><span class="line">    private String logoutApi;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private MyUserDetailsService userDetailsService;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordEncoder passwordEncoder;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(csrfTokenApi).permitAll()</span><br><span class="line">        .antMatchers(&quot;/api/user/**&quot;).access(&quot;hasAuthority(&apos;USER&apos;)&quot;)</span><br><span class="line">        .antMatchers(&quot;/api/admin/**&quot;).access(&quot;hasAuthority(&apos;ADMIN&apos;)&quot;)</span><br><span class="line">        .antMatchers(&quot;/api/dba/**&quot;).access(&quot;hasAuthority(&apos;DBA&apos;)&quot;)</span><br><span class="line">        .antMatchers(&quot;/api/**&quot;).fullyAuthenticated()</span><br><span class="line">        .and().formLogin().loginProcessingUrl(loginApi)</span><br><span class="line">        .successHandler(new RestAuthenticationSuccessHandler())</span><br><span class="line">        .failureHandler(new RestAuthenticationFailureHandler())</span><br><span class="line">        .and().logout().logoutUrl(logoutApi)</span><br><span class="line">        .logoutSuccessHandler(new RestLogoutSuccessHandler())</span><br><span class="line">        .and().exceptionHandling().authenticationEntryPoint(new RestAuthenticationEntryPoint())</span><br><span class="line">        .accessDeniedHandler(new RestAccessDeniedHandler());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    public PasswordEncoder passwordEncoder() &#123;</span><br><span class="line">        return new BCryptPasswordEncoder(11);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="WebAppConfig"><a href="#WebAppConfig" class="headerlink" title="WebAppConfig"></a>WebAppConfig</h1><p>因为采用RESTful风格，这里配置响应视图为json格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@ComponentScan(basePackages = &quot;org.xueliang.springsecuritystudy&quot;)</span><br><span class="line">@PropertySource(&#123;&quot;classpath:config.properties&quot;&#125;)</span><br><span class="line">public class WebAppConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    public RequestMappingHandlerAdapter requestMappingHandlerAdapter(@Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter, @Autowired ContentNegotiationManager mvcContentNegotiationManager) &#123;</span><br><span class="line">        RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();</span><br><span class="line">        requestMappingHandlerAdapter.setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));</span><br><span class="line">        requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class="line">        return requestMappingHandlerAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() &#123;</span><br><span class="line">        return new MappingJackson2HttpMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 设置欢迎页</span><br><span class="line">     * 相当于web.xml中的 welcome-file-list &gt; welcome-file</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addRedirectViewController(&quot;/&quot;, &quot;/index.html&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="WebAppInitializer"><a href="#WebAppInitializer" class="headerlink" title="WebAppInitializer"></a>WebAppInitializer</h1><p>Spring Security 架构是完全基于标准的 Servlet 过滤器的，这里我们需要在 <code>WebInitializer</code> 中引入 <code>DelegatingFilterProxy</code> 过滤器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onStartup(ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">        servletContext.addFilter(&quot;springSecurityFilterChain&quot;, new DelegatingFilterProxy(&quot;springSecurityFilterChain&quot;)).addMappingForUrlPatterns(null, false, &quot;/api/*&quot;);</span><br><span class="line">        // 静态资源映射</span><br><span class="line">        servletContext.getServletRegistration(&quot;default&quot;).addMapping(&quot;*.html&quot;, &quot;*.ico&quot;);</span><br><span class="line">        super.onStartup(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        return new Class[] &#123; WebAppConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String[] getServletMappings() &#123;</span><br><span class="line">        return new String[] &#123; &quot;/&quot; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Filter[] getServletFilters() &#123;</span><br><span class="line">        return new Filter[] &#123; new CharacterEncodingFilter(&quot;UTF-8&quot;, true) &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>本文使用到的项目源码已经放到 <a href="https://github.com/liangzai-cool/springsecuritystudy" target="_blank" rel="noopener">Github</a> 上，你可以下载后运行。</p><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ul><li><a href="20161102173458963">Spring RESTful + Redis全注解实现恶意登录保护机制</a></li><li><a href="20170116145848852">Java程序通过代理访问网络</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring-mvc </tag>
            
            <tag> spring-security </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java程序通过代理访问网络</title>
      <link href="/2017/01/16/Java%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C/"/>
      <url>/2017/01/16/Java%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>最近工作上有开发爬虫的任务，对目标网站数据进行抓取，由于大部分网站都在国外，无法直接访问，需要通过代理才能登录。爬虫部署的服务器在香港，所以爬虫部署到服务器后，是可以访问目标网站的，但本地开发调试程序时，需要通过代理才能访问。<br>这篇文章就带大家了解一下如何在Java程序中使用代理访问网络。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li><p>你需要一个代理服务器，和一个可以连接到此服务器的客户端。<br>  花点银子买一个稳定的账号，或者自己搭建一个。<br>  这里我使用自己搭建的 <code>Shadowsocks</code> 代理服务器，使用 <code>Shadowsocks-Windows</code> 作为本地代理的客户端，并开启默认的 <code>1080</code> 端口，以供本地其他程序通过代理访问网络。<br>  <img src="http://image.xueliang.org/FqlRARvFIf1lKIBlLvEz4ay5L9ko" alt="编辑服务器信息"></p></li><li><p>指定 Java 程序的代理服务器地址和端口<br>有两种指定方式：</p><ol><li><p>通过 命令行参数 指定<br>如果只需要考虑代理 HTTP 协议请求，只需添加如下命令行参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1080</span><br></pre></td></tr></table></figure><p>想要 HTTP 和 HTTPS 协议的请求都通过代理访问网络，可以追加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=1080</span><br></pre></td></tr></table></figure><p>最终填写的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1080 -Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=1080</span><br></pre></td></tr></table></figure></li><li><p>在程序中使用System.setProperty(String, String)<br>同样很简单，这里直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String proxyHost = &quot;127.0.0.1&quot;;</span><br><span class="line">String proxyPort = &quot;1080&quot;;</span><br><span class="line">      </span><br><span class="line">System.setProperty(&quot;http.proxyHost&quot;, proxyHost);</span><br><span class="line">System.setProperty(&quot;http.proxyPort&quot;, proxyPort);</span><br><span class="line">      </span><br><span class="line">// 对https也开启代理</span><br><span class="line">System.setProperty(&quot;https.proxyHost&quot;, proxyHost);</span><br><span class="line">System.setProperty(&quot;https.proxyPort&quot;, proxyPort);</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>推荐使用第一种方案，通过VM Option 的方式，对代码没有任何侵入，绿色环保。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>这里我在Eclipse中使用第一种方法进行测试。</p><ul><li><p>测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        URL url = new URL(&quot;https://google.com&quot;);</span><br><span class="line">        URLConnection connection = url.openConnection();</span><br><span class="line">        connection.connect();</span><br><span class="line">        InputStream inputStream = connection.getInputStream();</span><br><span class="line">        byte[] bytes = new byte[1024];</span><br><span class="line">        while (inputStream.read(bytes) &gt;= 0) &#123;</span><br><span class="line">            System.out.println(new String(bytes));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果，可以正常访问Google等网站。<br><img src="http://image.xueliang.org/FlyRc6E_wFM5VPBDT4bHO7Tjuctv" alt="Java通过代理访问google.com结果"></p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了上述 <code>http.proxyHost</code> 和 <code>http.proxyPort</code>，以及 <code>https.proxyHost</code> 和 <code>https.proxyPort</code> 在代理时比较有用外，还有一个属性也比较有用，那就是 <code>http.nonProxyHosts</code>，它用来指定哪些主机不使用代理，如果有多个，用英文竖线（<code>|</code>）分隔，可以使用星号 （<code>*</code>）作为通配符。<br>下表是常用协议对应的代理属性：</p><table class="table table-bordered"><br>  <thead><br>    <th>协议</th><br>    <th>属性（代理主机/代理端口/不使用代理的主机列表）</th><br>    <th>默认值</th><br>  </thead><br>  <tbody><br>    <tr><br>      <td rowspan="3" style="vertical-align: middle;">HTTP</td><br>      <td>http.proxyHost</td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td>http.proxyPort</td><br>      <td>80</td><br>    </tr><br>    <tr><br>      <td>http.nonProxyHosts </td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td rowspan="3" style="vertical-align: middle;">HTTPS</td><br>      <td>https.proxyHost</td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td>https.proxyPort</td><br>      <td>443</td><br>    </tr><br>    <tr><br>      <td>https.nonProxyHosts </td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td rowspan="3" style="vertical-align: middle;">FTP</td><br>      <td>ftp.proxyHost</td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td>ftp.proxyPort</td><br>      <td>80</td><br>    </tr><br>    <tr><br>      <td>ftp.nonProxyHosts </td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td rowspan="3" style="vertical-align: middle;">SOCKS</td><br>      <td>socksProxyHost</td><br>      <td>&lt;none&gt;</td><br>    </tr><br>    <tr><br>      <td>socksProxyPort </td><br>      <td>1080</td><br>    </tr><br>  </tbody><br></table><p>详细介绍请参考官方说明：<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html" target="_blank" rel="noopener">Java Networking and Proxies</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring RESTful + Redis全注解实现恶意登录保护机制</title>
      <link href="/2016/11/02/Spring-RESTful-Redis%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%81%B6%E6%84%8F%E7%99%BB%E5%BD%95%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
      <url>/2016/11/02/Spring-RESTful-Redis%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%81%B6%E6%84%8F%E7%99%BB%E5%BD%95%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>好久没更博了…<br>最近看了个真正全注解实现的 SpringMVC 博客，感觉很不错，终于可以彻底丢弃 <code>web.xml</code> 了。其实这玩意也是老东西了，丢弃 <code>web.xml</code>，是基于 5、6年前发布的 Servlet 3.0 规范，只不过少有人玩而已…现在4.0都快正式发布了…Spring对注解的支持也从09年底就开始支持了…<br>基础部分我就不仔细讲了，可以先看一下<a href="https://my.oschina.net/devleon/blog/530803" target="_blank" rel="noopener">这篇</a> 以及其中提到的另外两篇文章，这三篇文章讲的很不错。<br>下面开始旧东西新玩~~~</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>项目是基于 <code>gradle 3.1</code>构建的，这是项目依赖：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="keyword">def</span> springVersion = <span class="string">'4.3.2.RELEASE'</span></span><br><span class="line">  </span><br><span class="line">  compile <span class="string">"org.springframework:spring-web:$springVersion"</span></span><br><span class="line">  compile <span class="string">"org.springframework:spring-webmvc:$springVersion"</span></span><br><span class="line">  compile <span class="string">"redis.clients:jedis:2.9.0"</span></span><br><span class="line">  compile <span class="string">"javax.servlet:javax.servlet-api:3.1.0"</span></span><br><span class="line">  compile <span class="string">"org.json:json:20160810"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="编写Java版的web-xml"><a href="#编写Java版的web-xml" class="headerlink" title="编写Java版的web.xml"></a>编写Java版的web.xml</h1><p>想要让请求经过Java，少不了配置 <code>web.xml</code>，不过现在我们来写个Java版的~<br>这里和传统的 <code>web.xml</code> 一样，依次添加 <code>filter</code>， <code>servlet</code> 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xueliang.loginsecuritybyredis.commons;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterRegistration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.WebApplicationInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于注解的/WEB-INF/web.xml</span></span><br><span class="line"><span class="comment"> * 依赖 servlet 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XueLiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016年10月24日 下午5:58:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于注解配置的Web容器上下文</span></span><br><span class="line">AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">context.register(WebAppConfig.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加编码过滤器并进行映射</span></span><br><span class="line">CharacterEncodingFilter characterEncodingFilter = <span class="keyword">new</span> CharacterEncodingFilter(<span class="string">"UTF-8"</span>, <span class="keyword">true</span>);</span><br><span class="line">FilterRegistration.Dynamic dynamicFilter = servletContext.addFilter(<span class="string">"characterEncodingFilter"</span>, characterEncodingFilter);</span><br><span class="line">dynamicFilter.addMappingForUrlPatterns(<span class="keyword">null</span>, <span class="keyword">true</span>, <span class="string">"/*"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加静态资源映射</span></span><br><span class="line">ServletRegistration defaultServletRegistration = servletContext.getServletRegistration(<span class="string">"default"</span>);</span><br><span class="line">defaultServletRegistration.addMapping(<span class="string">"*.html"</span>);</span><br><span class="line"></span><br><span class="line">Servlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet(context);</span><br><span class="line">ServletRegistration.Dynamic dynamicServlet = servletContext.addServlet(<span class="string">"dispatcher"</span>, dispatcherServlet);</span><br><span class="line">dynamicServlet.addMapping(<span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一步走完，Spring 基本上启动起来了。</p><h1 id="编写Java版的Spring配置"><a href="#编写Java版的Spring配置" class="headerlink" title="编写Java版的Spring配置"></a>编写Java版的Spring配置</h1><p>现在Spring已经可以正常启动了，但我们还要给 Spring 做一些配置，以便让它按我们需要的方式工作~<br>这里因为后端只负责提供数据，而不负责页面渲染，所以只需要配置返回 <code>json</code> 视图即可，个人比较偏爱采用内容协商，所以这里我使用了 <code>ContentNegotiationManagerFactoryBean</code>，但只配置了一个 JSON 格式的视图。<br>为了避免中文乱码，这里设置了 <code>StringHttpMessageConverter</code> 默认编码格式为 <code>UTF-8</code>，然后将其设置为 <code>RequestMappingHandlerAdapter</code> 的消息转换器。<br>最后还需要再配置一个欢迎页，类似于 <code>web.xml</code> 的 <code>welcome-file-list - welcome-file</code>，因为 Servlet 3.0 规范没有针对欢迎页的Java配置方案，所以目前只能在Java中这样配置，其效果类似于在XML版中配置 <code>&lt;mvc:redirect-view-controller path=&quot;/&quot; redirect-url=&quot;/index.html&quot;/&gt;</code> 。<br>最后注意这里的 <code>@Bean</code> 注解，默认的 <code>name</code> 是方法名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package org.xueliang.loginsecuritybyredis.commons;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line">import org.springframework.web.accept.ContentNegotiationManager;</span><br><span class="line">import org.springframework.web.accept.ContentNegotiationManagerFactoryBean;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line">import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line">import org.springframework.web.servlet.view.ContentNegotiatingViewResolver;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@ComponentScan(basePackages = &quot;org.xueliang.loginsecuritybyredis&quot;)</span><br><span class="line">@PropertySource(&#123;&quot;classpath:loginsecuritybyredis.properties&quot;&#125;)</span><br><span class="line">public class WebAppConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 内容协商</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public ContentNegotiationManager mvcContentNegotiationManager() &#123;</span><br><span class="line">    ContentNegotiationManagerFactoryBean contentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean();</span><br><span class="line">    contentNegotiationManagerFactoryBean.setFavorParameter(true);</span><br><span class="line">    contentNegotiationManagerFactoryBean.setIgnoreAcceptHeader(true);</span><br><span class="line">    contentNegotiationManagerFactoryBean.setDefaultContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">    Properties mediaTypesProperties = new Properties();</span><br><span class="line">    mediaTypesProperties.setProperty(&quot;json&quot;, MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">    contentNegotiationManagerFactoryBean.setMediaTypes(mediaTypesProperties);</span><br><span class="line">    contentNegotiationManagerFactoryBean.afterPropertiesSet();</span><br><span class="line">return contentNegotiationManagerFactoryBean.getObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public ContentNegotiatingViewResolver contentNegotiatingViewResolver(@Autowired ContentNegotiationManager mvcContentNegotiationManager) &#123;</span><br><span class="line">ContentNegotiatingViewResolver contentNegotiatingViewResolver = new ContentNegotiatingViewResolver();</span><br><span class="line">contentNegotiatingViewResolver.setOrder(1);</span><br><span class="line">contentNegotiatingViewResolver.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class="line">return contentNegotiatingViewResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 采用UTF-8编码，防止中文乱码</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public StringHttpMessageConverter stringHttpMessageConverter() &#123;</span><br><span class="line">return new StringHttpMessageConverter(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public RequestMappingHandlerAdapter requestMappingHandlerAdapter(@Autowired StringHttpMessageConverter stringHttpMessageConverter) &#123;</span><br><span class="line">RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();</span><br><span class="line">requestMappingHandlerAdapter.setMessageConverters(Collections.singletonList(stringHttpMessageConverter));</span><br><span class="line">return requestMappingHandlerAdapter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 设置欢迎页</span><br><span class="line"> * 相当于web.xml中的 welcome-file-list &gt; welcome-file</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">registry.addRedirectViewController(&quot;/&quot;, &quot;/index.html&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="编写登录认证Api"><a href="#编写登录认证Api" class="headerlink" title="编写登录认证Api"></a>编写登录认证Api</h1><p>这里在 <code>init</code> 方法中初始化几个用户，放入 <code>USER_DATA</code> 集合，用于后续模拟登录。然后初始化 <code>jedis</code> 连接信息。<code>init</code> 方法被 <code>@PostConstruct</code> 注解，因此 <code>Spring</code> 创建该类的对象后，将自动执行其 <code>init</code> 方法，进行初始化操作。<br>然后看 <code>login</code> 方法，首先根据用户名获取最近 <code>MAX_DISABLED_SECONDS</code> 秒内失败的次数，是否超过最大限制 <code>MAX_TRY_COUNT</code>。</p><p>若超过最大限制，不再对用户名和密码进行认证，直接返回认证失败提示信息，也即账户已被锁定的提示信息。</p><p>否则，进行用户认证。</p><p>若认证失败，将其添加到 Redis 缓存中，并设置过期默认为 <code>MAX_DISABLED_SECONDS</code>，表示从此刻起，<code>MAX_DISABLED_SECONDS</code> 秒内，该用户已登录失败 <code>count</code> 次。</p><p>若Redis缓存中已存在该用户认证失败的计数信息，则刷新 <code>count</code> 值，并将旧值的剩余存活时间设置到新值上，然后返回认证失败提示信息。</p><p>否则，返回认证成功提示信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xueliang.loginsecuritybyredis.web.controller.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.xueliang.loginsecuritybyredis.web.model.JSONResponse;</span><br><span class="line"><span class="keyword">import</span> org.xueliang.loginsecuritybyredis.web.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XueLiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016年11月1日 下午4:11:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/auth/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; USER_DATA = <span class="keyword">new</span> HashMap&lt;String, User&gt;();</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;auth.max_try_count&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> MAX_TRY_COUNT = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;auth.max_disabled_seconds&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> MAX_DISABLED_SECONDS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.host&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String host;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"><span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">String username = <span class="string">"username"</span> + <span class="number">0</span>;</span><br><span class="line">String password = <span class="string">"password"</span> + <span class="number">0</span>;</span><br><span class="line">USER_DATA.put(username + <span class="string">"_"</span> + password, <span class="keyword">new</span> User(username, <span class="string">"nickname"</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"login"</span>&#125;, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">JSONResponse jsonResponse = <span class="keyword">new</span> JSONResponse();</span><br><span class="line">String key = username;</span><br><span class="line">String countString = jedis.get(key);</span><br><span class="line"><span class="keyword">boolean</span> exists = countString != <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> count = exists ? Integer.parseInt(countString) : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (count &gt;= MAX_TRY_COUNT) &#123;</span><br><span class="line">checkoutMessage(key, count, jsonResponse);</span><br><span class="line"><span class="keyword">return</span> jsonResponse.toString();</span><br><span class="line">&#125;</span><br><span class="line">User user = USER_DATA.get(username + <span class="string">"_"</span> + password);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">int</span> secondsRemain = MAX_DISABLED_SECONDS;</span><br><span class="line"><span class="keyword">if</span> (exists &amp;&amp; count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">secondsRemain = (<span class="keyword">int</span>)(jedis.pttl(key) / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">jedis.set(key, count + <span class="string">""</span>);</span><br><span class="line">jedis.expire(key, secondsRemain);</span><br><span class="line">checkoutMessage(key, count, jsonResponse);</span><br><span class="line"><span class="keyword">return</span> jsonResponse.toString();</span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (exists) &#123;</span><br><span class="line">jedis.del(key);</span><br><span class="line">&#125;</span><br><span class="line">checkoutMessage(key, count, jsonResponse);</span><br><span class="line"><span class="keyword">return</span> jsonResponse.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count 尝试次数，也可以改为从redis里直接读</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jsonResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkoutMessage</span><span class="params">(String key, <span class="keyword">int</span> count, JSONResponse jsonResponse)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">jsonResponse.setCode(<span class="number">0</span>);</span><br><span class="line">jsonResponse.addMsg(<span class="string">"success"</span>, <span class="string">"恭喜，登录成功！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">jsonResponse.setCode(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt;= MAX_TRY_COUNT) &#123;</span><br><span class="line"><span class="keyword">long</span> pttlSeconds = jedis.pttl(key) / <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">long</span> hours = pttlSeconds / <span class="number">3600</span>;</span><br><span class="line"><span class="keyword">long</span> sencondsRemain = pttlSeconds - hours * <span class="number">3600</span>;</span><br><span class="line"><span class="keyword">long</span> minutes = sencondsRemain / <span class="number">60</span>;</span><br><span class="line"><span class="keyword">long</span> seconds = sencondsRemain - minutes * <span class="number">60</span>;</span><br><span class="line">jsonResponse.addError(<span class="string">"login_disabled"</span>, <span class="string">"登录超过"</span> + MAX_TRY_COUNT + <span class="string">"次，请"</span> + hours + <span class="string">"小时"</span> + minutes + <span class="string">"分"</span> + seconds + <span class="string">"秒后再试！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">jsonResponse.addError(<span class="string">"username_or_password_is_wrong"</span>, <span class="string">"密码错误，您还有 "</span> + (MAX_TRY_COUNT - count) + <span class="string">" 次机会！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="编写前端页面"><a href="#编写前端页面" class="headerlink" title="编写前端页面"></a>编写前端页面</h1><p>页面很简单，监听表单提交事件，用 ajax 提交表单数据，然后将认证结果显示到 <code>div</code> 中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  span.error &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  span.msg &#123;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;label&gt;用户名&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">  &lt;label&gt;密码&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  (function($) &#123;</span><br><span class="line">    var $ = (selector) =&gt; document.querySelector(selector);</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.onreadystatechange = function() &#123;</span><br><span class="line">      if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</span><br><span class="line">        var response = JSON.parse(this.responseText);</span><br><span class="line">        var html = &apos;&apos;;</span><br><span class="line">        var msgNode = &apos;&apos;;</span><br><span class="line">        if (response.code != 0) &#123;</span><br><span class="line">          msgNode = &apos;error&apos;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          msgNode = &apos;msg&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        for (var key in response[msgNode]) &#123;</span><br><span class="line">          html += &apos;&lt;span class=&quot;&apos; + msgNode + &apos;&quot;&gt;&apos; + response[msgNode][key] + &apos;&lt;/span&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        $(&apos;div&apos;).innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var ajax = function(formData) &#123;</span><br><span class="line">      xhr.open(&apos;POST&apos;, &apos;/api/auth/login.json&apos;, true);</span><br><span class="line">      xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded; charset=UTF-8&apos;); // 将请求头设置为表单方式提交</span><br><span class="line">      xhr.send(formData);</span><br><span class="line">    &#125;</span><br><span class="line">    $(&apos;form&apos;).addEventListener(&apos;submit&apos;, function(event) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      var formData = &apos;&apos;;</span><br><span class="line">      for (var elem of [&apos;username&apos;, &apos;password&apos;]) &#123;</span><br><span class="line">        var value = $(&apos;input[name=&quot;&apos; + elem + &apos;&quot;]&apos;).value;</span><br><span class="line">        formData += (elem + &apos;=&apos; + value + &apos;&amp;&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">      ajax(formData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>最后上下源码地址：<a href="https://github.com/liangzai-cool/loginsecuritybyredis" target="_blank" rel="noopener">https://github.com/liangzai-cool/loginsecuritybyredis</a></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>2016年11月29日 更新，代码优化，增加原子操作，<code>org.xueliang.loginsecuritybyredis.web.controller.api.AuthApi#login</code> 函数作如下优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    @RequestMapping(value = &#123;&quot;login&quot;&#125;, method = RequestMethod.POST)</span><br><span class="line">    public String login(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;password&quot;) String password) &#123;</span><br><span class="line">        JSONResponse jsonResponse = new JSONResponse();</span><br><span class="line">        String key = username;</span><br><span class="line">        String countString = jedis.get(key);</span><br><span class="line">        boolean exists = countString != null;</span><br><span class="line">        int count = exists ? Integer.parseInt(countString) : 0;</span><br><span class="line">        if (count &gt;= MAX_TRY_COUNT) &#123;</span><br><span class="line">            checkoutMessage(key, count, jsonResponse);</span><br><span class="line">            return jsonResponse.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        User user = USER_DATA.get(username + &quot;_&quot; + password);</span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            count++;</span><br><span class="line">//            int secondsRemain = MAX_DISABLED_SECONDS;</span><br><span class="line">//            if (exists &amp;&amp; count &lt; 5) &#123;</span><br><span class="line">//                secondsRemain = (int)(jedis.pttl(key) / 1000);</span><br><span class="line">//            &#125;</span><br><span class="line">//            jedis.set(key, count + &quot;&quot;);</span><br><span class="line">//            jedis.expire(key, secondsRemain);</span><br><span class="line">            if (exists) &#123;</span><br><span class="line">                jedis.incr(key);</span><br><span class="line">                if (count &gt;= MAX_TRY_COUNT) &#123;</span><br><span class="line">                    jedis.expire(key, MAX_DISABLED_SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                jedis.set(key, count + &quot;&quot;);</span><br><span class="line">                jedis.expire(key, MAX_DISABLED_SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            checkoutMessage(key, count, jsonResponse);</span><br><span class="line">            return jsonResponse.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        count = 0;</span><br><span class="line">        if (exists) &#123;</span><br><span class="line">            jedis.del(key);</span><br><span class="line">        &#125;</span><br><span class="line">        checkoutMessage(key, count, jsonResponse);</span><br><span class="line">        return jsonResponse.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ul><li><a href="20170302232815082">Spring MVC + Security 4 初体验（Java配置版）</a></li><li><a href="20170116145848852">Java程序通过代理访问网络</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> redis </tag>
            
            <tag> 恶意登录保护 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决CenOS 7下启动ActiveMQ时报错</title>
      <link href="/2016/10/11/%E8%A7%A3%E5%86%B3CenOS-7%E4%B8%8B%E5%90%AF%E5%8A%A8ActiveMQ%E6%97%B6%E6%8A%A5%E9%94%99/"/>
      <url>/2016/10/11/%E8%A7%A3%E5%86%B3CenOS-7%E4%B8%8B%E5%90%AF%E5%8A%A8ActiveMQ%E6%97%B6%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于 CentOS 7，ActiveMQ 5.9.1</p></blockquote><h1 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h1><p>在 CentOS 7 下安装好ActiveMQ后，执行 <code>/usr/local/apache-activemq-5.9.1/bin/activemq start</code> 启动 ActiveMQ，显示：</p><blockquote><p>INFO: Using default configuration<br>(you can configure options in one of these file: /etc/default/activemq /home/xueliang/.activemqrc)</p></blockquote><blockquote><p>INFO: Invoke the following command to create a configuration file<br>/usr/local/apache-activemq-5.9.1/bin/activemq setup [ /etc/default/activemq | /home/xueliang/.activemqrc ]</p></blockquote><blockquote><p>INFO: Using java ‘/usr/local/java/jdk1.8.0_101/bin/java’<br>INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details<br>INFO: pidfile created : ‘/usr/local/apache-activemq-5.9.1/data/activemq-server2.pid’ (pid ‘24484’)</p></blockquote><p>从提示信息看，似乎启动成功，但根据提示信息中的 <code>pid</code> 查找进程时，却发现并无此进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eLf | grep 24484</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>[xueliang@server2 ~]\$ ps -eLf | grep 24484<br>xueliang 24520 23462 24520  0    1 00:52 pts/2    00:00:00 grep –color=auto 24484<br>[xueliang@server2 ~]\$</p></blockquote><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>一个好的软件，总能在错误发生时告诉你如何解决。<br>执行 <code>cat /usr/local/apache-activemq-5.9.1/data/activemq.log</code> 看一下日志信息：</p><blockquote><p>2016-10-12 02:04:09,053 | INFO  | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:04:09 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 02:04:10,498 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] started | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 02:04:10,512 | INFO  | Using Persistence Adapter: KahaDBPersistenceAdapter[/usr/local/apache-activemq-5.9.1/data/kahadb] | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:10,683 | INFO  | KahaDB is version 5 | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:04:10,746 | INFO  | Recovering from the journal … | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:04:10,757 | INFO  | Recovery replayed 332 operations from the journal in 0.071 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:04:10,955 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-35685-1476209050769-0:1) is starting | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:10,969 | ERROR | Failed to start Apache ActiveMQ ([localhost, ID:server2-35685-1476209050769-0:1], java.io.IOException: Transport Connector could not be registered in JMX: Failed to bind to server socket: tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use) | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:10,970 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-35685-1476209050769-0:1) is shutting down | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:10,970 | INFO  | Connector openwire stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:10,970 | INFO  | Connector amqp stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:10,970 | INFO  | Connector stomp stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:10,970 | INFO  | Connector mqtt stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:10,970 | INFO  | Connector ws stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:10,973 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] stopped | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 02:04:10,973 | INFO  | Stopping async queue tasks | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:04:10,973 | INFO  | Stopping async topic tasks | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:04:10,974 | INFO  | Stopped KahaDB | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:04:11,193 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-35685-1476209050769-0:1) uptime 0.691 seconds | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:11,193 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-35685-1476209050769-0:1) is shutdown | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:11,193 | INFO  | Closing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:04:09 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 02:04:11,194 | WARN  | Exception thrown from LifecycleProcessor on context close | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>java.lang.IllegalStateException: LifecycleProcessor not initialized - call ‘refresh’ before invoking lifecycle methods via the context: org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:04:09 CST 2016]; root of context hierarchy<br>    at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:360)<br>    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1057)<br>    at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1010)<br>    at org.apache.activemq.hooks.SpringContextHook.run(SpringContextHook.java:30)<br>    at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:809)<br>    at org.apache.activemq.xbean.XBeanBrokerService.stop(XBeanBrokerService.java:122)<br>    at org.apache.activemq.broker.BrokerService.start(BrokerService.java:601)<br>    at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:73)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1638)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1579)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1509)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory\$1.getObject(AbstractBeanFactory.java:296)<br>    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)<br>    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)<br>    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)<br>    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)<br>    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)<br>    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory\$1.<init>(XBeanBrokerFactory.java:104)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)<br>    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)<br>    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)<br>    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)<br>    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)<br>    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150)<br>    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)<br>    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)<br>    at org.apache.activemq.console.Main.main(Main.java:115)<br>2016-10-12 02:04:30,534 | INFO  | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:04:30 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 02:04:31,297 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] started | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 02:04:31,311 | INFO  | Using Persistence Adapter: KahaDBPersistenceAdapter[/usr/local/apache-activemq-5.9.1/data/kahadb] | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:31,472 | INFO  | KahaDB is version 5 | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:04:31,530 | INFO  | Recovering from the journal … | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:04:31,543 | INFO  | Recovery replayed 334 operations from the journal in 0.068 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:04:31,680 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-52293-1476209071560-0:1) is starting | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:31,695 | ERROR | Failed to start Apache ActiveMQ ([localhost, ID:server2-52293-1476209071560-0:1], java.io.IOException: Transport Connector could not be registered in JMX: Failed to bind to server socket: tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use) | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:31,695 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-52293-1476209071560-0:1) is shutting down | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:31,696 | INFO  | Connector openwire stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:31,696 | INFO  | Connector amqp stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:31,696 | INFO  | Connector stomp stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:31,696 | INFO  | Connector mqtt stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:31,696 | INFO  | Connector ws stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:04:31,699 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] stopped | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 02:04:31,699 | INFO  | Stopping async queue tasks | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:04:31,699 | INFO  | Stopping async topic tasks | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:04:31,700 | INFO  | Stopped KahaDB | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:04:31,984 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-52293-1476209071560-0:1) uptime 0.682 seconds | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:31,984 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-52293-1476209071560-0:1) is shutdown | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:04:31,984 | INFO  | Closing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:04:30 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 02:04:31,985 | WARN  | Exception thrown from LifecycleProcessor on context close | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>java.lang.IllegalStateException: LifecycleProcessor not initialized - call ‘refresh’ before invoking lifecycle methods via the context: org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:04:30 CST 2016]; root of context hierarchy<br>    at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:360)<br>    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1057)<br>    at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1010)<br>    at org.apache.activemq.hooks.SpringContextHook.run(SpringContextHook.java:30)<br>    at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:809)<br>    at org.apache.activemq.xbean.XBeanBrokerService.stop(XBeanBrokerService.java:122)<br>    at org.apache.activemq.broker.BrokerService.start(BrokerService.java:601)<br>    at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:73)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1638)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1579)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1509)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory\$1.getObject(AbstractBeanFactory.java:296)<br>    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)<br>    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)<br>    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)<br>    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)<br>    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)<br>    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory\$1.<init>(XBeanBrokerFactory.java:104)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)<br>    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)<br>    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)<br>    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)<br>    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)<br>    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150)<br>    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)<br>    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)<br>    at org.apache.activemq.console.Main.main(Main.java:115)<br>2016-10-12 02:07:32,656 | INFO  | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:07:32 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 02:07:33,326 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] started | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 02:07:33,343 | INFO  | Using Persistence Adapter: KahaDBPersistenceAdapter[/usr/local/apache-activemq-5.9.1/data/kahadb] | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:07:33,528 | INFO  | KahaDB is version 5 | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:07:33,587 | INFO  | Recovering from the journal … | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:07:33,602 | INFO  | Recovery replayed 336 operations from the journal in 0.071 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 02:07:33,740 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-53098-1476209253622-0:1) is starting | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:07:33,749 | ERROR | Failed to start Apache ActiveMQ ([localhost, ID:server2-53098-1476209253622-0:1], java.io.IOException: Transport Connector could not be registered in JMX: Failed to bind to server socket: tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use) | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:07:33,750 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-53098-1476209253622-0:1) is shutting down | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:07:33,750 | INFO  | Connector openwire stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:07:33,750 | INFO  | Connector amqp stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:07:33,750 | INFO  | Connector stomp stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:07:33,750 | INFO  | Connector mqtt stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:07:33,750 | INFO  | Connector ws stopped | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 02:07:33,752 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] stopped | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 02:07:33,753 | INFO  | Stopping async queue tasks | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:07:33,753 | INFO  | Stopping async topic tasks | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:07:33,753 | INFO  | Stopped KahaDB | org.apache.activemq.store.kahadb.KahaDBStore | main<br>2016-10-12 02:07:34,039 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-53098-1476209253622-0:1) uptime 0.710 seconds | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:07:34,039 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-53098-1476209253622-0:1) is shutdown | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 02:07:34,040 | INFO  | Closing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:07:32 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 02:07:34,041 | WARN  | Exception thrown from LifecycleProcessor on context close | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>java.lang.IllegalStateException: LifecycleProcessor not initialized - call ‘refresh’ before invoking lifecycle methods via the context: org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 02:07:32 CST 2016]; root of context hierarchy<br>    at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:360)<br>    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1057)<br>    at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1010)<br>    at org.apache.activemq.hooks.SpringContextHook.run(SpringContextHook.java:30)<br>    at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:809)<br>    at org.apache.activemq.xbean.XBeanBrokerService.stop(XBeanBrokerService.java:122)<br>    at org.apache.activemq.broker.BrokerService.start(BrokerService.java:601)<br>    at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:73)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1638)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1579)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1509)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory\$1.getObject(AbstractBeanFactory.java:296)<br>    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)<br>    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)<br>    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)<br>    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)<br>    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)<br>    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory\$1.<init>(XBeanBrokerFactory.java:104)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)<br>    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)<br>    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)<br>    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)<br>    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)<br>    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)<br>    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150)<br>    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)<br>    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)<br>    at org.apache.activemq.console.Main.main(Main.java:115)</init></init></init></init></init></init></init></init></init></p></blockquote><p>刚开始把精力留在了最后一个 <code>WARN</code> 处，即：</p><blockquote><p>2016-10-12 01:08:54,001 | WARN  | Exception thrown from LifecycleProcessor on context close | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>java.lang.IllegalStateException: LifecycleProcessor not initialized - call ‘refresh’ before invoking lifecycle methods via the context: org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 01:08:52 CST 2016]; root of context hierarchy</p></blockquote><p>Google 了很久，问题并没有解决，其实问题在上面第一个 <code>ERROR</code> 处，即：</p><blockquote><p>2016-10-12 01:08:53,602 | ERROR | Failed to start Apache ActiveMQ ([localhost, ID:server2-43498-1476205733474-0:1], java.io.IOException: Transport Connector could not be registered in JMX: Failed to bind to server socket: tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use) | org.apache.activemq.broker.BrokerService | main</p></blockquote><p>从提示信息中的 <code>due to: java.net.BindException: Address already in use</code> 可以看到是端口 <code>61616</code> 被占用了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>既然问题找到了，也就知道怎么解决。<br>使用 <code>netstat -anp | grep 61616</code> 查看是哪个程序占用了 <code>61616</code> 端口：</p><blockquote><p>[xueliang@server2 ~]\$ netstat -anp | grep 61616<br>(Not all processes could be identified, non-owned process info<br> will not be shown, you would have to be root to see it all.)<br>tcp6       0      0 :::61616                :::*                    LISTEN      10738/java<br>[xueliang@server2 ~]\$</p></blockquote><p>可以看出 <code>PID</code> 是 <code>10738</code>，可以确定的是该进程可以直接执行以下命令终止掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 10738</span><br></pre></td></tr></table></figure></p><p>再次执行 <code>netstat -anp | grep 61616</code> 可以看到刚才占用端口程序已经终止运行了。<br>再次启动 ActiveMQ，并查看日志信息：</p><blockquote><p>[xueliang@server2 ~]\$ cat /usr/local/apache-activemq-5.9.1/data/activemq.log<br>2016-10-12 01:35:56,610 | INFO  | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory\$1@13c78c0b: startup date [Wed Oct 12 01:35:56 CST 2016]; root of context hierarchy | org.apache.activemq.xbean.XBeanBrokerFactory\$1 | main<br>2016-10-12 01:35:57,423 | INFO  | PListStore:[/usr/local/apache-activemq-5.9.1/data/localhost/tmp_storage] started | org.apache.activemq.store.kahadb.plist.PListStoreImpl | main<br>2016-10-12 01:35:57,436 | INFO  | Using Persistence Adapter: KahaDBPersistenceAdapter[/usr/local/apache-activemq-5.9.1/data/kahadb] | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 01:35:57,593 | INFO  | KahaDB is version 5 | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 01:35:57,716 | INFO  | Recovering from the journal … | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 01:35:57,717 | INFO  | Recovery replayed 1 operations from the journal in 0.121 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main<br>2016-10-12 01:35:57,844 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-47815-1476207357729-0:1) is starting | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 01:35:57,855 | INFO  | Listening for connections at: tcp://server2:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 | org.apache.activemq.transport.TransportServerThreadSupport | main<br>2016-10-12 01:35:57,855 | INFO  | Connector openwire started | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 01:35:57,857 | INFO  | Listening for connections at: amqp://server2:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 | org.apache.activemq.transport.TransportServerThreadSupport | main<br>2016-10-12 01:35:57,857 | INFO  | Connector amqp started | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 01:35:57,859 | INFO  | Listening for connections at: stomp://server2:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 | org.apache.activemq.transport.TransportServerThreadSupport | main<br>2016-10-12 01:35:57,862 | INFO  | Connector stomp started | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 01:35:57,864 | INFO  | Listening for connections at: mqtt://server2:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 | org.apache.activemq.transport.TransportServerThreadSupport | main<br>2016-10-12 01:35:57,864 | INFO  | Connector mqtt started | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 01:35:58,018 | INFO  | Listening for connections at ws://server2:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600 | org.apache.activemq.transport.ws.WSTransportServer | main<br>2016-10-12 01:35:58,019 | INFO  | Connector ws started | org.apache.activemq.broker.TransportConnector | main<br>2016-10-12 01:35:58,048 | INFO  | Apache ActiveMQ 5.9.1 (localhost, ID:server2-47815-1476207357729-0:1) started | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 01:35:58,048 | INFO  | For help or more information please see: <a href="http://activemq.apache.org" target="_blank" rel="noopener">http://activemq.apache.org</a> | org.apache.activemq.broker.BrokerService | main<br>2016-10-12 01:35:58,536 | INFO  | ActiveMQ WebConsole available at <a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a> | org.apache.activemq.web.WebConsoleStarter | main<br>2016-10-12 01:35:58,741 | INFO  | Initializing Spring FrameworkServlet ‘dispatcher’ | /admin | main<br>2016-10-12 01:36:01,077 | INFO  | jolokia-agent: No access restrictor found at classpath:/jolokia-access.xml, access to all MBeans is allowed | /api | main<br>[xueliang@server2 ~]\$</p></blockquote><p>可以看到已经没有了错误信息，ActiveMQ 正常启动。</p><h1 id="其他可能导致启动失败的原因"><a href="#其他可能导致启动失败的原因" class="headerlink" title="其他可能导致启动失败的原因"></a>其他可能导致启动失败的原因</h1><p>在查找问题原因的过程中，发现一些其他可能导致 ActiveMQ 启动失败的原因：</p><ol><li>主机名包含下划线，相关链接：<a href="http://stackoverflow.com/a/21255931/5122380" target="_blank" rel="noopener">http://stackoverflow.com/a/21255931/5122380</a></li><li>将 <code>conf/activemq.xml</code> 文件中 <code>transportConnectors/transportConnector</code> <code>uri</code> 属性中的 <code>0.0.0.0</code> 替换成你主机的域名，或者 <code>127.0.0.1</code> ，形如：<blockquote><p>&lt;transportConnectors&gt;</p><pre><code>    &amp;lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&amp;gt;    &amp;lt;transportConnector name=&quot;openwire&quot; uri=&quot;tcp://127.0.0.1:61616?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600&quot;/&amp;gt;&amp;lt;/transportConnectors&amp;gt;</code></pre></blockquote></li></ol><p>相关链接：<a href="http://stackoverflow.com/a/25039610/5122380" target="_blank" rel="noopener">http://stackoverflow.com/a/25039610/5122380</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> activemq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WinSCP 中普通用户以 root 身份登录 Linux</title>
      <link href="/2016/09/25/WinSCP-%E4%B8%AD%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%BB%A5-root-%E8%BA%AB%E4%BB%BD%E7%99%BB%E5%BD%95-Linux/"/>
      <url>/2016/09/25/WinSCP-%E4%B8%AD%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%BB%A5-root-%E8%BA%AB%E4%BB%BD%E7%99%BB%E5%BD%95-Linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>版本说明：Windows 10，CentOS 7，WinSCP 5.7.7 (Build 6257)</p></blockquote><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>使用 WinSCP 登录 CentOS 上传文件，使用的是普通用户，且已加入 <code>sudoers</code> ，向 <code>/usr/local</code> 目录上传文件时，提示没有权限。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>首先确保你的目标主机的 <code>sshd</code> 服务正在运行</li><li>用来在 WinSCP 登录的普通用户已加入 <code>sudoers</code></li><li><p>获取 <code>sftp-server</code> 的位置</p><ol><li><p>从 <code>/etc/ssh/sshd_config</code> 文件中获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/ssh/sshd_config | grep sftp</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>Subsystem       sftp    /usr/libexec/openssh/sftp-server</p></blockquote><ol start="2"><li><p>直接查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo updatedb</span><br><span class="line">locate sftp-server</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>/usr/libexec/openssh/sftp-server<br>/usr/share/man/man8/sftp-server.8.gz</p></blockquote></li></ol></li></ol></li><li><p>以管理员方式运行 WinSCP，打开对应帐户的<code>Advanced Site Settings</code> 对话框中，选中 <code>Environment</code> → <code>SFTP</code> 节点，在右边的 <code>Protocol options</code> - <code>SFTP server</code> 输入框中，填入 <code>sudo -s /usr/libexec/openssh/sftp-server</code> ，这里的 <code>/usr/libexec/openssh/sftp-server</code> 换成在你的系统中，由第 3 步得到的路径，之后保存。</p></li><li><p>在 CentOS 中执行 <code>sudo visudo</code> 以编辑 <code>/etc/sudoers</code> 文件</p><ol><li>找到需要在 WinSCP 登录的账户名配置信息，大概在第 98 行，将：<code>myloginname ALL=(ALL) ALL</code> 改为： <code>myloginname ALL=(ALL) NOPASSWD:  ALL</code> 。这一步的目的是切换为 <code>root</code> 角色时不需要输入密码，因为 WinSCP 只能执行不需要请求用户输入其他信息（比如：密码等）的命令。<br><strong>切记：记得使用完后，将这一行的内容恢复到修改前的样子！</strong></li><li>找到 <code>Defaults    requiretty</code> 这一行，在前面加一个 <code>#</code> 号注释掉这一行，这一步的目的是关闭控制终端。</li></ol></li></ol><p>到此，即可以 <code>root</code> 角色登录系统啦！</p><h1 id="解决方案优化"><a href="#解决方案优化" class="headerlink" title="解决方案优化"></a>解决方案优化</h1><p>也许你担心由于上述解决方案的第 5 步，在切换为 <code>root</code> 时不需要输入密码，会造成系统不安全。<br>确实是这样，如果你系统安全要求较高，我建议你新建一个帐户，专门用于 WinSCP 中以 <code>root</code> 角色登录。</p>]]></content>
      
      
      
        <tags>
            
            <tag> winscp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 中 AUTO_INCREMENT 的“坑”</title>
      <link href="/2016/09/24/MySQL-%E4%B8%AD-AUTO-INCREMENT-%E7%9A%84%E2%80%9C%E5%9D%91%E2%80%9D/"/>
      <url>/2016/09/24/MySQL-%E4%B8%AD-AUTO-INCREMENT-%E7%9A%84%E2%80%9C%E5%9D%91%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于 MySQL 5.6</p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在玩 MySQL 双主复制架构，表里的主键使用自增ID，为了避免两台主库生成的主键冲突，遂两台主库分别配置如下：<br><code>server 1</code> 的 <code>my.cnf</code> ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_increment_increment = 2</span><br><span class="line">auto_increment_offset = 1</span><br></pre></td></tr></table></figure></p><p><code>server 2</code> 的 <code>my.cnf</code> ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_increment_increment = 2</span><br><span class="line">auto_increment_offset = 2</span><br></pre></td></tr></table></figure></p><p>按照这个配置，本以为 <code>server 1</code> 和 <code>server 2</code> 生成序列分别是 <code>1</code> ，<code>3</code> ，<code>5</code> ··· 和 <code>2</code> ， <code>4</code>， <code>6</code> ··· 这样的序列，但事实上并不完全是这样，下面来做个试验。</p><h1 id="重现"><a href="#重现" class="headerlink" title="重现"></a>重现</h1><p>基于以上配置，在 <code>server 1</code> 上建表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>))</span><br><span class="line"><span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</span><br></pre></td></tr></table></figure></p><p>因为我配置了双主同步，所以此表将被同步到 <code>server 2</code> 上。</p><p>执行如下添加语句初始化数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'myname0'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'myname1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'myname2'</span>);</span><br></pre></td></tr></table></figure></p><p>数据将被同步到 <code>server 2</code> 上。</p><p>在 <code>server 1</code> 上查询此表，可以看到刚才插入的数据：<br>id | name<br>– | –<br>1  | myname0<br>3  | myname1<br>5  | myname2<br>结果如我们所料，<code>id</code> 列呈奇数自增。在 <code>server 2</code> 上查询的结果和上面一样。</p><p>接着，在 <code>server 2</code> 上向此表再添加几条数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'myname3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'myname4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`table_name`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'myname5'</span>);</span><br></pre></td></tr></table></figure></p><p>同样数据，将被同步到 <code>server 1</code> 上。</p><p>查询此表，得到的结果：<br>id | name<br>– | –<br>1  | myname0<br>3  | myname1<br>5  | myname2<br>6  | myname3<br>8  | myname4<br>10 | myname5</p><p>问题出来了，<code>server 2</code> 分配的序列并不像我们之前期望的那样，从 <code>2</code> 开始的连续偶数，而是跳过 <code>2</code> 和 <code>4</code>，直接从 <code>6</code> 开始。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>研究了很久，翻看 MySQL 官网文档，没有提到会是这样子，Goole 了两天，也都说，自增ID分别是 <code>1</code>、<code>2</code>、<code>3</code> 和 <code>2</code> 、 <code>4</code> 、 <code>6</code> ，并没有对此情况做明确说明。直到我看到 <a href="http://stackoverflow.com/a/35786634" target="_blank" rel="noopener">这位大神的回答</a>。<br>具体的我就不重复了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结一下：</p><ol><li><code>AUTO_INCREMENT</code> 所在的列，必须为整数型数据列</li><li><code>AUTO_INCREMENT</code> 所在的列，不能为空</li><li><code>AUTO_INCREMENT</code> 所在的列，必须有唯一索引</li><li><code>AUTO_INCREMENT</code> 所在的列，值必须大于0</li><li><code>AUTO_INCREMENT</code> 所在的列，最大值，受其数据类型及是否为 无符号(<code>Unsigned</code>) 限制，若使用的为 <code>TINYINT(4)</code> 且 为无符号的，则最大值为 255，若继续插入数据，则该列的值保持最大值不变，</li><li><code>AUTO_INCREMENT</code> 所在的列，若向其中插入的值，大于所在表当前的 <code>AUTO_INCREMENT</code> 值，则会更新表 <code>AUTO_INCREMENT</code> 值至 <code>current_max_value</code> - (<code>current_max_value</code> - <code>auto_increment_offset</code>) % <code>auto_increment_increment</code> + <code>auto_increment_increment</code> ，即该列的下一个序列值</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装 Windows 10 + Centos 7 双系统共存</title>
      <link href="/2016/09/19/%E5%AE%89%E8%A3%85-Windows-10-Centos-7-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%85%B1%E5%AD%98/"/>
      <url>/2016/09/19/%E5%AE%89%E8%A3%85-Windows-10-Centos-7-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%85%B1%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步-准备工作"><a href="#第一步-准备工作" class="headerlink" title="第一步 准备工作"></a>第一步 准备工作</h1><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>给CentOS 系统单独创建一个分区，具体看空闲硬盘的大小决定。</p><ul><li>右键桌面上 [我的电脑] 或者 [此电脑] 图标，选择 [管理] → [计算机管理] → [存储] - [磁盘管理]</li><li>选择一个空闲空间较大的分区，右键选择 [压缩卷(H)…]</li><li>在弹出的对话框中输入需要分配给 CentOS 系统的空间大小，以 MB 为单位</li><li>输入完毕后，点击对话框右下角的 [压缩] 按钮执行压缩即可</li></ul><blockquote><p>注意：压缩出的新分区，不要执行 [新建简单卷]，否则稍后 CentOS 不识别，到此步即可</p></blockquote><h2 id="下载-CentOS-7-系统文件"><a href="#下载-CentOS-7-系统文件" class="headerlink" title="下载 CentOS 7 系统文件"></a>下载 CentOS 7 系统文件</h2><p>到 <a href="https://www.centos.org/download" target="_blank" rel="noopener">CentOS官网</a> 下载 ISO 文件，DVD 版即可。</p><h2 id="制作优盘启动盘"><a href="#制作优盘启动盘" class="headerlink" title="制作优盘启动盘"></a>制作优盘启动盘</h2><p>同样很简单：</p><ul><li>准备一个优盘，备份里面所有你认为不能删的文件，稍后将会格式化此优盘</li><li>到 <a href="http://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">UltraISO官网</a> 下载软件</li><li>安装，我基本是用完就卸载，所以，除了安装路径改下，其他全部默认</li><li>运行 UltraISO，选择试用，选择主界面菜单栏里的[文件] → [打开]，选择你刚下载好的 CentOS 7 镜像</li><li>选择菜单栏里的 [启动] → [写入硬盘映像]</li><li>在弹出框中确认选中的优盘无误，其他选项保持默认，无需修改，直接点击下方的 [写入] 按钮，执行制作优盘启动盘，稍后确认制作成功的提示信息即可</li></ul><p>准备工作到此结束</p><h1 id="第二步-从优盘启动安装"><a href="#第二步-从优盘启动安装" class="headerlink" title="第二步 从优盘启动安装"></a>第二步 从优盘启动安装</h1><h2 id="调整-BIOS-引导顺序"><a href="#调整-BIOS-引导顺序" class="headerlink" title="调整 BIOS 引导顺序"></a>调整 BIOS 引导顺序</h2><ul><li>插入刚刚制作的优盘启动盘，重启电脑，开机阶段按 <code>F2</code> 、 <code>F8</code> 或 <code>F12</code> 进入 <code>BIOS</code></li><li>切换到 <code>Boot</code> 界面，找到优盘启动项，使用 <code>F5</code> 或 <code>F6</code> 调整其顺序至第一位，即从优盘启动</li><li>按 <code>F10</code> 保存并退出 <code>BIOS</code> ，即可从优盘引导启动。</li><li><p>稍后进入一个标题为 <code>CentOS 7</code> 的黑白界面：<br><img src="http://image.xueliang.org/Fvhx_yTCms9gODhh1qBr8K6XE4M_" alt="图片加载中..."></p><p>同时提示 <code>Press Tab for full configuration options on menu items.</code> 和 <code>Automatic boot in 60 seconds...</code>。</p></li><li><p>默认选中的是 第一项即 <code>Install CentOS 7</code>，按 <code>Tab</code> 键，下方的提示信息将显示为 <code>vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207x20x86_64 rd.live.check quiet</code><br><img src="http://image.xueliang.org/Fj2I3qpa7B2s-Fc8SmuUPzj_B54X" alt="图片加载中..."></p></li><li><p>移动光标，删除 <code>LABEL=CentOS\x207x20x86_64 rd.live.check</code> 这部分，并用 <code>linux dd</code> 替换，最终的内容为 <code>vmlinuz initrd=initrd.img linux dd quiet</code><br><img src="http://image.xueliang.org/FkI_Hy3_BErBapIW3v5Rl1pwqAoQ" alt="图片加载中..."></p></li><li><p>确认无误后回车，可以看到如下界面<br><img src="http://image.xueliang.org/FjaKVh1f66e4pZwC7kQ_cGAyiPYX" alt="图片加载中..."><br>这里可以看到，界面下方有4列，分别是 <code>DEVICE</code> 、 <code>TYPE</code> 、 <code>LABEL</code> 和 <code>UUID</code>，<code>LABEL</code> 这一列就是驱动器名称，据此找到你的优盘，并记下对应 <code>DEVICE</code> 列的值，一般是 <code>sdb4</code> 。</p></li><li><p>强制关闭计算机后再开机，回到刚才倒计时那个界面，依旧按 <code>Tab</code> 键，修改启动参数，这次修改为 <code>vmlinuz initrd=initrd.img inst.stage2=hd:/dev/sdb4 rd.live.check quiet</code>，这里的 <code>sdb4</code> 替换成你刚才记下的自己优盘对应的 <code>DEVICE</code> 列的值。<br><img src="http://image.xueliang.org/FlOZkXk_pgvUJZGLSpJoyFSMNa8e" alt="图片加载中..."></p></li><li><p>确认无误后回车，稍等片刻就可以看到暖暖的界面啦！<br><img src="http://image.xueliang.org/FuOHyUxyrOBufk0As_G0v_DKgNvN" alt="图片加载中..."></p></li></ul><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul><li>上面的系统语言根据需要自行选择（为了防止系统自动生成家目录下有 <code>桌面</code> 、 <code>下载</code> 这类中文名路径，切换路径的时候还要修改输入法，比较麻烦，所以这里我保持默认，即 <code>English</code>），这里主要说下第二步的 <code>INSTALLATION SUMMARY</code>。<br><img src="http://image.xueliang.org/FjtnDD7mvzdlVPbd2OrZXkUEve1N" alt="图片加载中..."></li></ul><h3 id="选择需要安装的基础软件"><a href="#选择需要安装的基础软件" class="headerlink" title="选择需要安装的基础软件"></a>选择需要安装的基础软件</h3><ul><li>点击 <code>SOFTWARE</code> 下的 <code>SOFTWARE SELECTION</code> 选择一些需要安装的基础软件，这里只选择安装一个桌面软件 <code>GNOME Desktop</code> 就够了，选择完成之后点击左上角的 <code>Done</code> 回到 <code>INSTALLATION SUMMARY</code> 主界面。<br><img src="http://image.xueliang.org/FmUOhYxVjGrkv-pj120u4UTuVTP_" alt="图片加载中..."></li></ul><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><ul><li><p>点击 <code>SYSTEM</code> 下的 <code>INSTALLATION DESTINATION</code> 选择安装位置，这里可以看到我们之前压缩出来的那个新分区，以及优盘分区。<br>选中那个新分区，并选中 <code>Other Storage Options</code> → <code>Partitioning</code> 下的 <code>I will configure partitioning</code> 选项，<strong>切记，一定要选中此项，否则整个硬盘的数据都将被删除！！！</strong><br>确认无误后，点击左上角的 <code>Done</code> 。<br><img src="http://image.xueliang.org/FuGJxfnAT1ergaMukBYHgp16D7MO" alt="图片加载中..."></p></li><li><p>这一步对硬盘进行分区，可以点击 <code>Click here to create them automatically</code> 即可让安装程序自动创建分区，非常方便，也可以点击左下角写有 <code>AVAILABLE SPACE</code> 字样的红色区域上方的 <code>+</code> 按钮手动创建分区。<br><img src="http://image.xueliang.org/FgpZdR4Hjoz9dInVLOtVq4LSS2iV" alt="图片加载中..."><br>选择手动分区的话，要注意单位，这里我选择自动分区。分区完成并且确认无误后，点击左上角的 <code>Done</code> 结束对硬盘的分区操作。下面我讲下手动分区操作步骤。</p><p>点击 <code>+</code> 按钮，在弹出的对话框中选择新分区挂载的路径，并输入新分区的大小，这里我们设置新分区的大小为 6 GB，并挂载在 根目录 <code>/</code> 下。点击 <code>Add mount point</code> 保存分区信息。<br><img src="http://image.xueliang.org/FiQgkNTChrbqhsaMp37ZR8rXrv9x" alt="图片加载中..."></p><p>此时，可以看到新分区已经出现在左侧栏里了，但分区的单位并不对，默认刚才输入的单位是 <code>MiB</code> 并显示为 <code>KiB</code> ，这里我们修改为 <code>MiB</code> 即可，点击右下角 <code>Update Settings</code> 保存修改后的信息。<br><img src="http://image.xueliang.org/FpcsJGlUTM30zbfJSrRoV9fHR-0w" alt="图片加载中..."><br>以同样的方式添加 <code>swap</code> 等分区，添加完成后，点击左上角的 <code>Done</code> 按钮，完成对磁盘的分区。如果没有给 <code>/boot</code> 进行分区，会在第一次点击 <code>Done</code> 后收到警告信息。可以点击 <code>Click for details</code> 查看警告原因，然后点击 <code>Close</code> 后再次点击一次 <code>Done</code> ；也可以忽略警告信息，再点一次 <code>Done</code> 。<br><img src="http://image.xueliang.org/FnYq9rmFDS5EDr7ecwOW56RUkgYj" alt="图片加载中..."><br>忽略警告信息，点击两次 <code>Done</code> 之后，可以在弹出的对话框中看到，即将对磁盘进行修改的摘要信息，直接点击 <code>Accept Changes</code> ，开始对硬盘执行分区操作。<br><img src="http://image.xueliang.org/FrSrIYtD30rKs7lzikOiGcwSaRXT" alt="图片加载中..."></p></li><li><p>回到 <code>INSTALLATION SUMMARY</code> 界面，待分区执行完成后， <code>SYSTEM</code> 下的 <code>INSTALLATION DESTINATION</code> 下的黄色感叹号就没有。点击右下角的 <code>Begin Installation</code> 按钮开始安装 <code>CentOS</code> 系统。<br><img src="http://image.xueliang.org/FhzfDo0BumSnSInSTNUe7cZg67BU" alt="图片加载中..."></p></li></ul><h3 id="初始化账户"><a href="#初始化账户" class="headerlink" title="初始化账户"></a>初始化账户</h3><ul><li><p>安装进度界面可以看到 <code>USER SETTINGS</code> 下，<code>ROOT PASSWORD</code> 提示需要给 <code>root</code> 账户设置密码（<code>root</code> 账户默认是没有密码的），<code>USER CREATION</code> 提示创建一个普通用户。下面我们按照提示完成对账户的初始化。<br><img src="http://image.xueliang.org/FkNNAEgrzPYngcE2cmjEGpvWFp-Z" alt="图片加载中..."></p></li><li><p>点击 <code>USER SETTINGS</code> 下的 <code>ROOT PASSWORD</code> ，给 <code>root</code> 账户设置密码。如果设置的密码强度不够，需要点两次 <code>Done</code> 按钮忽略警告信息，完成对 <code>root</code> 账户的初始化。<br><img src="http://image.xueliang.org/FhWdSUS0OdUA8fQxNQbA16-M_ajX" alt="图片加载中..."></p></li><li><p>完成对 <code>root</code> 账户初始化后，可以看到 <code>USER SETTINGS</code> 下 <code>USER CREATION</code> 的黄色感叹号已经消失了，说明初始化 <code>root</code> 账户的密码后，创建普通账户已经变成一个可选项。<br><img src="http://image.xueliang.org/Fkc3wvolSxIOG3XoBqEe-1tCzKFS" alt="图片加载中..."></p><p>  但推荐仍创建一个普通账户，以便平时使用，而非平时直接使用 <code>root</code> 账户，这样可以减少使用过程中的误操作，以及 <code>root</code> 账户密码泄露的风险。点击 <code>USER CREATION</code> ，创建一个新的账户，同样 <code>ROOT PASSWORD</code> 一样，如果密码强度不够，请点击两次 <code>Done</code> 按钮。<br><img src="http://image.xueliang.org/Fky6g2Wg-LuXkq01L0ivILSxHiEK" alt="图片加载中..."></p></li></ul><h2 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h2><ul><li><p>约15 ~ 30 分钟后，CentOS 7 的安装就大功告成啦。<strong>为了避免重启后再次从优盘启动，可以先拔掉优盘，再点击 <code>Reboot</code> 按钮重启计算机；也可以在重启时进入 <code>BIOS</code> 调整引导顺序，恢复硬盘作为第一引导盘。</strong></p><p><img src="http://image.xueliang.org/FluJbwfh7XN7TQROZeCL5_mAF32O" alt="图片加载中..."></p></li><li><p>开机后会看到一个黑白屏的启动菜单，并且有一个默认选项，屏幕下方有一个 5 秒的倒计时，若 5 秒内没有任何操作，将使用默认选中的内核启动系统，也可以使用上下键进行切换并按回车键，即可使用选中的内核启动系统。这里默认即可。</p></li></ul><h1 id="第三步-找回-Windows-10-启动项"><a href="#第三步-找回-Windows-10-启动项" class="headerlink" title="第三步 找回 Windows 10 启动项"></a>第三步 找回 Windows 10 启动项</h1><p>可能大家都注意到了，上面重启之后，已经无法进入之前的 Windows 10 系统。是的，CentOS 7 不能在安装过程中设置之后的启动项，不像 Ubuntu 那样，在安装 Ubuntu 的过程中，就可以选择启动项，因此这时候就无法进入 Windows 10 了。<br>不过，不用担心，因为 Windows 10 系统的引导信息以及数据都是还在的，我们只需要在 CentOS 7 中找回 Windows 10 的引导信息并添加到启动菜单中就可以了。</p><ul><li>启动 CentOS 7 并使用事先设定的账户，登录系统。这里我使用的是非 <code>root</code> 账户登录的。</li></ul><h2 id="安装-ntfs-3g"><a href="#安装-ntfs-3g" class="headerlink" title="安装 ntfs-3g"></a>安装 ntfs-3g</h2><ul><li>右键桌面，打开一个终端。执行以下命令安装 <code>ntfs-3g</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y ntfs-3g</span><br></pre></td></tr></table></figure></li></ul><p>之所以需要安装 <code>ntfs-3g</code> ，是因为 Windows 家族专用的文件系统，CentOS 7 默认不能识别，而要想在 CentOS 7 系统中找回 Windows 10 的引导信息，势必要让 CentOS 7 系统识别 Windows 10 的文件系统，故安装此库。</p><h2 id="更新-Grub2-启动菜单，找回-Windows-10"><a href="#更新-Grub2-启动菜单，找回-Windows-10" class="headerlink" title="更新 Grub2 启动菜单，找回 Windows 10"></a>更新 Grub2 启动菜单，找回 Windows 10</h2><ul><li>执行以下命令即可找回 Windows 10 引导信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></li></ul><p>这一条命令，是让 <code>grub2</code> 自动扫描磁盘中已经安装的所有系统的引导信息，并将其加入到启动菜单中。重启一下计算机，在上面提过的启动菜单界面，是不是可以看到一个有 <code>Windows</code> 字眼的启动项啦？这就是你的 Windows 10！切换到此项，回车，我 Windows 10 又回来啦！</p><h1 id="第四步-修复启动菜单界面-Windows-版本显示错误的问题"><a href="#第四步-修复启动菜单界面-Windows-版本显示错误的问题" class="headerlink" title="第四步 修复启动菜单界面 Windows 版本显示错误的问题"></a>第四步 修复启动菜单界面 Windows 版本显示错误的问题</h1><p>虽然 Windows 10 已经找回，然而，不尽如人意的是，引导 Windows 10 的菜单项上的 Windows 系统的版本并非“Windows 10”，而是“Windows 7”或 “Windows 8.1”等。<br>初步推测，此启动项上显示的 Windows 版本号，取决于你从何版本的 Windows 升级到 Windows 10的（若你是从 Windows 7 升级到 Windows 10 的，那此启动项的文字就会显示“Windows 7”字眼，对于从 Windows 8.1 升级也是一样的道理。未考虑直接安装 Windows 10 的情况）。<br>需要说明的是，这里只是一个文字显示错误，对正常使用没有丝毫影响。但你有强迫症的话，请继续往下看。</p><h2 id="修复显示错误"><a href="#修复显示错误" class="headerlink" title="修复显示错误"></a>修复显示错误</h2><p>我已经打好了一个 patch，放到了<a href="https://gist.github.com/liangzai-cool/59f0c29a528305a9aa1c3971aeef604b" target="_blank" rel="noopener">这里</a>了，登录已安装好的 CentOS 7 系统，打开一个终端，并这行以下命令即可：</p><ul><li><p>下载patch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://gist.githubusercontent.com/liangzai-cool/59f0c29a528305a9aa1c3971aeef604b/raw/316a739240b388ff46ee95d38d2c7a97dcd53cbf/20microsoft-win10.patch</span><br></pre></td></tr></table></figure></li><li><p>安装patch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((sudo cp 20microsoft-win10.patch / &amp;&amp; cd / &amp;&amp; sudo patch -p0  ) &lt; 20microsoft-win10.patch)</span><br></pre></td></tr></table></figure></li></ul><h2 id="错误原因浅析"><a href="#错误原因浅析" class="headerlink" title="错误原因浅析"></a>错误原因浅析</h2><ul><li>启动菜单是执行 <code>Grub2</code> 的命令后，由 <code>Grub2</code> 生成的</li><li><code>Grub2</code> 本身并不能识别磁盘中已安装的操作系统，它是依赖 <code>os-prober</code> 这个库来识别的</li><li><code>os-prober</code> 本是为 <code>debian</code> 系统编写的，其在 <code>debian</code> 系统下不能识别 <code>Windows 10</code> 的问题已经修复</li><li>CentOS 下的 <code>os-prober</code> 目前最新版本依旧是 <code>1.58</code> ，该版本依旧存在此问题，貌似 CentOS 下的 <code>os-prober</code> 无人维护。问题代码位置是 <code>/usr/libexec/os-probes/mounted/20microsoft</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> win10-centos-共存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下修改系统时区</title>
      <link href="/2016/08/25/Linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%8C%BA/"/>
      <url>/2016/08/25/Linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-etc-localtime-文件修改时区"><a href="#使用-etc-localtime-文件修改时区" class="headerlink" title="使用 /etc/localtime 文件修改时区"></a>使用 /etc/localtime 文件修改时区</h1><p>先查看一下当前的时区，下面这个例子中使用 <code>UTC</code> 即世界统一标准时区。假设你可能需要改为美国西部标准时间，即太平洋时间。</p><blockquote><p># date<br>Thu Aug 17 22:59:24 UTC 2016</p></blockquote><p>在某些发行版的 Linux 系统（比如 <code>CentOS</code>）中，系统时区是由 <code>/etc/localtime</code> 文件控制的，所以可以通过修改 <code>/etc/localtime</code> 文件来修改系统时区。</p><p>删除 <code>/etc/localtime</code> 文件，</p><blockquote><p># cd /etc/<br># rm localtime</p></blockquote><p>所有的美国时区文件都可以在 <code>/usr/share/zoneinfo/US</code> 目录下找到：</p><blockquote><p># ls /usr/share/zoneinfo/US/<br>Alaska           Arizona        Eastern            Hawaii               Michigan        Pacific<br>Aleutian        Central         East-Indiana    Indiana-Starke  Mountain        Samoa</p></blockquote><p>其他国家的时区文件，可以在 <code></code>/usr/share/zoneinfo/` 找到。</p><p>创建一个软连接 <code>/etc/localtime</code> ，指向上述 <code>US</code> 目录中的 <code>Pacific</code> 文件：</p><blockquote><p># cd /etc<br># ln -s /usr/share/zoneinfo/US/Pacific localtime</p></blockquote><p>到此，已经将系统的时区改为美国西部所在的时区：</p><blockquote><p># date<br>Thu Aug 17 23:10:14 PDT 2016</p></blockquote><h1 id="使用-etc-timezone-文件修改时区"><a href="#使用-etc-timezone-文件修改时区" class="headerlink" title="使用 /etc/timezone 文件修改时区"></a>使用 /etc/timezone 文件修改时区</h1><p>在某些发行版的 Linux 系统（比如 <code>Ubuntu</code>）中，系统时区是由 <code>/etc/timezone</code> 文件控制的，所以可以通过修改 <code>/etc/timezone</code> 文件来修改系统时区。</p><p>举个例子，你现在的时区可能在美国东部时间（比如：纽约）：</p><blockquote><p># cat /etc/timezone<br>America/New_York</p></blockquote><p>需要设置到美国太平洋时间（比如：洛杉矶），修改 <code>/etc/timezone</code> 时间：</p><blockquote><p># vim /etc/timezone<br>America/Los_Angeles</p></blockquote><p>当然，也可以通过在命令行上修改 <code>TZ</code> 的值来设置时区：</p><blockquote><p># export TZ=America/Los_Angeles</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> timezone </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git如何检出指定目录或文件</title>
      <link href="/2016/08/19/Git%E5%A6%82%E4%BD%95%E6%A3%80%E5%87%BA%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E6%88%96%E6%96%87%E4%BB%B6/"/>
      <url>/2016/08/19/Git%E5%A6%82%E4%BD%95%E6%A3%80%E5%87%BA%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E6%88%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统版本：Window 10，Git 版本：2.7.1</p></blockquote><p>对于大型 Git 仓库，每次执行 Git 命令，都需要经过漫长的等待，特别是要经常执行的 <code>git status</code> 命令。下面是一个例子…</p><p><img src="http://image.xueliang.org/FriKsPuoZMDMfknq6skki_-2QgkS" alt="图片加载中..."></p><p>从 1.7.0 开始，Git 引入 <code>sparse checkout（稀疏检出）</code> 机制，稀疏检出机制允许只检出指定目录或者文件，这在大型 Git 仓库中，将大幅度缩短 Git 执行命令的时间。</p><p>要想只检出指定的目录或文件，需要在 <code>.git/info/sparse-checkout</code> 文件中指定目录或文件的路径，下面将以一个具体例子介绍 如何使用 Git 的 <code>sparse checkout</code> 。</p><h1 id="准备远程仓库"><a href="#准备远程仓库" class="headerlink" title="准备远程仓库"></a>准备远程仓库</h1><p>初始化一个仓库，目录结构如下图所示：</p><p><img src="http://image.xueliang.org/FgM1B496NLsod5HmdL2QKmhmSCRY" alt="图片加载中..."></p><p>根目录下有 2 个子目录，以及一个     <code>LICENSE</code> 文件和 <code>README.md</code> 文件，每个子目录中各有 3 个。<br>将其推送到Github上新建的一个仓库，地址是 <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:liangzai-cool/git-sparse-checkout-study.git` 。</p><h1 id="为Git配置稀疏检出"><a href="#为Git配置稀疏检出" class="headerlink" title="为Git配置稀疏检出"></a>为Git配置稀疏检出</h1><p>换一个目录，再初始化一个 Git 仓库，以便用稀疏检出的方式，检出刚才在 Github 上新建的 <code>git-sparse-checkout-study</code> 仓库：</p><p><img src="http://image.xueliang.org/FrTXWwD1_W5OZ_zTq4LafjiKJaRB" alt="图片加载中..."></p><p>使用 <code>git config core.sparseCheckout true</code> 命令开启 Git 稀疏检出模式。然后编辑该仓库目录下的 <code>.git/info/sparse-checkout</code> 文件，指定检出规则。这里只检出 <code>git-sparse-checkout-study</code> 仓库中的 <code>dir1</code> 目录下的所有文件和 根目录下的 <code>README.md</code> 文件：</p><p><img src="http://image.xueliang.org/FqHfvJOlYfBo9yblbkjvABAS_hWq" alt="图片加载中..."></p><h1 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h1><p>添加远程仓库地址，并检出：</p><p><img src="http://image.xueliang.org/FhPAM924g8GBJxpddtNxKqRbLe4J" alt="图片加载中..."></p><p>可以看到，Git 只检出了根目录下的 <code>README.md</code> 文件和 <code>dir1</code> 目录。</p><p>如果此时需要再检出，根目录下的 <code>dir2</code> 目录，则需要将其加入到 <code>.git/info/sparse-checkout</code> 文件中。参照下图中的方案：</p><p><img src="http://image.xueliang.org/FuDPr3IB4fFcmi3XRSlVm_gYrcUP" alt="图片加载中..."></p><h1 id="关闭稀疏检出"><a href="#关闭稀疏检出" class="headerlink" title="关闭稀疏检出"></a>关闭稀疏检出</h1><p>和上面检出 <code>dir2</code> 时类似：</p><p><img src="http://image.xueliang.org/FtmRQFcXFI5OSlQQXkB6iQYR8pyt" alt="图片加载中..."></p><p>可以看到所有文件都已显示出来了。<br>注意这里的 <code>echo</code> 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/*&quot; &gt; .git/info/sparse-checkout</span><br></pre></td></tr></table></figure></p><p>最后不要忘了配置 Git 的 <code>core.sparseCheckout</code> 为 <code>false</code> 以及移除 <code>.git/info/sparse-checkout</code> 文件。</p><p><code>.git/info/sparse-checkout</code> 中使用和 <code>.gitignore</code> 相同的匹配模式，例如 非匹配 <code>!/dir2/*</code> 以及 <code>/*.java</code> 等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git-sparse-checkout </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL主从架构配置详解</title>
      <link href="/2016/08/10/MySQL%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2016/08/10/MySQL%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库基于 MySQL Server 5.6</p></blockquote><p>无论是哪一种数据库，数据的安全都是至关重要的，因此熟练掌握数据库的安全备份功能，是作为开发人员，特别是后端开发人员的一项必备技能。MySQL 数据库内建的复制功能，可以帮助我们对数据进行异地备份，读写分离，在较大程度上避免数据丢失、数据库服务器压力过大甚至宕机带来的损失。</p><p>使用MySQL 主从架构一年多了，想起当年学习这些东西的时候，苦于完整的中文资料比较少，当时英文又不太好，遇到不少问题。刚好最近也有一段时间没更新博客了，心血来潮，决定翻译一下 MySQL 官网的英文文档，官网文档讲解的非常详细，可以帮助更多新手理解并快速入门。</p><p>第一次翻译这么大篇幅的英文技术文档，尽量采取逐句翻译，这样可以尽可能保持文档原意，但仍有很多需要修改的地方，恳请各位指正。</p><p>废话说多了，下面开始~~~</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>MySQL的复制功能，使得数据可以从一台MySQL 数据库服务器（我们称之为主库，即 <code>master</code>），复制到另外一台或者多台MySQL 数据库服务器（我们称之为从库，即 <code>slave</code>）。在默认情况下，复制的过程是异步的，因此，从数据库服务器不需要一直连接到主数据库服务器接收更新。 这也意味着，更新可以在长距离连接，甚至在诸如拨号服务临时或者间歇性的情况下继续。MySQL的复制功能，可以复制所有数据库，或者需要复制的几个数据库，甚至数据库中需要复制的数据库表，这都依赖于你是如何配置的。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h2><p>需要复制的主库必须开启二进制日志功能，并且创建一个唯一的服务器编号（<code>server-id</code>），之后，必须重启数据库。</p><p>由于二进制日志文件是主从复制的基础，所以，主库 <strong>必须</strong> 开启二进制日志功能。如果二进制日志功能没用使用 <code>log-bin</code> 选项开启，主从复制就无法进行。</p><p>可以将所有的从库作为一个组，组里的每一个从库都需要创建一个唯一的服务器编号（<code>server-id</code>），以便用这个编号在组里识别指定的从库，数据库服务器编号（<code>server-id</code>）必须是 1 至 2<sup>32</sup> − 1 之间的整数。具体使用哪些整数，完全由你自己决定，没有其他特殊规定。</p><p>要给数据库配置服务器编号（<code>server-id</code>）选项，需要停止MySQL 数据库，然后编辑 <code>my.cnf</code> 或者 <code>my.ini</code> 文件。在配置文件的 <code>[mysqld]</code> 这一节下，添加 <code>log-bin</code> 和 <code>server-id</code> 两个选项。如果它们已经存在，但是被注释掉了，就解注释，然后根据自己的需要进行修改。例如使用前缀为<code>mysql-bin</code>日志文件名，启用二进制日志功能，配置服务器编号为<code>1</code>，可以参考下面的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure></p><p>保存好上面的修改之后，重启数据库。</p><blockquote><p>注意：</p><ul><li><p>如果没有配置 <code>server-id</code> 选项（或者将其设置为默认值0），主库将拒绝来自任何从库的连接请求。</p></li><li><p>为了能在 InnoDB 存储引擎中使用事务时，达到最大可能的耐用性和一致性，需要在 <code>my.cnf</code> 文件中配置 <code>innodb_flush_log_at_trx_commit=1</code> 和 <code>sync_binlog=1</code> 两个选项。</p></li><li><p>不要在主库上配置 <code>skip-networking</code> 选项。如果主库的网络都被禁用了，从库就不能连接到主库，最终导致复制失败。</p></li></ul></blockquote><h2 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h2><p>前面在<a href="#配置主库">配置主库</a>时，已经说过，必须给每个从库创建一个服务器编号，创建好之后，<strong>必须</strong> 重启数据库。</p><p>如果从库的服务器编号没有设置，或者设置的编号和主库冲突，就需要先停掉从库，然后编辑从库的配置文件的 <code>[mysqld]</code> 这一节，指定一个唯一的服务器编号，像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure></p><p>保存好修改之后，重启从库。<br>如果配置了多个从库，那么每一个从库都必须有一个唯一的 <code>server-id</code> 选项值（即每个从库的 <code>server-id</code> 值必须与主库以及除它本身以外的其他从库的 <code>server-id</code> 值不同）。</p><blockquote><p>注意：<br>如果没有配置从库的 <code>server-id</code> 选项（或者配置它的值为默认值0），那么从库将拒绝连接到主库。</p></blockquote><p>不需要为了主从复制而给从库开启二进制日志功能。如果给从库开启了二进制日志功能，由此产生的二进制日志文件可以作为备份数据，或者在数据库崩溃的时候，使用二进制日志文件恢复数据，也可以使用此开启了二进制日志功能的从库作为更复杂的主从架构的一部分。比如，可以将此从库作为其他从库的主库。</p><h2 id="为从库创建用户"><a href="#为从库创建用户" class="headerlink" title="为从库创建用户"></a>为从库创建用户</h2><p>每个从库都使用数据库用户名和密码连接并登录到主库，所以在主库中必须有一个能让从库连接到此主库的 MySQL 账户。任何被赋予 <code>REPLICATION SLAVE</code> 权限的 MySQ L账户，都可以用作此连接操作。可以为每一个从库分配一个账户，也可以让所有的从库使用同一个账户，用来连接到主库。</p><p>虽然不需要为从库分配一个单独的账户去执行复制，但你应该知道的是，用来复制操作的用户名和密码都是明文存储在主库文件或表中的（相关链接：<a href="http://dev.mysql.com/doc/refman/5.6/en/slave-logs-status.html" target="_blank" rel="noopener">Section 17.2.2.2, “Slave Status Logs”</a>）。因此，你可能想要创建一个隔离的、只能进行复制操作的账户，将对其他账户的损害减到最小。</p><p>使用 <code>CREATE USER</code> 语句创建新的 MySQL 账户。使用 <code>GRANT</code> 语句给这个账户赋予复制操作所必要的权限。若创建账户仅是为了达到复制的目的的话，那么这个账户只需要 <code>REPLICATION SLAVE</code> 。举个例子，创建一个新的账户 <code>repl</code> ，使其可以从  <code>mydomain.com</code> 域名下的任何主机连接到主库并执行复制，在主库上执行下面的语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'repl'</span>@<span class="string">'%.mydomain.com'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'slavepass'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'repl'</span>@<span class="string">'%.mydomain.com'</span>;</span><br></pre></td></tr></table></figure></p><p>更多关于用户账户的操作语句，请查看 <a href="http://dev.mysql.com/doc/refman/5.6/en/account-management-sql.html" target="_blank" rel="noopener">Section 13.7.1, “Account Management Statements”</a>。</p><h2 id="获取主库的二进制日志坐标"><a href="#获取主库的二进制日志坐标" class="headerlink" title="获取主库的二进制日志坐标"></a>获取主库的二进制日志坐标</h2><p>为了在接下来配置完从库，使其能从正确的位置开始执行复制操作，你需要知道主库当前的二进制日志坐标。</p><p>如果在主库上已经存储了一些数据，而且又需要在开始之前同步到从库上，那么就必须在主库上停止执行语句，接着，获取主库当前的日志坐标，并转存其数据。如果不使主库停止执行语句，将会导致转存的数据和数据库的状态信息不相符，最终导致从库数据不一致或者引起从库发生错误。</p><p>依照下面这几步来获取主库的二进制日志坐标：</p><ol><li>使用命令行连接到主库以开始一个会话，清空所有表的缓存，并且通过执行 <code>FLUSH TABLES WITH READ LOCK</code> 阻止对数据库的写操作，即锁定对所有表的只读操作：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">LOCK</span>;</span><br></pre></td></tr></table></figure></li></ol><p>对于 <code>InnoDB</code> 存储引擎来说， <code>FLUSH TABLES WITH READ LOCK</code> 语句也会阻止 <code>COMMIT</code> 操作。</p><blockquote><p><strong>提醒</strong>：<br>不要退出刚才执行了 <code>FLUSH TABLES</code> 语句的会话。如果退出了这个会话，上面的锁表操作将被释放。</p></blockquote><ol start="2"><li>再打开一个新的会话，连接到主库，使用 <code>SHOW MASTER STATUS</code> 语句来确认当前二进制日志文件的名称和位置：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br></pre></td></tr></table></figure></li></ol><p>结果：</p><blockquote><table><thead><tr><th>File</th><th>Position</th><th>Binlog_Do_DB</th><th>Binlog_Ignore_DB</th></tr></thead><tbody><tr><td>mysql-bin.000003</td><td>73</td><td>test</td><td>manual,mysql</td></tr></tbody></table></blockquote><p> <code>File</code> 列显示了当前二进制日志文件的名字， <code>Position</code> 列显示了文件的位置。在上面这个例子中，二进制日志文件的名字是 <code>mysql-bin.000003</code> ，位置是 <code>73</code> 。这些数据代表了从库将要（开始）处理来自主库的更新的坐标。记录下这些数据，稍后在配置从库时，将会使用到它们。</p><p> 如果主库在事先没有开启二进制日志功能时已经在运行状态了，那么，通过执行 <code>SHOW MASTER STATUS</code> 语句，或者通过执行 <a href="http://dev.mysql.com/doc/refman/5.6/en/mysqldump.html" target="_blank" rel="noopener">mysqldump –master-data</a> 命令，得到的结果中，二进制日志文件名和位置都将是空。若是那样的话，在从库上配置二进制日志名和位置时，就分别用空字符串（<code>&#39;&#39;</code>）和 数值 <code>4</code> 来代替。</p><p><br><br>到目前为止，我们已经获得了足够的信息，我们需要使用这些信息，配置从库，使从库开始从正确的位置读取来自主库的二进制日志，开始进行复制。</p><p>如果你有一些数据，需要在从库开始复制之前同步到从库，那么，保持之前开启的会话不要关闭，这样才能保持之前开启的数据库锁不被释放。接着，查看 <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-howto-mysqldump.html" target="_blank" rel="noopener">Section 17.1.1.5, “Creating a Data Snapshot Using mysqldump”</a> 或者 <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-howto-rawdata.html" target="_blank" rel="noopener">Section 17.1.1.6, “Creating a Data Snapshot Using Raw Data Files”</a> 。它们将会告诉你如何防止任何进一步的更改，以便于将已经存在于主库的数据同步到从库。</p><p>如果你正在建立一个全新的主从复制组，你可以退出第一个会话，以便释放对数据库的读锁定。</p><h2 id="使用新的主、从库配置复制"><a href="#使用新的主、从库配置复制" class="headerlink" title="使用新的主、从库配置复制"></a>使用新的主、从库配置复制</h2><p>使用新的主、从库配置数据库复制是最简单、最直接的方式。</p><p>如果你正在设置新的服务器，但是有一些从其他的务器转存的数据库，并且你想加载到你的复制配置新中，同样可以使用本节介绍的方法。通过将数据加载到新的主库中，数据将会被自动复制到从库中。</p><p>依照下面这几步，来在新的主、从库之间配置复制功能：</p><ol><li>通过一些必要的配置属性文件，配置主库。参考：<a href="#配置主库">配置主库</a></li><li>启动主库。</li><li>设置一个用户。参考：<a href="#为从库创建用户">为从库创建用户</a>。</li><li>获取主库的状态信息。参考：<a href="#获取主库的二进制日志坐标">获取主库的二进制日志坐标</a>。</li><li><p>在主库上释放读锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span><br></pre></td></tr></table></figure></li><li><p>在从库上编辑 MySQL 配置文件。 参考：<a href="#配置从库">配置从库</a>。</p></li><li>启动从库。</li><li>执行 <code>CHANGE MASTER TO</code> 语句来设置主库的信息。参考：<a href="#为从库配置主库的信息">为从库配置主库的信息</a>。</li></ol><p>在每一台从库上，都完成上面这几步操作。</p><p>因为使用的是新的数据库，没有数据或者配置信息需要替换，因此你不需要复制或者导入任何其他信息。</p><p>如果你需要使用来自于其他数据库服务器上数据配置新的复制环境，你可能需要在新的主库上导入这些转存的数据。由此对主库产生的更新将会被自动同步到从库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h master &lt; fulldb.dump</span><br></pre></td></tr></table></figure></p><h2 id="使用已有的数据配置复制环境"><a href="#使用已有的数据配置复制环境" class="headerlink" title="使用已有的数据配置复制环境"></a>使用已有的数据配置复制环境</h2><p>当使用已有的数据配置复制环境时，你可能需要做出一个决定，如何在启动复制服务之前，让从库以最优方式获取到主库的数据。<br>下面这几步基本操作将会引导你，使用已有的数据配置复制环境：</p><ol><li><p>在 MySQL 主库运行的情况下，创建一个用户，以便从库在复制的时候可以连接到主库。参考：<a href="#为从库创建用户">为从库创建用户</a>。</p></li><li><p>如果你还没有在主库上配置 <code>server-id</code> 选项，或者还没有开启二进制日志功能，你需要停止主库，然后配置它们。参考：<a href="#配置主库">配置主库</a>。<br>在配置主库的过程中，如果需要停止（重启）主库服务，你可以利用主库服务停止的这段时间，创建一个主库的快照。但别忘了，你需要在停止主库服务、更新配置信息，创建快照之前，获得主库的状态信息（参考：<a href="#获取主库的二进制日志坐标">获取主库的二进制日志坐标</a>）。关于如何使用原始数据创建数据库快照，你可以参考这里：<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-howto-rawdata.html" target="_blank" rel="noopener">Section 17.1.1.6, “Creating a Data Snapshot Using Raw Data Files”</a>。</p></li><li><p>如果主库信息已经正确配置好了，那么就可以获取它的状态信息（参考：<a href="#获取主库的二进制日志坐标">获取主库的二进制日志坐标</a>），接着，使用 MySQL 自带的 <code>mysqldump</code> 工具创建一个数据库快照（参考：<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-howto-mysqldump.html" target="_blank" rel="noopener">Section 17.1.1.5, “Creating a Data Snapshot Using mysqldump”</a>），也可以参考 <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-howto-rawdata.html" target="_blank" rel="noopener">Section 17.1.1.6, “Creating a Data Snapshot Using Raw Data Files”</a> 直接创建主库的原始数据文件的快照。</p></li><li>更新从库的配置信息。参考：<a href="#配置从库">配置从库</a>。</li><li>这一步的操作，取决于你在主库上是如何创建的数据的快照的。<br>若你是使用的 <code>mysqldump</code> 创建的快照：</li></ol><ul><li>使用 <code>--skip-slave-start</code> 选项启动从库，以便不让主从复制开始。</li><li>像下面这样，导入转存的数据文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &lt; fulldb.dump</span><br></pre></td></tr></table></figure></li></ul><p>若你是使用第二种方案，即直接创建原始数据文件的快照的方式：</p><ul><li><p>将数据文件解压到从库的数据（<code>data</code>）目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf dbdump.tar</span><br></pre></td></tr></table></figure><pre><code>你可能需要设置这些文件的权限和所有者，以便在从库可以获取到这些数据文件，并且可以对其进行更新。</code></pre></li><li><p>使用 <code>--skip-slave-start</code> 选项启动从库，以便不让主从复制开始。</p></li></ul><ol start="6"><li>将主库的二进制日志坐标信息配置到从库。这一步用来指定从库需要从主库的哪一个二进制日志文件，以及从这个文件的什么位置开始复制。当然，也需要在从库上配置连接主库时使用的凭证和主库的 IP 或者 域名。更多关于 <code>CHANGE MASTER TO</code> 语句的所需的必须参数等信息，请参考：<a href="#为从库配置主库的信息">为从库配置主库的信息</a>。</li><li><p>启动从库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">SLAVE</span>;</span><br></pre></td></tr></table></figure></li></ol><p>执行完上面这几步，从库就会连接到主库，主库的任何更新操作，都将被发送到从库，从库会在已有的快照数据的基础上，同步执行这些更新。</p><p>如果你忘记了设置主库的 <code>server-id</code> 选项信息，从库将无法连接到主库。<br>如果你忘记了设置从库的 <code>server-id</code> 选项信息，在从库的错误日志中，将出现以下错误信息：</p><blockquote><p>Warning: You should set server-id to a non-0 value if master_host<br>is set; we will force server id to 2, but this MySQL server will<br>not act as a slave.</p></blockquote><p>同样，如果从库由于其他任何原因导致不能执行复制，你可以在错误日志文件中得到相关的错误信息。</p><p>从库通过使用存储在主库信息仓库中的信息，保持跟踪它已经执行了多少主库产生的二进制日志。通过 <code>--master-info-repository</code> 选项，可以将仓库信息设置在文件的表单里，或者在一个表中。当配置信息为 <code>--master-info-repository=FILE</code> 时，你可以在从库的数据（<code>data</code>）目录下发现两个文件，名字分别是 <code>master.info</code> 和 <code>relay-log.info</code> 。配置信息为 <code>--master-info-repository=TABLE</code> 时，信息将会被保存在 <code>mysql</code> 数据库的 <code>master_slave_info</code> 表中。无论如何，不要删除或者编辑上面提到的文件和表里的数据，除非你清楚的知道你在干什么，并且充分理解这么做代表的含义。即便如此，也应该优先使用 <code>CHANGE MASTER TO</code> 语句去修改复制参数。从库可以使用语句中指定的值去自动更新状态信息文件。更多相关信息请参考：<a href="http://dev.mysql.com/doc/refman/5.6/en/slave-logs.html" target="_blank" rel="noopener">Section 17.2.2, “Replication Relay and Status Logs”</a>。</p><blockquote><p>注意：<br>主库信息仓库的内容会覆盖一些在命令行或者 <code>my.cnf</code> 文件中设置的选项。详细信息请参考：<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-options.html" target="_blank" rel="noopener">Section 17.1.4, “Replication and Binary Logging Options and Variables”</a>。</p></blockquote><p>一份主库的快照，可以被多个从库来使用。如果需要额外再配置一些从库，可以使用相同的主库快照，像之前介绍如何配置已有从库时描述的那样，配置这些额外增加的从库。</p><h2 id="为从库配置主库的信息"><a href="#为从库配置主库的信息" class="headerlink" title="为从库配置主库的信息"></a>为从库配置主库的信息</h2><p>你必须告诉告诉从库一些必要信息，以便从库能够连接到主库进行复制。为了做到这一点，在从库上执行下面的语句，根据你的系统上实际的值，替换语句中相应的选项值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;master_host_name&apos;, MASTER_USER=&apos;replication_user_name&apos;, MASTER_PASSWORD=&apos;replication_password&apos;, MASTER_LOG_FILE=&apos;recorded_log_file_name&apos;, MASTER_LOG_POS=recorded_log_position;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：<br>复制不能使用 Unix 套接字文件（<code>socket file</code>）。你必须确保能够使用 <code>TCP/IP</code> 协议连接到主库。</p></blockquote><p><code>CHANGE MASTER TO</code> 语句也有一些其他参数可供配置。例如，可以通过使用此语句的其他选项，决定是否使用 SSL 协议，以便达到安全的复制。<br>关于此语句的完整的选项，以及选项值允许的最大长度等信息，请参考：<a href="http://dev.mysql.com/doc/refman/5.6/en/change-master-to.html" target="_blank" rel="noopener">Section 13.4.2.1, “CHANGE MASTER TO Syntax”</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 主从架构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL中字符串、日期时间等常用函数总结</title>
      <link href="/2016/07/31/MySQL%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%AD%89%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2016/07/31/MySQL%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%AD%89%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库基于 MySQL Server 5.6</p></blockquote><p>由于数据库自带函数的效率问题，对于海量数据的处理时，将加大数据库压力，使之成为系统的瓶颈。但对于大部分的初创等小型公司来说，数据并不多时，数据库函数并不能成为系统瓶颈，这时使用数据库自带的函数将给我们带来很大方便。所以这两天就梳理了一些MySQL中字符串、日期和时间等比较常用的函数，和各位分享。</p><h1 id="控制流程函数"><a href="#控制流程函数" class="headerlink" title="控制流程函数"></a>控制流程函数</h1><h2 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h2><ul><li><strong>CASE</strong> <em>value</em> <strong>WHEN</strong> [<em>compare_value</em>] <strong>THEN</strong> <em>result</em> [<strong>WHEN</strong> [<em>compare_value</em>] <strong>THEN</strong> <em>result …</em>] [<strong>ELSE</strong> <em>result</em>] <strong>END</strong></li><li><strong>CASE</strong> <strong>WHEN</strong> [<em>condition</em>] <strong>THEN</strong> <em>result</em> [<strong>WHEN</strong> [<em>condition</em>] <strong>THEN</strong> <em>result …</em>] [<strong>ELSE</strong> <em>result</em>] <strong>END</strong></li></ul><p>这里有两个方案，第一个方案对 <em>value</em> 判定，每个 <strong>WHEN</strong> <em>compare_value</em> <strong>THEN</strong> <em>result</em> 或 <strong>ELSE</strong> 是一个分支，若分支中<em>compare_value</em> 与 <em>value</em> 相等，则返回对应的 <strong>THEN</strong> 后的 <em>result</em>，若所有 <strong>WHEN</strong> 后的 <em>compare_value</em> 都不与 <em>value</em> 想的呢过，则返回 <strong>ELSE</strong> 后的 <em>result</em>，若没有 <strong>ELSE</strong>，则返回 <strong>NULL</strong>。<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="number">1</span> <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'one'</span> <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'two'</span> <span class="keyword">ELSE</span> <span class="string">'more'</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p>结果</p><blockquote><p>one</p></blockquote><p>第二个方案对每个 <strong>WHEN</strong> 后的表达式进行判定，若判定结果为 <code>true</code>，则返回对应的 <strong>THEN</strong> 后的结果，若所有 <strong>WHEN</strong> 后的判定结果均为 <code>false</code> ，则返回 <strong>ELSE</strong> 后的 <em>result</em>，若没有 <strong>ELSE</strong>，则返回 <strong>NULL</strong>。<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="number">1</span> &gt; <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'true'</span> <span class="keyword">ELSE</span> <span class="string">'false'</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p>结果</p><blockquote><p>true</p></blockquote><h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><ul><li><strong>IF</strong>(<em>expr1</em>, <em>expr2</em>, <em>expr3</em>)</li></ul><p><strong>IF</strong> 函数类似与 <code>Java</code> 或其他语言中的三元运算符，即对 <em>expr1</em> 进行判定，若结果为 <strong>true</strong>（<em>expr1</em> &lt;&gt; 0 and <em>expr1</em> &lt;&gt; <strong>NULL</strong>），则返回 <em>expr2</em>，否则，返回<em>expr3</em>。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">1</span> &gt; <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>3</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">1</span> &lt; <span class="number">2</span>, <span class="string">'yes'</span>, <span class="string">'no'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>yes</p></blockquote><p>示例3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="keyword">STRCMP</span>(<span class="string">'test'</span>, <span class="string">'test1'</span>), <span class="string">'no'</span>, <span class="string">'yes'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>no</p></blockquote><h2 id="IFNULL"><a href="#IFNULL" class="headerlink" title="IFNULL"></a>IFNULL</h2><ul><li><strong>IFNULL</strong>(<em>expr1</em>, <em>expr2</em>)</li></ul><p><strong>IFNULL</strong> 语句与上面的 <a href="#if"><strong>IF</strong>()</a> 函数有点类似对 <em>expr1</em> 进行判定，若 <em>expr1</em>  不为空，则返回 <em>expr1</em>，否则返回 <em>expr2</em>。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="literal">NULL</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>10</p></blockquote><p>示例3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="number">1</span>/<span class="number">0</span>, <span class="string">'yes'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>yes</p></blockquote><h2 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h2><ul><li><strong>NULLIF</strong>(<em>expr1</em>, <em>expr2</em>)</li></ul><p>若 <em>expr1</em> 与 <em>expr2</em> 相等，则返回 <strong>NULL</strong>，否则返回 <em>expr1</em>。和 <strong>CASE</strong> <strong>WHEN</strong> <em>expr1</em> = <em>expr2</em> <strong>THEN</strong> <strong>NULL</strong> <strong>ELSE</strong> <em>expr1</em> <strong>END</strong> 效果相同。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULLIF</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>NULL</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULLIF</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><h2 id="字符串比较函数"><a href="#字符串比较函数" class="headerlink" title="字符串比较函数"></a>字符串比较函数</h2><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><ul><li><em>expr</em> <strong>LIKE</strong> <em>pat</em> [<strong>ESCAPE</strong> ‘escape_char’]</li></ul><p>模式匹配，使用SQL简单正规表达式比较。返回1 (<strong>TRUE</strong>) 或 0 (<strong>FALSE</strong>)。 若 <em>expr</em> 或 <em>pat</em> 中任何一个为 NULL,则结果为 NULL。<br>模式不需要为文字字符串，可以被指定为一个字符串表达式或表列。<br>在模式中可以同 <strong>LIKE</strong> 一起使用以下两种通配符：<br>字符|说明<br>—| —————————-<br><code>%</code>|匹配任何数目的字符，甚至包括零个字符<br><code>_</code>|只能匹配一个字符</p><p>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'David!'</span> <span class="keyword">LIKE</span> <span class="string">'David_'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1<br>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'David!'</span> <span class="keyword">LIKE</span> <span class="string">'%D%v%'</span>;</span><br></pre></td></tr></table></figure></p></blockquote><p>结果：</p><blockquote><p>1</p></blockquote><p>若要将通配符视为普通字符，以便在字符串中匹配通配符，可将转义符(默认为<code>\</code>)置于此通配符前面即可。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'David!'</span> <span class="keyword">LIKE</span> <span class="string">'David\_'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>0</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'David_'</span> <span class="keyword">LIKE</span> <span class="string">'David\_'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>要指定一个不同的转义字符,可使用 <strong>ESCAPE</strong> 语句。<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'David_'</span> <span class="keyword">LIKE</span> <span class="string">'David|_'</span> ESCAPE <span class="string">'|'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>转义序列可以为空，也可以是一个字符的长度。<br>字符串比较不区分大小写，除非其中的一个比较对象是大小写敏感的（使用区分大小写敏感的字符集或者是一个二进制字符串）。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'abc'</span> <span class="keyword">LIKE</span> <span class="string">'ABC'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'abc'</span> <span class="keyword">LIKE</span> _latin1 <span class="string">'ABC'</span> <span class="keyword">COLLATE</span> latin1_general_cs;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>0</p></blockquote><p>示例3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'abc'</span> <span class="keyword">LIKE</span> _latin1 <span class="string">'ABC'</span> <span class="keyword">COLLATE</span> latin1_bin;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>0</p></blockquote><p>示例4：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'abc'</span> <span class="keyword">LIKE</span> <span class="built_in">BINARY</span> <span class="string">'ABC'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>0</p></blockquote><p>作为对标准 SQL 的扩展，MySQL 允许 <strong>LIKE</strong> 函数作用在数字表达式上。<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span> <span class="keyword">LIKE</span> <span class="string">'1%'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><h3 id="NOT-LIKE"><a href="#NOT-LIKE" class="headerlink" title="NOT LIKE"></a>NOT LIKE</h3><ul><li><em>expr</em> <strong>NOT</strong> <strong>LIKE</strong> <em>pat</em> [<strong>ESCAPE</strong> ‘escape_char’]</li></ul><p>和 <strong>NOT</strong> (<em>expr</em> <strong>LIKE</strong> <em>pat</em> [<strong>ESCAPE</strong> ‘escape_char’]) 效果相同。</p><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h2><h3 id="REGEXP"><a href="#REGEXP" class="headerlink" title="REGEXP"></a>REGEXP</h3><ul><li><em>expr</em> <strong>REGEXP</strong> <em>pat</em></li><li><em>expr</em> <strong>RLIKE</strong> <em>pat</em></li></ul><p>用给定的正则表达式 <em>pat</em> 匹配字符串 <em>expr</em>，如果匹配成功，则返回 1。否则返回 0。正则表达式 <em>pat</em> 和字符串 <em>expr</em> 二者任意一个为空时，将返回 <strong>NULL</strong>。<strong>RLIKE</strong> 是 <strong>REGEXP</strong> 的同义词, 是为了兼容 <strong>mSQL</strong>。<br>正则表达式 <em>pat</em> 不需要为字符串。例如，可以被指定为一个字符串表达式或表列。<br><strong>REGEXP</strong> 是不区分大小写的，除非跟二进制字符串一起使用。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'Monty!'</span> REGEXP <span class="string">'.*'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'new*\n*line'</span> REGEXP <span class="string">'new\\*.\\*line'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>示例3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'a'</span> REGEXP <span class="string">'A'</span>, <span class="string">'a'</span> REGEXP <span class="built_in">BINARY</span> <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1  0</p></blockquote><p>示例5：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'a'</span> REGEXP <span class="string">'^[a-d]'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><h3 id="NOT-REGEXP"><a href="#NOT-REGEXP" class="headerlink" title="NOT REGEXP"></a>NOT REGEXP</h3><ul><li><em>expr</em> <strong>NOT</strong> <strong>REGEXP</strong> <em>pat</em></li><li><em>expr</em> <strong>NOT</strong> <strong>RLIKE</strong> <em>pat</em></li></ul><p>相当于 <strong>NOT</strong> (<em>expr</em> <strong>REGEXP</strong> <em>pat</em>)。</p><h1 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h1><!-- ## 算术操作符算术操作符的计算结果，都严格按照如下规则：- 对于+、 - 和 * 而言，如果两个运算对象都是整数，则其计算结果的精确度为 BIGINT (64比特)。- 如果两个计算对象都是非负整数数，则其结果也是非负整数。对于减法运算，如果数据库的SQL模式启用了`NO_UNSIGNED_SUBTRACTION`模式的话，计算结果将区分正负数，即便两个计算对象都是非负整数。--><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><h3 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h3><ul><li><strong>TRUNCATE</strong> (<em>X</em>, <em>D</em>)</li></ul><p>返回被舍去至小数点后 <em>D</em> 位的数字 <em>X</em>。若 <em>D</em> 的值为 0, 则结果不带有小数点或不带有小数部分。可以将 <em>D</em> 设为负数,若要截去（归零） <em>X</em>小数点左起第 <em>D</em> 位（含）开始后面所有低位的值。</p><h1 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h1><h2 id="ADDDATE"><a href="#ADDDATE" class="headerlink" title="ADDDATE"></a>ADDDATE</h2><ul><li><strong>ADDDATE</strong>(<em>date</em>, <strong>INTERVAL</strong> <em>expr</em> <em>unit</em>)</li><li><strong>ADDDATE</strong>(<em>expr</em>, <em>days</em>)</li></ul><p>当被第二个参数的 <strong>INTERVAL</strong> 格式激活后， <strong>ADDDATE</strong>() 的用法和 <strong>DATE_ADD</strong>() 的相同。相关函数 <strong>SUBDATE</strong>() 的用法和 <strong>DATE_SUB</strong>() 相同。对于 <strong>INTERVAL</strong> 参数上的信息 ，请参见关于 <a href="#dateadd-datesub"><strong>DATE_ADD</strong>()</a> 的论述。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">'2008-01-02'</span>, <span class="built_in">INTERVAL</span> <span class="number">31</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2008-02-02</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ADDDATE(<span class="string">'2008-01-02'</span>, <span class="built_in">INTERVAL</span> <span class="number">31</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2008-02-02</p></blockquote><h2 id="ADDTIME"><a href="#ADDTIME" class="headerlink" title="ADDTIME"></a>ADDTIME</h2><ul><li><strong>ADDTIME</strong>(<em>expr1</em>, <em>expr2</em>)</li></ul><p><strong>ADDTIME()</strong> 将 <em>expr2</em> 添加至 <em>expr</em> 然后返回结果。<em>expr</em> 是一个时间或时间日期表达式，而 <em>expr2</em> 是一个时间表达式。</p><h2 id="CURDATE"><a href="#CURDATE" class="headerlink" title="CURDATE"></a>CURDATE</h2><ul><li><strong>CURDATE</strong>()</li></ul><p>将当前日期按照 ‘YYYY-MM-DD’ 或 YYYYMMDD 格式的值返回，具体格式根据函数用在字符串或是数字语境中而定。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2016-07-29</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>() + <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>20060729</p></blockquote><h2 id="CURRENT-DATE"><a href="#CURRENT-DATE" class="headerlink" title="CURRENT_DATE"></a>CURRENT_DATE</h2><ul><li><strong>CURRENT_DATE</strong></li><li><strong>CURRENT_DATE</strong>()</li></ul><p><strong>CURRENT_DATE</strong> 和 <strong>CURRENT_DATE</strong>() 的用法与 <a href="#curdate"><strong>CURDATE</strong>()</a> 相同。</p><h2 id="CURTIME"><a href="#CURTIME" class="headerlink" title="CURTIME"></a>CURTIME</h2><ul><li><strong>CURTIME</strong>([<em>fsp</em>])</li></ul><p>将当前时间以 ‘HH:MM:SS’ 或 HHMMSS 的格式返回，具体格式根据函数用在字符串或是数字语境中而定。该值表示当前时区的时间。从 MySQL 5.6.4 开始，<em>fsp</em> 参数用来指定返回值中小数位的长度，该参数的取值范围 0 - 6。在 MySQL5.6.4 之前，给<strong>CURTIME</strong>() 函数传递任何参数都会被忽略。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>();</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>16:38:39</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>();</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>163927</p></blockquote><h2 id="CURRENT-TIME"><a href="#CURRENT-TIME" class="headerlink" title="CURRENT_TIME"></a>CURRENT_TIME</h2><ul><li><strong>CURRENT_TIME</strong></li><li><strong>CURRENT_TIME</strong>([<em>fsp</em>])</li></ul><p><strong>CURRENT_TIME</strong> 和 <strong>CURRENT_TIME</strong>() 的用法与 <a href="#curtime"><strong>CURTIME</strong>()</a> 函数相同。</p><h2 id="NOW"><a href="#NOW" class="headerlink" title="NOW"></a>NOW</h2><ul><li><strong>NOW</strong>([<em>fsp</em>])</li></ul><p>返回当前日期和时间值，其格式为 ‘YYYY-MM-DD HH:MM:SS’ 或YYYYMMDDHHMMSS， 具体格式取决于该函数是否用在字符串中或数字语境中。该值表示当前时区的时间。从 MySQL 5.6.4 开始，<em>fsp</em> 参数用来指定返回值中小数位的长度，该参数的取值范围 0 - 6。在 MySQL5.6.4 之前，给 <strong>NOW</strong>() 函数传递任何参数都会被忽略。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2016-07-29 16:49:28</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>() + <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>20160729165026</p></blockquote><p><strong>NOW</strong>() 返回一个固定时间，该时间指示了该开始执行的时间（在存储函数或者触发器中，<strong>NOW</strong>() 函数返回存储函数或者触发器开始执行的时间）。这同 <strong>SYSDATE</strong>() 的运行有所不同，<strong>SYSDATE</strong>() 函数返回它自身执行的时间。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>(), <span class="keyword">SLEEP</span>(<span class="number">2</span>), <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><table><thead><tr><th>NOW()</th><th>SLEEP(2)</th><th>NOW()</th></tr></thead><tbody><tr><td>2016-07-29 17:16:40</td><td>0</td><td>2016-07-29 17:16:40</td></tr></tbody></table></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span>(), <span class="keyword">SLEEP</span>(<span class="number">2</span>), <span class="keyword">SYSDATE</span>();</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><table><thead><tr><th>SYSDATE()</th><th>SLEEP(2)</th><th>SYSDATE()</th></tr></thead><tbody><tr><td>2016-07-29 17:52:24</td><td>0</td><td>2016-07-29 17:52:26</td></tr></tbody></table></blockquote><h2 id="CURRENT-TIMESTAMP"><a href="#CURRENT-TIMESTAMP" class="headerlink" title="CURRENT_TIMESTAMP"></a>CURRENT_TIMESTAMP</h2><ul><li><strong>CURRENT_TIMESTAMP</strong></li><li><strong>CURRENT_TIMESTAMP</strong>([<em>fsp</em>])</li></ul><p><strong>CURRENT_TIMESTAMP</strong> 和 <strong>CURRENT_TIMESTAMP</strong>() 的用法与 <a href="#now"><strong>NOW</strong>()</a> 函数相同。</p><h2 id="DATE"><a href="#DATE" class="headerlink" title="DATE"></a>DATE</h2><ul><li><strong>DATE</strong>(<em>expr</em>)</li></ul><p>提取日期或时间日期表达式 <em>expr</em> 中的日期部分，若没有提取到，则返回 <strong>NULL</strong>。<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">DATE</span>(<span class="string">'2016-12-31 01:02:03'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2016-12-31</p></blockquote><h2 id="DATEDIFF"><a href="#DATEDIFF" class="headerlink" title="DATEDIFF"></a>DATEDIFF</h2><ul><li><strong>DATEDIFF</strong>(<em>expr1</em>, <em>expr2</em>)</li></ul><p>返回起始时间 <em>expr1</em> 和结束时间 <em>expr2</em> 之间的天数（即表达式 <code>expr1 - expr2</code> 的值）。<em>expr1</em> 和 <em>expr2</em> 为日期或 date-and-time 表达式。计算中只用到这些值的日期部分。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2007-12-31 23:59:59'</span>,<span class="string">'2007-12-30'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2010-11-30 23:59:59'</span>,<span class="string">'2010-12-31'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>-31</p></blockquote><h2 id="DATE-ADD-DATE-SUB"><a href="#DATE-ADD-DATE-SUB" class="headerlink" title="DATE_ADD, DATE_SUB"></a>DATE_ADD, DATE_SUB</h2><ul><li><strong>DATE_ADD</strong>(<em>date</em>, <strong>INTERVAL</strong> <em>expr</em> unit)</li><li><strong>DATE_SUB</strong>(<em>date</em>, <strong>INTERVAL</strong> <em>expr</em> unit)</li></ul><p>这两个函数执行日期运算。参数 <em>date</em> 是一个 <strong>DATETIME</strong> 或 <strong>DATE</strong> 值，用来指定起始日期。 <em>expr</em> 是一个表达式，用来指定从起始日期(即参数 <em>date</em>)添加或减去的日期间隔值。<em>expr</em> 是一个字符串；对于负值的日期间隔，它可以以一个 “<code>-</code>”开头。 type 为关键词，它指示了表达式被解释的方式。<br>关键词 <strong>INTERVA</strong> 及 unit 分类符均不区分大小写。<br>下表展示了unit 和 <em>expr</em> 参数的关系：<br>unit 值             | 期望的 <em>expr</em> 值<br>——————- | ————-<br><code>MICROSECOND</code>       | MICROSECONDS<br><code>SECOND</code>            | SECONDS<br><code>MINUTE</code>            | MINUTES<br><code>HOUR</code>              | HOURS<br><code>DAY</code>               | DAYS<br><code>WEEK</code>              | WEEKS<br><code>MONTH</code>             | MONTHS<br><code>QUARTER</code>           | QUARTERS<br><code>YEAR</code>              | YEARS<br><code>SECOND_MICROSECOND</code>| ‘SECONDS.MICROSECONDS’<br><code>MINUTE_MICROSECOND</code>| ‘MINUTES:SECONDS.MICROSECONDS’<br><code>MINUTE_SECOND</code>     | ‘MINUTES:SECONDS’<br><code>HOUR_MICROSECOND</code>  | ‘HOURS:MINUTES:SECONDS.MICROSECONDS’<br><code>HOUR_SECOND</code>       | ‘HOURS:MINUTES:SECONDS’<br><code>HOUR_MINUTE</code>       | ‘HOURS:MINUTES’<br><code>DAY_MICROSECOND</code>   | ‘DAYS HOURS:MINUTES:SECONDS.MICROSECONDS’<br><code>DAY_SECOND</code>        | ‘DAYS HOURS:MINUTES:SECONDS’<br><code>DAY_MINUTE</code>        | ‘DAYS HOURS:MINUTES’<br><code>DAY_HOUR</code>          | ‘DAYS HOURS’<br><code>YEAR_MONTH</code>        | ‘YEARS-MONTHS’<br>返回值取决于传递的参数。<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">'2010-12-31 23:59:59'</span>, <span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2011-01-01 23:59:59</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">'2100-12-31 23:59:59'</span>, <span class="built_in">INTERVAL</span> <span class="string">'1:1'</span> MINUTE_SECOND);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2101-01-01 00:01:00</p></blockquote><p>示例3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_SUB</span>(<span class="string">'2005-01-01 00:00:00'</span>, <span class="built_in">INTERVAL</span> <span class="string">'1 1:1:1'</span> DAY_SECOND);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>2004-12-30 22:58:59</p></blockquote><h2 id="DATE-FORMAT"><a href="#DATE-FORMAT" class="headerlink" title="DATE_FORMAT"></a>DATE_FORMAT</h2><ul><li><strong>DATE_FORMAT</strong>(<em>date</em>, <em>format</em>)</li></ul><p>根据 <em>format</em> 字符串安排 <em>date</em> 值的格式。<br>说明符 | 说明<br>—– | —-<br><code>%a</code>    | 工作日的缩写名称  (Sun..Sat)<br><code>%b</code>    | 月份的缩写名称  (Jan..Dec)<br><code>%c</code>    | 月份，数字形式(0..12)<br><code>%D</code>    | 带有英语后缀的该月日期  (0th，1st，2nd，3rd，···)<br><code>%d</code>    | 该月日期，数字形式 (00..31)<br><code>%e</code>    | 该月日期，数字形式(0..31)<br><code>%f</code>    | 微秒 (000000..999999)<br><code>%H</code>    | 小时(00..23)<br><code>%h</code>    | 小时(01..12)<br><code>%I</code>    | 小时 (01..12)<br><code>%i</code>    | 分钟，数字形式 (00..59)<br><code>%j</code>    | 一年中的天数 (001..366)<br><code>%k</code>    | 小时 (0..23)<br><code>%l</code>    | 小时 (1..12)<br><code>%M</code>    | 月份名称 (January..December)<br><code>%m</code>    | 月份，数字形式 (00..12)<br><code>%p</code>    | 上午（AM）或下午（ PM）<br><code>%r</code>    | 时间，12小时制 (小时hh:分钟mm:秒数ss 后加 AM或PM)<br><code>%S</code>    | 秒 (00..59)<br><code>%s</code>    | 秒 (00..59)<br><code>%T</code>    | 时间，24小时制 (小时hh:分钟mm:秒数ss)<br><code>%U</code>    | 周 (00..53), 其中周日为每周的第一天<br><code>%u</code>    | 周 (00..53), 其中周一为每周的第一天<br><code>%V</code>    | 周 (01..53), 其中周日为每周的第一天；和 <code>%X</code> 同时使用<br><code>%v</code>    | 周 (01..53), 其中周一为每周的第一天；和 <code>%x</code> 同时使用<br><code>%W</code>    | 工作日名称 (周日..周六)<br><code>%w</code>    | 一周中的每日 (0=周日..6=周六)<br><code>%X</code>    | 该周的年份，其中周日为每周的第一天；数字形式，4位数；和 <code>%V</code> 同时使用<br><code>%x</code>    | 该周的年份，其中周一为每周的第一天，数字形式，4位数；和 <code>%v</code> 同时使用<br><code>%Y</code>    | 年份，数字形式，4位数<br><code>%y</code>    | 年份，数字形式 (2位数)<br><code>%%</code>    | <code>%</code> 字符<br>示例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="string">'1900-10-04 22:23:00'</span>, <span class="string">'%D %y %a %d %m %b %j'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>4th 00 Thu 04 10 Oct 277</p></blockquote><p>示例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="string">'1999-01-01'</span>, <span class="string">'%X %V'</span>);</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>1998 52</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mysql-日期函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下，Nginx的安装、升级及动态添加模块</title>
      <link href="/2016/06/17/Linux%E4%B8%8B%EF%BC%8CNginx%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E5%8D%87%E7%BA%A7%E5%8F%8A%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/06/17/Linux%E4%B8%8B%EF%BC%8CNginx%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E5%8D%87%E7%BA%A7%E5%8F%8A%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统基于<code>ubuntu server 14.04.4 amd64</code></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="第一步-下载并解压Nginx压缩包"><a href="#第一步-下载并解压Nginx压缩包" class="headerlink" title="第一步 下载并解压Nginx压缩包"></a>第一步 下载并解压Nginx压缩包</h2><p> 从<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx官网</a>下载Nginx，或者在Linux上执行<code>wget http://nginx.org/download/nginx-1.10.1.tar.gz</code>命令直接下载<br>解压<code>nginx-1.10.1.tar.gz</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.10.1.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="第二步-配置"><a href="#第二步-配置" class="headerlink" title="第二步 配置"></a>第二步 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.10.1</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>注意：<br><strong>①</strong> 如果之前没有安装C compiler（C 编译器），这一步将报如下错误信息：</p><blockquote><p>xueliang@dev:~/download/nginx-1.10.1\$ ./configure –prefix=/usr/local/nginx<br>checking for OS</p><ul><li>Linux 4.2.0-27-generic x86_64<br>checking for C compiler … not found</li></ul></blockquote><blockquote><p>./configure: error: C compiler cc is not found</p></blockquote><blockquote><p>xueliang@dev:~/download/nginx-1.10.1\$</p></blockquote><p>可以参考<a href="20160616165344843">这篇文章</a>安装C compiler，然后继续下面的操作</p><p><strong>②</strong> 如果之前没有安装PCRE，这一步将报如下错误信息：</p><blockquote><p>checking for PCRE library … not found<br>checking for PCRE library in /usr/local/ … not found<br>checking for PCRE library in /usr/include/pcre/ … not found<br>checking for PCRE library in /usr/pkg/ … not found<br>checking for PCRE library in /opt/local/ … not found</p></blockquote><blockquote><p>./configure: error: the HTTP rewrite module requires the PCRE library.<br>You can either disable the module by using –without-http_rewrite_module<br>option, or install the PCRE library into the system, or build the PCRE library<br>statically from the source with nginx by using –with-pcre=<path> option.</path></p></blockquote><blockquote><p>xueliang@dev:~/download/nginx-1.10.1\$</p></blockquote><p>可以参考<a href="20160616234542404">这篇文章</a>安装PCRE，然后继续下面的操作</p><p><strong>③</strong> 如果之前没有安装zlib，这一步将报如下错误信息：</p><blockquote><p>checking for md5 in system md library … not found<br>checking for md5 in system md5 library … not found<br>checking for md5 in system OpenSSL crypto library … not found<br>checking for sha1 in system md library … not found<br>checking for sha1 in system OpenSSL crypto library … not found<br>checking for zlib library … not found</p></blockquote><blockquote><p>./configure: error: the HTTP gzip module requires the zlib library.<br>You can either disable the module by using –without-http_gzip_module<br>option, or install the zlib library into the system, or build the zlib library<br>statically from the source with nginx by using –with-zlib=<path> option.</path></p></blockquote><blockquote><p>xueliang@dev:~/download/nginx-1.10.1\$</p></blockquote><p>可以参考<a href="20160617235632656">这篇文章</a>安装zlib，然后继续下面的操作</p><p>也可以跳过此步，执行默认安装，<code>--prefix</code>的默认值为<code>/usr/local/nginx</code>，Nginx官网对此有说明：<a href="http://nginx.org/en/docs/configure.html" target="_blank" rel="noopener">Building nginx from Sources</a></p><h2 id="第三步-编译"><a href="#第三步-编译" class="headerlink" title="第三步 编译"></a>第三步 编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="第四步-完成安装"><a href="#第四步-完成安装" class="headerlink" title="第四步 完成安装"></a>第四步 完成安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h1><p>当需要对正在运行的Nginx进行升级时，可以在不停止Nginx的情况下，使用新版本或者重编译的可执行程序替换旧版本的可执行程序，这里我们从<code>nginx-1.10.1</code>升级到<code>nginx-1.11.1</code>。</p><h2 id="第一步-备份旧版本"><a href="#第一步-备份旧版本" class="headerlink" title="第一步 备份旧版本"></a>第一步 备份旧版本</h2><p>因为Nginx的升级，实质只是用新版本的可执行文件，替换旧版本的可执行程序，所以，对于备份，既可以只备份旧版本可执行文件，也可以打包备份整个旧版本安装目录，参考命令分别如下：<br><strong>只备份旧版本可执行文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure></p><p><strong>打包备份整个旧版本安装目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cvf /usr/local/nginx.bak /usr/local/nginx</span><br></pre></td></tr></table></figure></p><h2 id="第二步-下载新版本并解压Nginx压缩包"><a href="#第二步-下载新版本并解压Nginx压缩包" class="headerlink" title="第二步 下载新版本并解压Nginx压缩包"></a>第二步 下载新版本并解压Nginx压缩包</h2><p>对于新版本Nginx压缩包的下载和解压，可以参考本文关于Nginx的安装部分的第一、二步。</p><h2 id="第三步-使用旧版本配置参数，配置并编译新版本Nginx"><a href="#第三步-使用旧版本配置参数，配置并编译新版本Nginx" class="headerlink" title="第三步 使用旧版本配置参数，配置并编译新版本Nginx"></a>第三步 使用旧版本配置参数，配置并编译新版本Nginx</h2><p>因为只是对Nginx进行升级，并不涉及配置参数的修改，所以，我们一般使用和旧版本相同的配置(当然你也可以使用全新的配置信息)，来编译新版本的Nginx，使用如下命令查看旧版本配置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure></p><p>可以得到结果如下：</p><blockquote><p>xueliang@dev:~/download/nginx-1.11.1\$ /usr/local/nginx/sbin/nginx -V<br>nginx version: nginx/1.10.1<br>built by gcc 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)<br>configure arguments: –prefix=/usr/local/nginx<br>xueliang@dev:~/download/nginx-1.11.1\$</p></blockquote><p>其中 [configure arguments: –prefix=/usr/local/nginx] 这一行即为旧版本Nginx配置信息，这里可以看出，旧版本只是指定了安装路径，使用[configure arguments:]后面的参数信息，对新版本Nginx作相同配置，然后进行编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure></p><h2 id="第四步-编译新版本Nginx可执行程序"><a href="#第四步-编译新版本Nginx可执行程序" class="headerlink" title="第四步 编译新版本Nginx可执行程序"></a>第四步 编译新版本Nginx可执行程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="第五步-用新版本Nginx可执行程序覆盖旧版本可执行程序"><a href="#第五步-用新版本Nginx可执行程序覆盖旧版本可执行程序" class="headerlink" title="第五步 用新版本Nginx可执行程序覆盖旧版本可执行程序"></a>第五步 用新版本Nginx可执行程序覆盖旧版本可执行程序</h2><p>在上一步的基础上，执行一下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp objs/nginx /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p><p>执行这条命令，可能会报以下异常，提示文件被占用：</p><blockquote><p>xueliang@dev:~/download/nginx-1.11.1\$ sudo cp objs/nginx /usr/local/nginx/sbin/nginx<br>cp: cannot create regular file ‘/usr/local/nginx/sbin/nginx’: Text file busy<br>xueliang@dev:~/download/nginx-1.11.1\$</p></blockquote><p>可以使用以下命令进行强制覆盖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -rfp objs/nginx /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p><h2 id="第六步-启动新版本Nginx主进程"><a href="#第六步-启动新版本Nginx主进程" class="headerlink" title="第六步 启动新版本Nginx主进程"></a>第六步 启动新版本Nginx主进程</h2><p>发送 USR2信号给旧版本主进程号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -USR2 旧版本的Nginx主进程号</span><br></pre></td></tr></table></figure></p><p>旧版本Nginx主进程接收到<code>-USR2</code>信号，将重命名它的<code>.pid</code>文件为<code>.oldbin</code>，然后执行新版本的Nginx可执行程序，依次启动新版本的主进程和工作进程：</p><blockquote><table><thead><tr><th style="text-align:right">PID</th><th style="text-align:right">PPID</th><th style="text-align:right">USER</th><th style="text-align:right">%CPU</th><th style="text-align:right">VSZ</th><th style="text-align:right">WCHAN</th><th>COMMAND</th></tr></thead><tbody><tr><td style="text-align:right">33126</td><td style="text-align:right">1</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1164</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">33134</td><td style="text-align:right">33126</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1368</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">33135</td><td style="text-align:right">33126</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1380</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">33136</td><td style="text-align:right">33126</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1368</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36264</td><td style="text-align:right">33126</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1148</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">36265</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36266</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36267</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1164</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr></tbody></table></blockquote><h2 id="第七步-从容关闭旧版本的工作进程"><a href="#第七步-从容关闭旧版本的工作进程" class="headerlink" title="第七步 从容关闭旧版本的工作进程"></a>第七步 从容关闭旧版本的工作进程</h2><p>此时，新、旧版本的Nginx实例会同时运行，共同处理请求，如果此时给旧版本主进程发送<code>WINCH</code> 信号，旧版本主进程将会给它的工作进程发送消息，请求它们从容关闭，此后，旧版本的工作进程开始逐步退出：</p><blockquote><table><thead><tr><th style="text-align:right">PID</th><th style="text-align:right">PPID</th><th style="text-align:right">USER</th><th style="text-align:right">%CPU</th><th style="text-align:right">VSZ</th><th style="text-align:right">WCHAN</th><th>COMMAND</th></tr></thead><tbody><tr><td style="text-align:right">33126</td><td style="text-align:right">1</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1164</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">33135</td><td style="text-align:right">33126</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1380</td><td style="text-align:right">kqread</td><td>nginx: worker process is shutting down (nginx)</td></tr><tr><td style="text-align:right">36264</td><td style="text-align:right">33126</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1148</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">36265</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36266</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36267</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr></tbody></table></blockquote><p>从容关闭旧版本的工作进程命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -WINCH 旧版本的Nginx主进程号</span><br></pre></td></tr></table></figure></p><h2 id="第八步-从容关闭旧版本的主进程，完成Nginx的升级"><a href="#第八步-从容关闭旧版本的主进程，完成Nginx的升级" class="headerlink" title="第八步 从容关闭旧版本的主进程，完成Nginx的升级"></a>第八步 从容关闭旧版本的主进程，完成Nginx的升级</h2><p>经过一段时间后，旧的工作进程（work process）处理完了所有已连接的请求后退出，仅由新版本的工作进程来处理新的请求了：</p><blockquote><table><thead><tr><th style="text-align:right">PID</th><th style="text-align:right">PPID</th><th style="text-align:right">USER</th><th style="text-align:right">%CPU</th><th style="text-align:right">VSZ</th><th style="text-align:right">WCHAN</th><th>COMMAND</th></tr></thead><tbody><tr><td style="text-align:right">33126</td><td style="text-align:right">1</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1164</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">36264</td><td style="text-align:right">33126</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1148</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">36265</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36266</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36267</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr></tbody></table></blockquote><p>应该注意的是，此时，旧版本的主进程还尚未关闭它监听的套接字，如果有需要，你仍可以恢复旧版本工作进程。如果由于某些原因，新版本的可执行文件运行情况不理想，下面有几种方案可供参考：</p><ul><li>给旧版本主进程发送 <code>HUP</code> 信号。旧版本主进程将在不重新读取配置信息的情况下，重新开启工作进程。然后，通过给新版本主进程发送 <code>QUIT</code> 信号，所有新版本的进程将会从容关闭。</li><li>给新版本主进程发送 <code>TERM</code> 信号。然后，他将会给它的工作进程发送消息，要求它们立即退出，紧接着，这些工作进程就会立即退出。（如果因为某些原因，新版本进程没有退出，应该给新版本主进程发送 <code>KILL</code> 信号，强制新版本主进程退出。）新版本主进程退出的同时，旧版本主进程将会自动启动它的工作进程。<br>新版本主进程退出后，旧版本主进程将会移除名字以<code>.oldbin</code> 结尾的文件，恢复为它的 <code>.pid</code> 文件。</li></ul><p>如果升级成功，应该给旧版本主进程发送 <code>QUIT</code> 信号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -QUIT 旧版本的Nginx主进程号</span><br></pre></td></tr></table></figure></p><p>使其退出，只保留新版本进程：</p><blockquote><table><thead><tr><th style="text-align:right">PID</th><th style="text-align:right">PPID</th><th style="text-align:right">USER</th><th style="text-align:right">%CPU</th><th style="text-align:right">VSZ</th><th style="text-align:right">WCHAN</th><th>COMMAND</th></tr></thead><tbody><tr><td style="text-align:right">36264</td><td style="text-align:right">33126</td><td style="text-align:right">root</td><td style="text-align:right">0.0</td><td style="text-align:right">1148</td><td style="text-align:right">pause</td><td>nginx: master process /usr/local/nginx/sbin/nginx</td></tr><tr><td style="text-align:right">36265</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36266</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr><tr><td style="text-align:right">36267</td><td style="text-align:right">36264</td><td style="text-align:right">nobody</td><td style="text-align:right">0.0</td><td style="text-align:right">1364</td><td style="text-align:right">kqread</td><td>nginx: worker process (nginx)</td></tr></tbody></table></blockquote><h1 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h1><p>刚接触Nginx时，只知道Nginx的功能是分模块的，并不清楚有些模块默认是不参与到构建中去的，比如<code>ngx_http_ssl_module</code>模块，是用来支持<code>https</code>协议的，默认情况下是没有构建到Nginx中的。<br>随着业务不断扩展，如果需要Nginx支持某些模块，而这些模块默认不在Nginx的构建计划中，构建Nginx时，又没有指定加入这些模块，该怎么办呢？是否能够给已经运行的Nginx动态添加这些模块呢？答案是肯定的！<br>给运行中的Nginx动态添加模块的方案，与上面提到的平滑升级Nginx的方案很类似。下面我们来看一下如何给运行中的Nginx添加 <code>ngx_http_ssl_module</code> 模块。</p><h2 id="第一步-查看运行中的Nginx版本，并下载、解压对应版本的压缩包"><a href="#第一步-查看运行中的Nginx版本，并下载、解压对应版本的压缩包" class="headerlink" title="第一步 查看运行中的Nginx版本，并下载、解压对应版本的压缩包"></a>第一步 查看运行中的Nginx版本，并下载、解压对应版本的压缩包</h2><p>查看Nginx版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -v</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>xueliang@dev:~\$ /usr/local/nginx/sbin/nginx -v<br>nginx version: nginx/1.11.1<br>xueliang@dev:~\$</p></blockquote><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>xueliang@dev:~\$ /usr/local/nginx/sbin/nginx -V<br>nginx version: nginx/1.11.1<br>built by gcc 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)<br>configure arguments: –prefix=/usr/local/nginx<br>xueliang@dev:~\$</p></blockquote><p>这里可以看出，正在运行的Nginx版本为<code>1.11.1</code>，参照<a href="#安装">安装</a>Nginx部分，下载并解压对应版本的Nginx</p><h2 id="第二步-编译Nginx，同时加入需要模块配置"><a href="#第二步-编译Nginx，同时加入需要模块配置" class="headerlink" title="第二步 编译Nginx，同时加入需要模块配置"></a>第二步 编译Nginx，同时加入需要模块配置</h2><p>参考<a href="#第三步-使用旧版本配置参数配置并编译新版本nginx">平滑升级的第三步</a>，查看运行中的Nginx的配置参数，并在最后追加<code>-with-http_ssl_module</code>。<br>如：原配置信息为 <code>--prefix=/usr/local/nginx</code>，则新配置信息为 <code>--prefix=/usr/local/nginx --with-http_ssl_module</code>，配置Nginx执行的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br></pre></td></tr></table></figure></p><h2 id="第三步-平滑重启Nginx，完成动态模块添加"><a href="#第三步-平滑重启Nginx，完成动态模块添加" class="headerlink" title="第三步 平滑重启Nginx，完成动态模块添加"></a>第三步 平滑重启Nginx，完成动态模块添加</h2><p>这一步可以参考<a href="#第四步-编译新版本nginx可执行程序">平滑升级的第四至八步</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下安装zlib</title>
      <link href="/2016/06/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85zlib/"/>
      <url>/2016/06/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85zlib/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统基于<code>ubuntu server 14.04.4 amd64</code>，即Ubuntu系统的服务器版本，基本适用于桌面版</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="第一步-下载并解压zlib压缩包"><a href="#第一步-下载并解压zlib压缩包" class="headerlink" title="第一步 下载并解压zlib压缩包"></a>第一步 下载并解压zlib压缩包</h2><p>打开<a href="http://www.zlib.net/" target="_blank" rel="noopener">zlib官网</a>，找到下载链接，右键复制地址：<br><img src="http://image.xueliang.org/ljt-hBuW3ALW35THmNlWKuB3DZTB" alt="enter image description here"></p><p>在Linux中使用wget命令下载，执行如下命令开始下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.8.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf zlib-1.2.8.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="第二步-开始安装"><a href="#第二步-开始安装" class="headerlink" title="第二步 开始安装"></a>第二步 开始安装</h2><p>安装过程比较简单，进入zlib的解压目录，依次执行下面几条命令即可：</p><p>配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></p><p>如果之前没有安装gcc（C 编译器），这一步将报如下错误信息：：</p><blockquote><p>xueliang@dev:~/download/zlib-1.2.8\$ ./configure<br>Checking for gcc…<br>Compiler error reporting is too harsh for ./configure (perhaps remove -Werror).<br>** ./configure aborting.<br>xueliang@dev:~/download/zlib-1.2.8\$</p></blockquote><p>可以参考<a href="20160616165344843">这篇文章</a>安装gcc（C 编译器），然后继续下面的操作</p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><p>如果之前没有安装<code>make</code>命令，这一步将报如下错误信息：</p><blockquote><p>xueliang@dev:~/download/zlib-1.2.8\$ make<br>The program ‘make’ is currently not installed. You can install it by typing:<br>sudo apt-get install make<br>xueliang@dev:~/download/zlib-1.2.8\$</p></blockquote><p>可以参考<a href="20160616235014273">这篇文章</a>安装make命令，然后继续下面的操作</p><p>对编译结果进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make test</span><br></pre></td></tr></table></figure></p><p>如果编译无误，会得到如下信息：</p><blockquote><p>xueliang@dev:~/download/zlib-1.2.8\$ make test<br>hello world<br>zlib version 1.2.8 = 0x1280, compile flags = 0xa9<br>uncompress(): hello, hello!<br>gzread(): hello, hello!<br>gzgets() after gzseek:  hello!<br>inflate(): hello, hello!<br>large_inflate(): OK<br>after inflateSync(): hello, hello!<br>inflate with dictionary: hello, hello!<br>                <strong><em> zlib test OK </em></strong><br>hello world<br>zlib version 1.2.8 = 0x1280, compile flags = 0xa9<br>uncompress(): hello, hello!<br>gzread(): hello, hello!<br>gzgets() after gzseek:  hello!<br>inflate(): hello, hello!<br>large_inflate(): OK<br>after inflateSync(): hello, hello!<br>inflate with dictionary: hello, hello!<br>                <strong><em> zlib shared test OK </em></strong><br>hello world<br>zlib version 1.2.8 = 0x1280, compile flags = 0xa9<br>uncompress(): hello, hello!<br>gzread(): hello, hello!<br>gzgets() after gzseek:  hello!<br>inflate(): hello, hello!<br>large_inflate(): OK<br>after inflateSync(): hello, hello!<br>inflate with dictionary: hello, hello!<br>                <strong><em> zlib 64-bit test OK </em></strong><br>xueliang@dev:~/download/zlib-1.2.8\$</p></blockquote><p>如果通过测试，就可以开始安装了，执行如下命令完成zlib的安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>在zlib的解压目录下，一条命令搞定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure></p><p>完成卸载：</p><blockquote><p>xueliang@dev:~/download/zlib-1.2.8\$ sudo make uninstall<br>cd /usr/local/include &amp;&amp; rm -f zlib.h zconf.h<br>cd /usr/local/lib &amp;&amp; rm -f libz.a; \<br>        if test -n “libz.so.1.2.8” -a -f libz.so.1.2.8; then \<br>          rm -f libz.so.1.2.8 libz.so libz.so.1; \<br>        fi<br>cd /usr/local/share/man/man3 &amp;&amp; rm -f zlib.3<br>cd /usr/local/lib/pkgconfig &amp;&amp; rm -f zlib.pc<br>xueliang@dev:~/download/zlib-1.2.8\$</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
            <tag> zlib </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下安装C++ compiler</title>
      <link href="/2016/06/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85C-compiler/"/>
      <url>/2016/06/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85C-compiler/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统基于<code>ubuntu server 14.04.4 amd64</code>，即Ubuntu系统的服务器版本，基本适用于桌面版</p></blockquote><p>C++ compiler的安装同样很简单，使用APT工具安装，执行如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++</span><br></pre></td></tr></table></figure></p><p>对，你没有看错，是<code>g++</code>，而不是<code>c++</code>…Google了一把，说是C++ 编译器在软件仓库中改名了…</p><hr><h1 id="2016年09月25日更新：CentOS-7-安装C-compiler"><a href="#2016年09月25日更新：CentOS-7-安装C-compiler" class="headerlink" title="2016年09月25日更新：CentOS 7 安装C++ compiler"></a>2016年09月25日更新：CentOS 7 安装C++ compiler</h1><p>CentOS 7使用 <code>yum</code> 安装C++ compiler：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gcc-c++</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
            <tag> c++-compiler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下安装make命令</title>
      <link href="/2016/06/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85make%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/06/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85make%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统基于<code>ubuntu server 14.04.4 amd64</code>，即Ubuntu系统的服务器版本，基本适用于桌面版</p></blockquote><p>make命令的安装很简单，使用APT工具安装，执行如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install make</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
            <tag> make </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下PCRE的安装与卸载</title>
      <link href="/2016/06/16/Linux%E4%B8%8BPCRE%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2016/06/16/Linux%E4%B8%8BPCRE%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统基于<code>ubuntu server 14.04.4 amd64</code>，即Ubuntu系统的服务器版本，基本适用于桌面版</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="第一步-到PCRE官网下载PCRE的压缩包，并解压"><a href="#第一步-到PCRE官网下载PCRE的压缩包，并解压" class="headerlink" title="第一步 到PCRE官网下载PCRE的压缩包，并解压"></a>第一步 到PCRE官网下载PCRE的压缩包，并解压</h2><p>PCRE<a href="http://pcre.org/" target="_blank" rel="noopener">官网</a>首页找到下载页面链接：<br><img src="http://image.xueliang.org/Fhv5I0f2oQ8T76vFuIGGXq0EUT7x" alt="图片加载中..."></p><p>这里我们选择PCRE1的最新版(8.39)，右键复制链接地址：<br><img src="http://image.xueliang.org/FoOmvLTP6j-E-lFYrAjtTEhDd1WU" alt="图片加载中..."></p><p>在Linux中使用<code>wget</code>命令下载，执行如下命令开始下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf pcre-8.39.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="第二步-进行安装"><a href="#第二步-进行安装" class="headerlink" title="第二步 进行安装"></a>第二步 进行安装</h2><p>进入PCRE的解压目录，开始安装，安装过程比较简单，依次执行下面几条命令即可：</p><p>配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：<br>(1) 如果之前没有安装C compiler（C 编译器），这一步将报如下错误信息：</p><blockquote><p>configure: error: in `/home/xueliang/download/pcre-8.39’:<br>configure: error: no acceptable C compiler found in \$PATH<br>See `config.log’ for more details<br>xueliang@dev:~/download/pcre-8.39$</p></blockquote><p>可以参考<a href="20160616165344843">这篇文章</a>安装C compiler，然后继续下面的操作</p><p>(2) 如果之前没有安装C++ compiler（C++ 编译器），这一步将报如下错误信息：</p><blockquote><p>configure: error: You need a C++ compiler for C++ support.<br>xueliang@dev:~/download/pcre-8.39\$</p></blockquote><p>可以参考<a href="20160617002054126">这篇文章</a>安装C++ compiler，然后继续下面的操作</p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><p>如果之前没有安装<code>make</code>命令，这一步将报如下错误信息：</p><blockquote><p>xueliang@dev:~/download\$ make<br>The program ‘make’ is currently not installed. You can install it by typing:<br>sudo apt-get install make<br>xueliang@dev:~/download\$</p></blockquote><p>可以参考<a href="20160616235014273">这篇文章</a>安装<code>make</code>命令，然后继续下面的操作</p><p>对编译结果进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make test</span><br></pre></td></tr></table></figure></p><p>如果编译无误，会得到如下信息：</p><blockquote><h1 id="Testsuite-summary-for-PCRE-8-39"><a href="#Testsuite-summary-for-PCRE-8-39" class="headerlink" title="Testsuite summary for PCRE 8.39"></a>Testsuite summary for PCRE 8.39</h1></blockquote><h1 id="TOTAL-5"><a href="#TOTAL-5" class="headerlink" title="TOTAL: 5"></a>TOTAL: 5</h1><h1 id="PASS-5"><a href="#PASS-5" class="headerlink" title="PASS:  5"></a>PASS:  5</h1><h1 id="SKIP-0"><a href="#SKIP-0" class="headerlink" title="SKIP:  0"></a>SKIP:  0</h1><h1 id="XFAIL-0"><a href="#XFAIL-0" class="headerlink" title="XFAIL: 0"></a>XFAIL: 0</h1><h1 id="FAIL-0"><a href="#FAIL-0" class="headerlink" title="FAIL:  0"></a>FAIL:  0</h1><h1 id="XPASS-0"><a href="#XPASS-0" class="headerlink" title="XPASS: 0"></a>XPASS: 0</h1><h1 id="ERROR-0"><a href="#ERROR-0" class="headerlink" title="ERROR: 0"></a>ERROR: 0</h1><p>如果通过测试，就可以开始安装了，执行如下命令完成PCRE的安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>在PCRE的解压目录下，一条命令搞定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure></p><p>完成卸载：</p><blockquote><p>xueliang@dev:~/download/pcre-8.39\$ sudo make uninstall<br>[sudo] password for xueliang:<br> ( cd ‘/usr/local/bin’ &amp;&amp; rm -f pcretest pcregrep )<br> ( cd ‘/usr/local/bin’ &amp;&amp; rm -f pcre-config )<br> ( cd ‘/usr/local/share/doc/pcre’ &amp;&amp; rm -f pcre.txt pcre-config.txt pcregrep.txt pcretest.txt AUTHORS COPYING ChangeLog LICENCE NEWS README )<br> ( cd ‘/usr/local/share/doc/pcre/html’ &amp;&amp; rm -f NON-AUTOTOOLS-BUILD.txt README.txt index.html pcre-config.html pcre.html pcre16.html pcre32.html pcre_assign_jit_stack.html pcre_compile.html pcre_compile2.html pcre_config.html pcre_copy_named_substring.html pcre_copy_substring.html pcre_dfa_exec.html pcre_exec.html pcre_free_study.html pcre_free_substring.html pcre_free_substring_list.html pcre_fullinfo.html pcre_get_named_substring.html pcre_get_stringnumber.html pcre_get_stringtable_entries.html pcre_get_substring.html pcre_get_substring_list.html pcre_jit_exec.html pcre_jit_stack_alloc.html pcre_jit_stack_free.html pcre_maketables.html pcre_pattern_to_host_byte_order.html pcre_refcount.html pcre_study.html pcre_utf16_to_host_byte_order.html pcre_utf32_to_host_byte_order.html pcre_version.html pcreapi.html pcrebuild.html pcrecallout.html pcrecompat.html pcredemo.html pcregrep.html pcrejit.html pcrelimits.html pcrematching.html pcrepartial.html pcrepattern.html pcreperform.html pcreposix.html pcreprecompile.html pcresample.html pcrestack.html pcresyntax.html pcretest.html pcreunicode.html )<br> ( cd ‘/usr/local/share/doc/pcre/html’ &amp;&amp; rm -f pcrecpp.html )<br> ( cd ‘/usr/local/include’ &amp;&amp; rm -f pcreposix.h pcrecpp.h pcre_scanner.h )<br> /bin/bash ./libtool   –mode=uninstall rm -f ‘/usr/local/lib/libpcre.la’<br>libtool: uninstall: rm -f /usr/local/lib/libpcre.la /usr/local/lib/libpcre.so.1.2.7 /usr/local/lib/libpcre.so.1 /usr/local/lib/libpcre.so /usr/local/lib/libpcre.a<br> /bin/bash ./libtool   –mode=uninstall rm -f ‘/usr/local/lib/libpcreposix.la’<br>libtool: uninstall: rm -f /usr/local/lib/libpcreposix.la /usr/local/lib/libpcreposix.so.0.0.4 /usr/local/lib/libpcreposix.so.0 /usr/local/lib/libpcreposix.so /usr/local/lib/libpcreposix.a<br> /bin/bash ./libtool   –mode=uninstall rm -f ‘/usr/local/lib/libpcrecpp.la’<br>libtool: uninstall: rm -f /usr/local/lib/libpcrecpp.la /usr/local/lib/libpcrecpp.so.0.0.1 /usr/local/lib/libpcrecpp.so.0 /usr/local/lib/libpcrecpp.so /usr/local/lib/libpcrecpp.a<br> ( cd ‘/usr/local/share/man/man1’ &amp;&amp; rm -f pcre-config.1 pcregrep.1 pcretest.1 )<br> ( cd ‘/usr/local/share/man/man3’ &amp;&amp; rm -f pcre.3 pcre16.3 pcre32.3 pcre_assign_jit_stack.3 pcre_compile.3 pcre_compile2.3 pcre_config.3 pcre_copy_named_substring.3 pcre_copy_substring.3 pcre_dfa_exec.3 pcre_exec.3 pcre_free_study.3 pcre_free_substring.3 pcre_free_substring_list.3 pcre_fullinfo.3 pcre_get_named_substring.3 pcre_get_stringnumber.3 pcre_get_stringtable_entries.3 pcre_get_substring.3 pcre_get_substring_list.3 pcre_jit_exec.3 pcre_jit_stack_alloc.3 pcre_jit_stack_free.3 pcre_maketables.3 pcre_pattern_to_host_byte_order.3 pcre_refcount.3 pcre_study.3 pcre_utf16_to_host_byte_order.3 pcre_utf32_to_host_byte_order.3 pcre_version.3 pcreapi.3 pcrebuild.3 pcrecallout.3 pcrecompat.3 pcredemo.3 pcrejit.3 pcrelimits.3 pcrematching.3 pcrepartial.3 pcrepattern.3 pcreperform.3 pcreposix.3 pcreprecompile.3 pcresample.3 pcrestack.3 pcresyntax.3 pcreunicode.3 pcrecpp.3 )<br> ( cd ‘/usr/local/include’ &amp;&amp; rm -f pcre.h pcrecpparg.h pcre_stringpiece.h )<br> ( cd ‘/usr/local/lib/pkgconfig’ &amp;&amp; rm -f libpcre.pc libpcreposix.pc libpcrecpp.pc )<br>xueliang@dev:~/download/pcre-8.39\$</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
            <tag> pcre </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下安装C compiler (cc)</title>
      <link href="/2016/06/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85C-compiler-cc/"/>
      <url>/2016/06/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85C-compiler-cc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统基于<code>ubuntu server 14.04.4 amd64</code>，即Ubuntu系统的服务器版本，基本适用于桌面版</p></blockquote><h1 id="第一步-检测系统中是否已经安装了C-compiler"><a href="#第一步-检测系统中是否已经安装了C-compiler" class="headerlink" title="第一步 检测系统中是否已经安装了C compiler"></a>第一步 检测系统中是否已经安装了C compiler</h1><p>执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc -v</span><br></pre></td></tr></table></figure></p><p>结果如下：</p><blockquote><p>xueliang@dev:~\$ cc -v<br>-bash: /usr/bin/cc: No such file or directory<br>xueliang@dev:~\$</p></blockquote><p>说明没有安装C compiler。</p><h1 id="第二步-安装"><a href="#第二步-安装" class="headerlink" title="第二步 安装"></a>第二步 安装</h1><p>使用 APT 工具安装 C compiler，很简单，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure></p><h1 id="第三步-验证"><a href="#第三步-验证" class="headerlink" title="第三步 验证"></a>第三步 验证</h1><p>验证是否安装成功，执行一下 <a href="#第一步-检测系统中是否已经安装了c-compiler">第一步</a> 的命令即可，结果如下：</p><blockquote><p>Using built-in specs.<br>COLLECT_GCC=cc<br>COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper<br>Target: x86_64-linux-gnu<br>Configured with: ../src/configure -v –with-pkgversion=’Ubuntu 4.8.4-2ubuntu1~14.04.3’ –with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs –enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ –prefix=/usr –program-suffix=-4.8 –enable-shared –enable-linker-build-id –libexecdir=/usr/lib –without-included-gettext –enable-threads=posix –with-gxx-include-dir=/usr/include/c++/4.8 –libdir=/usr/lib –enable-nls –with-sysroot=/ –enable-clocale=gnu –enable-libstdcxx-debug –enable-libstdcxx-time=yes –enable-gnu-unique-object –disable-libmudflap –enable-plugin –with-system-zlib –disable-browser-plugin –enable-java-awt=gtk –enable-gtk-cairo –with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre –enable-java-home –with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 –with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 –with-arch-directory=amd64 –with-ecj-jar=/usr/share/java/eclipse-ecj.jar –enable-objc-gc –enable-multiarch –disable-werror –with-arch-32=i686 –with-abi=m64 –with-multilib-list=m32,m64,mx32 –with-tune=generic –enable-checking=release –build=x86_64-linux-gnu –host=x86_64-linux-gnu –target=x86_64-linux-gnu<br>Thread model: posix<br>gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)</p></blockquote><p>说明C compiler安装成功了。</p><hr><h1 id="2016年09月10日更新：CentOS-7-安装C-compiler"><a href="#2016年09月10日更新：CentOS-7-安装C-compiler" class="headerlink" title="2016年09月10日更新：CentOS 7 安装C compiler"></a>2016年09月10日更新：CentOS 7 安装C compiler</h1><p>CentOS 7使用 <code>yum</code> 安装C compiler：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gcc</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
            <tag> c-compiler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js对象转url参数字符串</title>
      <link href="/2016/04/15/js%E5%AF%B9%E8%B1%A1%E8%BD%ACurl%E5%8F%82%E6%95%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2016/04/15/js%E5%AF%B9%E8%B1%A1%E8%BD%ACurl%E5%8F%82%E6%95%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>参考自 <a href="http://www.oschina.net/code/snippet_139242_7584" target="_blank" rel="noopener">复杂js对象转url参数字符串 - 开源中国社区</a> 并做了优化</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parseJson2Url = <span class="function"><span class="keyword">function</span> (<span class="params">param, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> paramStr = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> mappingOperator = <span class="string">'='</span>;</span><br><span class="line">  <span class="keyword">var</span> separator = <span class="string">'&amp;'</span>;</span><br><span class="line">  <span class="keyword">if</span> (param <span class="keyword">instanceof</span> <span class="built_in">String</span> || <span class="keyword">typeof</span> (param) == <span class="string">'string'</span> || param <span class="keyword">instanceof</span> <span class="built_in">Number</span> || <span class="keyword">typeof</span> (param) == <span class="string">'number'</span> || param <span class="keyword">instanceof</span> <span class="built_in">Boolean</span> || <span class="keyword">typeof</span> (param) == <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    paramStr += separator + key + mappingOperator + <span class="built_in">encodeURIComponent</span>(param);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> param) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = param[i];</span><br><span class="line">      <span class="keyword">var</span> k = key == <span class="literal">null</span> ? i : key + (param <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? <span class="string">'['</span> + i + <span class="string">']'</span> : <span class="string">'.'</span> + i);</span><br><span class="line">      paramStr += separator + parseJson2Url(value, k);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> paramStr.substr(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var json = &#123;&apos;a&apos;: &apos;aaa&apos;, &apos;b&apos;: [&apos;b1&apos;, &apos;b2&apos;, &apos;b3&apos;], &apos;c&apos;: [1, new Number(2), new Boolean(3)], &apos;d&apos;: &apos;中文&apos;, &apos;e&apos;: &#123;&apos;da&apos;: &apos;dddaaa&apos;&#125;&#125;</span><br><span class="line">var result1 = parseJson2Url(json, &apos;xyz&apos;);</span><br><span class="line">var result2 = parseJson2Url(json);</span><br><span class="line">console.info(&apos;result1: &apos; + result1);</span><br><span class="line">console.info(&apos;result2: &apos; + result2);</span><br></pre></td></tr></table></figure><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result1: xyz.a=aaa&amp;xyz.b[0]=b1&amp;xyz.b[1]=b2&amp;xyz.b[2]=b3&amp;xyz.c[0]=1&amp;xyz.c[1]=2&amp;xyz.c[2]=true&amp;xyz.d=%E4%B8%AD%E6%96%87&amp;xyz.e.da=dddaaa</span><br><span class="line">result2: a=aaa&amp;b[0]=b1&amp;b[1]=b2&amp;b[2]=b3&amp;c[0]=1&amp;c[1]=2&amp;c[2]=true&amp;d=%E4%B8%AD%E6%96%87&amp;e.da=dddaaa</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell实现Java中String类的常用方法</title>
      <link href="/2016/04/01/Shell%E5%AE%9E%E7%8E%B0Java%E4%B8%ADString%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2016/04/01/Shell%E5%AE%9E%E7%8E%B0Java%E4%B8%ADString%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="检测字符串str，从toffset处开始，是否以substr为前缀"><a href="#检测字符串str，从toffset处开始，是否以substr为前缀" class="headerlink" title="检测字符串str，从toffset处开始，是否以substr为前缀"></a>检测字符串<code>str</code>，从<code>toffset</code>处开始，是否以<code>substr</code>为前缀</h1><p><b style="font-weight:bold; color:red;">注意：</b><code>$3</code>(即<code>toffset</code>)可以忽略，此时检测字符串<code>$1</code>(即<code>str</code>)是否以<code>$2</code>(<code>substr</code>)为前缀<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># startsWith</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">startsWith</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 -a <span class="variable">$#</span> -ne 3 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"invalid param!"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">local</span> str=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">  <span class="built_in">local</span> substr=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">  <span class="built_in">local</span> strLength=<span class="variable">$&#123;#str&#125;</span></span><br><span class="line">  <span class="built_in">local</span> substrLength=<span class="variable">$&#123;#substr&#125;</span></span><br><span class="line">  <span class="built_in">local</span> toffset=0</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 3 ]; <span class="keyword">then</span></span><br><span class="line">    toffset=<span class="variable">$3</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$toffset</span> -lt 0 -o <span class="variable">$toffset</span> -gt $(expr <span class="variable">$strLength</span> - <span class="variable">$substrLength</span>) ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">local</span> innerstr=<span class="string">"<span class="variable">$&#123;str:$toffset:$substrLength&#125;</span>"</span></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$innerstr</span>"</span> == <span class="string">"<span class="variable">$substr</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"true"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="检测字符串str，是否以substr为后缀"><a href="#检测字符串str，是否以substr为后缀" class="headerlink" title="检测字符串str，是否以substr为后缀"></a>检测字符串<code>str</code>，是否以<code>substr</code>为后缀</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># endsWith</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">endsWith</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"invalid param!"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">local</span> str=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">  <span class="built_in">local</span> substr=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">  <span class="built_in">local</span> strLength=<span class="variable">$&#123;#str&#125;</span></span><br><span class="line">  <span class="built_in">local</span> substrLength=<span class="variable">$&#123;#substr&#125;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$(startsWith "$str" "$substr" $(expr $strLength - $substrLength)</span>)"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="根据字符下标，截取字符串"><a href="#根据字符下标，截取字符串" class="headerlink" title="根据字符下标，截取字符串"></a>根据字符下标，截取字符串</h1><p>可接收2或3个参数，第1个参数(<code>$1</code>)为源字符串(<code>str</code>)，第2个参数(<code>$2</code>)为截取的开始索引(<code>beginIndex</code>)，第3个参数(<code>$3</code>)为截取的结束索引(<code>endIndex</code>)，若忽略第3个参数，则<code>endIndex</code>为源字符串(<code>str</code>)的长度<br><b style="font-weight:bold; color:red;">注意：</b> 截取的子字符串，包含 <code>beginIndex</code> 位置上的字符，不包含 <code>endIndex</code> 位置上的字符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># substring</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">substring</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 -a <span class="variable">$#</span> -ne 3 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"invalid param!"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">local</span> str=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">  <span class="built_in">local</span> strLength=<span class="variable">$&#123;#str&#125;</span></span><br><span class="line">  <span class="built_in">local</span> beginIndex=<span class="variable">$2</span></span><br><span class="line">  <span class="built_in">local</span> endIndex=<span class="variable">$strLength</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 3 ]; <span class="keyword">then</span></span><br><span class="line">    endIndex=<span class="variable">$3</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$beginIndex</span> -lt 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"String index out of range: <span class="variable">$beginIndex</span>"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$endIndex</span> -gt <span class="variable">$strLength</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"String index out of range: <span class="variable">$endIndex</span>"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">local</span> substrLength=$(expr <span class="variable">$endIndex</span> - <span class="variable">$beginIndex</span>)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$substrLength</span> -lt 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"String index out of range: <span class="variable">$substrLength</span>"</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;str:$beginIndex:$substrLength&#125;</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git技能树 (持续更新)</title>
      <link href="/2016/01/15/Git%E6%8A%80%E8%83%BD%E6%A0%91-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2016/01/15/Git%E6%8A%80%E8%83%BD%E6%A0%91-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>本文所有命令均经过实战检验，请放心使用…</p><h1 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><p>显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* master</span><br><span class="line">  remotes/origin/2015-08-04</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/origin/branchName1</span><br><span class="line">  remotes/origin/branchName2</span><br></pre></td></tr></table></figure></p><h1 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete origin branchName</span><br></pre></td></tr></table></figure><p>显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To git@git.coding.net:user_name/project.git</span><br><span class="line"> - [deleted]         branchName</span><br></pre></td></tr></table></figure></p><h1 id="清理本地在远程已不存在的分支"><a href="#清理本地在远程已不存在的分支" class="headerlink" title="清理本地在远程已不存在的分支"></a>清理本地在远程已不存在的分支</h1><p>使用 <code>git branch -a</code> 命令可以查看所有本地分支和远程分支（<code>git branch -r</code> 可以只查看远程分支）<br>发现很多在远程仓库已经删除的分支在本地依然可以看到。<br>使用命令 <code>git remote show origin</code>，可以查看 <code>remote</code> 地址，远程分支，还有本地分支与之相对应关系等信息。<br>此时我们可以看到那些远程仓库已经不存在的分支，根据提示，使用 <code>git remote prune origin</code> 命令后显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pruning origin</span><br><span class="line">URL: https://xxx@xxx.xxx/xxx/xxx.git</span><br><span class="line"> * [pruned] origin/develop</span><br><span class="line"> * [pruned] origin/bug</span><br></pre></td></tr></table></figure></p><p>这样就删除了那些远程仓库不存在的分支。</p><h1 id="放弃本地修改，强制使用远程覆盖"><a href="#放弃本地修改，强制使用远程覆盖" class="headerlink" title="放弃本地修改，强制使用远程覆盖"></a>放弃本地修改，强制使用远程覆盖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --all</span><br><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure><h1 id="还原项目到指定版本"><a href="#还原项目到指定版本" class="headerlink" title="还原项目到指定版本"></a>还原项目到指定版本</h1><p>使用 <code>git status</code> 命令，找到目标版本的<code>commit id</code>，如 <code>37d5d5275591cb17928d155d12a8aecd993df718</code>， 执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 37d5d5</span><br></pre></td></tr></table></figure></p><p><code>--hard</code> 选项会清除当前仓库所有修改，若当前仓库还有其他尚未提交的修改，建议先备份已修改内容，或直接备份整个项目，再执行上述命令。</p><h1 id="将指定文件，还原到指定的历史版本"><a href="#将指定文件，还原到指定的历史版本" class="headerlink" title="将指定文件，还原到指定的历史版本"></a>将指定文件，还原到指定的历史版本</h1><p>找到目标版本的<code>commit id</code>，例如将文件 <code>abc.txt</code>(不考虑该文件已被修改的情况) 还原到 <code>37d5d5275591cb17928d155d12a8aecd993df718</code> 版本，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset 37d5d5 abc.txt</span><br></pre></td></tr></table></figure></p><h1 id="重复提示：Unlink-of-file-‘path-to-file’-failed-Show-I-try-again-y-n"><a href="#重复提示：Unlink-of-file-‘path-to-file’-failed-Show-I-try-again-y-n" class="headerlink" title="重复提示：Unlink of file ‘path/to/file’ failed. Show I try again? (y/n)"></a>重复提示：Unlink of file ‘path/to/file’ failed. Show I try again? (y/n)</h1><p>执行 <code>git checkout origin/master -- path/to/file</code>时报此异常：<br>输入<code>y</code>后依旧提示相同问题<br>此异常有可能是，需要更新的文件被某些进程占用，无法释放，导致文件不能更新。<br>找到占用此文件的进程，关闭后再更新即可。</p><h1 id="导出指定分支的最新版本"><a href="#导出指定分支的最新版本" class="headerlink" title="导出指定分支的最新版本"></a>导出指定分支的最新版本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archive -o my_project.zip master</span><br></pre></td></tr></table></figure><h1 id="导出当前分支的指定版本"><a href="#导出当前分支的指定版本" class="headerlink" title="导出当前分支的指定版本"></a>导出当前分支的指定版本</h1><p>commit id 必须为全部，不能省略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archive -o ../my_project.zip c163b0be54d9cd33af6bd7073b22185689e9c698</span><br></pre></td></tr></table></figure></p><h1 id="切换到指定版本"><a href="#切换到指定版本" class="headerlink" title="切换到指定版本"></a>切换到指定版本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout $&#123;commit_id&#125;</span><br></pre></td></tr></table></figure><h1 id="切回到最新版本"><a href="#切回到最新版本" class="headerlink" title="切回到最新版本"></a>切回到最新版本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h1 id="在历史记录中查找已删除的文件"><a href="#在历史记录中查找已删除的文件" class="headerlink" title="在历史记录中查找已删除的文件"></a>在历史记录中查找已删除的文件</h1><p>如果不知道已删除文件的完整路径，可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --all --full-history -- **/thefile.*</span><br></pre></td></tr></table></figure></p><p>如果知道已删除文件的完整路径，可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --all --full-history -- &lt;path-to-file&gt;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://stackoverflow.com/a/7203551/5122380" target="_blank" rel="noopener">Git: How to search for a deleted file in the project commit history? - Stack Overflow</a></p><h1 id="导出干净的代码"><a href="#导出干净的代码" class="headerlink" title="导出干净的代码"></a>导出干净的代码</h1><p>有时需要将最新的项目代码打成干净的zip(或tar.gz)包，不包含版本控制信息，可以执行如下的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archive -o latest.zip HEAD</span><br></pre></td></tr></table></figure></p><p><code>git archive</code> 还有很多其他用法，可以查询相关资料了解一下。</p><h1 id="比较不同分支上的文件的差异"><a href="#比较不同分支上的文件的差异" class="headerlink" title="比较不同分支上的文件的差异"></a>比较不同分支上的文件的差异</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff branch1 branch2 path-to-file</span><br></pre></td></tr></table></figure><h1 id="合并指定分支上指定的commit"><a href="#合并指定分支上指定的commit" class="headerlink" title="合并指定分支上指定的commit"></a>合并指定分支上指定的commit</h1><p>比如要将分支 branch1 上的commit id 为 <code>7ba30153b44d5fe49100ae3c7860632777d61ce8</code> 的提交，合并到分支 branch2 上，只需要先切换到 branch2 上，然后执行如下命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 7ba30153b44d5fe49100ae3c7860632777d61ce8</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ant学习 之 [致命错误]</title>
      <link href="/2016/01/07/Ant%E5%AD%A6%E4%B9%A0-%E4%B9%8B-%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF/"/>
      <url>/2016/01/07/Ant%E5%AD%A6%E4%B9%A0-%E4%B9%8B-%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>第一次在CSDN写博客(作者注：本文最初发表在我的CSDN博客上)……</p><p>这几天因为要重构项目(之前的项目开发太烂了…)，人手又不够，所以我们这两三个码畜是既当码畜又赶鸭子上架做着项目经理的活…为了更好的管理项目，被老板拉着学了些项目版本管理的东西，虽然本行是 “两耳不闻身外事，一心只撸咱的码”，但是学点儿版本控制的这些东西毕竟还是非常有用的。</p><p>在老板的建议下从Ant入手，再加上一些SVN的分支管理，应该够平时用的了吧…</p><p>Ant这个东西很早就在eclipse见到过，myeclipse更是少不了它：<br><img src="http://image.xueliang.org/20140427022139343" alt="图片加载中..."></p><p>刚接触了Ant差不多一个星期，感觉是还是挺简单的。和写java一样，只要理清思路，稍微看一下文档，很容易上手。</p><p>废话不扯了，最近碰到一个问题，困了我两天了，不是解决不了，而是网上很少有相应的解决方案……刚刚把这个问题给Kill掉，鸡冻之余，分享一下！</p><p>【前提】：使用Ant打WAR包</p><p>【思路】：</p><p>1、初始化一些参数（包括项目根目录、src目录、WebContent目录、lib目录以及对应的build的根目录、lib目录、classes目录等等）</p><p>2、使用<code>&lt;mkdir /&gt;</code>创建build需要的目录</p><p>3、使用<code>&lt;javac /&gt;</code>编译java源文件，并保存到build的classes目录下</p><p>4、使用 <code>&lt;copy /&gt;</code>复制项目下的lib目录到build中与之对应WEB-INF目录下</p><p>5、使用<code>&lt;war /&gt;</code>打包</p><p>【问题】：在进行第3步编译src下的java文件时总是提示： <code>[javac] 致命错误: 在类路径或引导类路径中找不到程序包 java.lang</code></p><p>有图有真相：<br><img src="http://image.xueliang.org/20140427022139343" alt="图片加载中..."></p><p>部分源代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"compile"</span> <span class="attr">depends</span>=<span class="string">"mkdirs,copy.lib"</span> <span class="attr">description</span>=<span class="string">"javac"</span>&gt;</span><span class="comment">&lt;!-- 编译源代码  同时指定依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javac</span> <span class="attr">srcdir</span>=<span class="string">"$&#123;pty.dir.proj.src&#125;"</span> <span class="attr">destdir</span>=<span class="string">"$&#123;pty.dir.proj.build.classes&#125;"</span> <span class="attr">encoding</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bootclasspath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;pty.dir.lib.tomcat&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">patternset</span> <span class="attr">refid</span>=<span class="string">"pat.find.jar"</span>&gt;</span><span class="tag">&lt;/<span class="name">patternset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;pty.dir.proj.web.lib&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">patternset</span> <span class="attr">refid</span>=<span class="string">"pat.find.jar"</span>&gt;</span><span class="tag">&lt;/<span class="name">patternset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bootclasspath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javac</span>&gt;</span><span class="comment">&lt;!-- 执行编译 指定源代码目录及编译文件输出目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>【解决过程】：因为是周末，一直宅在家里，百度 + Google苦搜无果，换着关键词搜来搜去只有第一页的十来个，也不是我想要的。大哭</p><p>中间费了九牛二虎之力偶尔一次可以编译成功了，我还忘了备份一下了。直接在源代码上又接着改了什么，结果又坏掉了………..大哭</p><p>一种说法：    找不到 java_home设置不正确；</p><p>第二种说法：classpath环设置不正确；</p><p>第三种说法：重装JDK…</p><p>第四种说法：classpath应该加上dt.jar、rt.jar、tools.jar</p><p>第五种说法：环境变量去掉空格（估计有很多人和我一样，JDK是装在X:\Program Files\下的）</p><p>第六种说法：忘了…….</p><p>总之很多…</p><p>在苦苦挣扎中，我还是不放弃…每次只改一个可疑的地方，每改一次都要运行一下，看看会不会对了……</p><p>功夫不负有心人，当我把<code>&lt;bootclasspath /&gt;</code>换成<code>&lt;classpath /&gt;</code> 时，奇迹再次出现了…</p><p>我之前没仔细研究这两者之间的差别，才多走了很多冤枉路。</p><p>亲，不知道你是不是和我犯的一样的错误…如果是现在大概明白了吧…如果还不明白就去查下<code>&lt;bootclasspath /&gt;</code>和 <code>&lt;classpath /&gt;</code>的区别吧…</p><p>附：<br>网上有一段话解释到：【<code>bootclasspath</code>参数（启动类库）：它已经包含了jre/lib目录下的rt.jar，以及我们自定义的类库。如果使用classpath参数，仅指我们定义的库。】，所以反推之，如果我们已经在环境变量里指定了rt.jar等，这里只需要指定引入的第三方jar(如servlet-api.jar、log4j.jar、spring.jar、axis.jar等)，则在<code>&lt;javac /&gt;</code> 使用<code>classpath</code>指定这些jar即可。如果误用了<code>bootclasspath</code>去指定这些第三方的jar，而没有指定rt.jar等这些很可能会报和我一样的【致命错误】…（我的理解是<code>bootclasspath</code>覆盖了环境变量里的设置）。如果一定要用<code>bootclasspath</code>，则应该指定rt.jar这些JDK自带的jar(不过我没试过…)</p><p>碎觉！</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ant </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ckeditor 笔记（持续更新）</title>
      <link href="/2015/07/12/ckeditor-%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2015/07/12/ckeditor-%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本笔记基于ckeditor 4.4.7</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>引入ckeditor/ckeditor.js，给目标textarea添加 <code>name</code> 和 <code>class=&quot;ckeditor&quot;</code> ，即可将一个textarea修饰为ckeditor。</p><h1 id="扩展允许的内容"><a href="#扩展允许的内容" class="headerlink" title="扩展允许的内容"></a>扩展允许的内容</h1><p>示例(扩展允许abcd标签，同时允许abcd附加任何属性内容，任何style内容，任何类内容)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CKEDITOR.config.extraAllowedContent = &apos;abcd[*]&#123;*&#125;(*)&apos;;</span><br></pre></td></tr></table></figure></p><p>参考官方API：<a href="http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-extraAllowedContent" target="_blank" rel="noopener">http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-extraAllowedContent</a></p><h1 id="支持HTML5标签"><a href="#支持HTML5标签" class="headerlink" title="支持HTML5标签"></a>支持HTML5标签</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CKEDITOR.config.allowedContent = &#123;</span><br><span class="line">  <span class="string">'$1'</span>: &#123;</span><br><span class="line">    elements: CKEDITOR.dtd,</span><br><span class="line">    attributes: <span class="literal">true</span>,</span><br><span class="line">    styles: <span class="literal">true</span>,</span><br><span class="line">    classes: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考官方API：<a href="http://docs.ckeditor.com/#!/guide/dev_disallowed_content-section-how-to-allow-everything-except..." target="_blank" rel="noopener">http://docs.ckeditor.com/#!/guide/dev_disallowed_content-section-how-to-allow-everything-except…</a></p><h1 id="自定义行高插件"><a href="#自定义行高插件" class="headerlink" title="自定义行高插件"></a>自定义行高插件</h1><p>本插件源码来自互联网，由于源代码基于ckeditor3.6.6.1，故对源码进行过简单修改，以求适应ckeditor 4.4.7</p><p>插件目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lineheight</span><br><span class="line"> └─┬ plugin.js</span><br><span class="line">   │</span><br><span class="line">   └─ lang</span><br><span class="line">     ├ en.js</span><br><span class="line">     └ zh-cn.js</span><br></pre></td></tr></table></figure></p><h2 id="引入方式1-通过api对ckeditor进行扩展，推荐"><a href="#引入方式1-通过api对ckeditor进行扩展，推荐" class="headerlink" title="引入方式1(通过api对ckeditor进行扩展，推荐)"></a>引入方式1(通过api对ckeditor进行扩展，推荐)</h2><p>将lineheight文件夹放在项目里，如：<code>project/static/lineheight</code></p><p>在业务层js(如<code>project/static/my.src.js</code>)里添加以下两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CKEDITOR.plugins.addExternal(&apos;lineheight&apos;, &apos;static/lineheight/&apos;); // 添加行高插件</span><br><span class="line">CKEDITOR.config.extraPlugins = (CKEDITOR.config.extraPlugins &amp;&amp; CKEDITOR.config.extraPlugins.length) ? (CKEDITOR.config.extraPlugins + &apos;,lineheight&apos;) : &apos;lineheight&apos;;</span><br></pre></td></tr></table></figure></p><h2 id="引入方式2-直接修改ckeditor源码，不推荐"><a href="#引入方式2-直接修改ckeditor源码，不推荐" class="headerlink" title="引入方式2(直接修改ckeditor源码，不推荐)"></a>引入方式2(直接修改ckeditor源码，不推荐)</h2><p>将<code>lineheight</code>文件夹放在<code>ckeditor/plugins/</code>目录下，<br>然后修改<code>ckeditor/config.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.extraPlugins = (config.extraPlugins &amp;&amp; config.extraPlugins.length ? config.extraPlugins + <span class="string">',lineheight'</span> : <span class="string">'lineheight'</span>);</span><br></pre></td></tr></table></figure></p><p>ckeditor引入自定义插件方式，参考资料：<a href="http://stackoverflow.com/questions/4631852/can-i-control-where-ckeditor-finds-plugins-to-load/4632693#4632693" target="_blank" rel="noopener">Can I control where CKEditor finds plugins to load?</a></p><p>下载地址：<a href="http://download.csdn.net/detail/liangzai_cool/8809063" target="_blank" rel="noopener">ckeditor 行高插件</a></p><h1 id="为“图片属性”对话框添加上传图片按钮"><a href="#为“图片属性”对话框添加上传图片按钮" class="headerlink" title="为“图片属性”对话框添加上传图片按钮"></a>为“图片属性”对话框添加上传图片按钮</h1><p>示例代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> CKEDITOR.on(<span class="string">'dialogDefinition'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> dialogName = e.data.name;</span><br><span class="line">   <span class="keyword">var</span> dialog = e.data.definition.dialog;</span><br><span class="line">   <span class="keyword">var</span> dialogDefinition = e.data.definition;</span><br><span class="line">    <span class="comment">// Check if the definition is from the dialog window you are interested in (the "Link" dialog window).</span></span><br><span class="line">   <span class="keyword">if</span> (dialogName == <span class="string">'image'</span>) &#123;<span class="comment">//判断打开的对话框是否为“图片属性对话框”</span></span><br><span class="line">     dialog.on(<span class="string">'show'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Get a reference to the "Link Info" tab.</span></span><br><span class="line">        <span class="keyword">var</span> $upload = $(e.sender.getElement().$).find(<span class="string">'.cke_dialog_ui_hbox_last:first'</span>);</span><br><span class="line">        $uploadCKEditor = $upload;</span><br><span class="line">        <span class="keyword">if</span> ($upload.find(<span class="string">'iframe'</span>).length == <span class="number">0</span>)&#123;</span><br><span class="line">         $upload.empty().append(<span class="string">'&lt;iframe style="height:39px;width:110px; margin-top:11px;" src="/upload.htm?callback=uploadfinishedFromCKEditor&amp;width=110&amp;height=39&amp;margin=5" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       $(e.sender.getElement().$).find(<span class="string">':input.cke_dialog_ui_input_text:eq(2)'</span>).val(<span class="string">'100%'</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">     dialog.on(<span class="string">'hide'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//alert('dialog ' + dialogName + ' closed.');</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义回调函数，可以根据自己的业务修改</span></span><br><span class="line"> <span class="built_in">window</span>.uploadfinishedFromCKEditor = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $input =  $uploadCKEditor.siblings(<span class="string">'.cke_dialog_ui_hbox_first:first'</span>).find(<span class="string">':input'</span>);</span><br><span class="line">     $input.val(url);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://image.xueliang.org/Fs134w52brG9_L1Jiq8goZdaqb8P" alt="图片加载中"></p><h1 id="将光标定位（移到）最后位置"><a href="#将光标定位（移到）最后位置" class="headerlink" title="将光标定位（移到）最后位置"></a>将光标定位（移到）最后位置</h1><p>首先，要有光标…<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> editor = CKEDITOR.instances.editor1;</span><br><span class="line"><span class="keyword">var</span> range = editor.createRange();</span><br><span class="line">range.moveToElementEditablePosition(editor.editable(), <span class="literal">true</span>);</span><br><span class="line">editor.getSelection().selectRanges([range]);</span><br></pre></td></tr></table></figure></p><p>参考官方API：<a href="http://docs.ckeditor.com/#!/api/CKEDITOR.editor-method-createRange" target="_blank" rel="noopener">http://docs.ckeditor.com/#!/api/CKEDITOR.editor-method-createRange</a><br><a href="http://docs.ckeditor.com/#!/api/CKEDITOR.dom.range-method-moveToElementEditablePosition" target="_blank" rel="noopener">http://docs.ckeditor.com/#!/api/CKEDITOR.dom.range-method-moveToElementEditablePosition</a><br><a href="http://docs.ckeditor.com/#!/api/CKEDITOR.editor-method-getSelection" target="_blank" rel="noopener">http://docs.ckeditor.com/#!/api/CKEDITOR.editor-method-getSelection</a><br><a href="http://docs.ckeditor.com/#!/api/CKEDITOR.dom.selection-method-selectRanges" target="_blank" rel="noopener">http://docs.ckeditor.com/#!/api/CKEDITOR.dom.selection-method-selectRanges</a></p><h1 id="完整toolbar配置"><a href="#完整toolbar配置" class="headerlink" title="完整toolbar配置"></a>完整<code>toolbar</code>配置</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.CKEDITOR) &#123;</span><br><span class="line">  config.toolbar = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'document'</span>, <span class="attr">items</span>: [ <span class="string">'Source'</span>, <span class="string">'-'</span>, <span class="string">'Save'</span>, <span class="string">'NewPage'</span>, <span class="string">'Preview'</span>, <span class="string">'Print'</span>, <span class="string">'-'</span>, <span class="string">'Templates'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'clipboard'</span>, <span class="attr">items</span>: [ <span class="string">'Cut'</span>, <span class="string">'Copy'</span>, <span class="string">'Paste'</span>, <span class="string">'PasteText'</span>, <span class="string">'PasteFromWord'</span>, <span class="string">'-'</span>, <span class="string">'Undo'</span>, <span class="string">'Redo'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'editing'</span>, <span class="attr">items</span>: [ <span class="string">'Find'</span>, <span class="string">'Replace'</span>, <span class="string">'-'</span>, <span class="string">'SelectAll'</span>, <span class="string">'-'</span>, <span class="string">'Scayt'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'forms'</span>, <span class="attr">items</span>: [ <span class="string">'Form'</span>, <span class="string">'Checkbox'</span>, <span class="string">'Radio'</span>, <span class="string">'TextField'</span>, <span class="string">'Textarea'</span>, <span class="string">'Select'</span>, <span class="string">'Button'</span>, <span class="string">'ImageButton'</span>, <span class="string">'HiddenField'</span> ] &#125;,</span><br><span class="line">    <span class="string">'/'</span>,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'basicstyles'</span>, <span class="attr">items</span>: [ <span class="string">'Bold'</span>, <span class="string">'Italic'</span>, <span class="string">'Underline'</span>, <span class="string">'Strike'</span>, <span class="string">'Subscript'</span>, <span class="string">'Superscript'</span>, <span class="string">'-'</span>, <span class="string">'RemoveFormat'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'paragraph'</span>, <span class="attr">items</span>: [ <span class="string">'NumberedList'</span>, <span class="string">'BulletedList'</span>, <span class="string">'-'</span>, <span class="string">'Outdent'</span>, <span class="string">'Indent'</span>, <span class="string">'-'</span>, <span class="string">'Blockquote'</span>, <span class="string">'CreateDiv'</span>, <span class="string">'-'</span>, <span class="string">'JustifyLeft'</span>, <span class="string">'JustifyCenter'</span>, <span class="string">'JustifyRight'</span>, <span class="string">'JustifyBlock'</span>, <span class="string">'-'</span>, <span class="string">'BidiLtr'</span>, <span class="string">'BidiRtl'</span>, <span class="string">'Language'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'links'</span>, <span class="attr">items</span>: [ <span class="string">'Link'</span>, <span class="string">'Unlink'</span>, <span class="string">'Anchor'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'insert'</span>, <span class="attr">items</span>: [ <span class="string">'Image'</span>, <span class="string">'Flash'</span>, <span class="string">'Table'</span>, <span class="string">'HorizontalRule'</span>, <span class="string">'Smiley'</span>, <span class="string">'SpecialChar'</span>, <span class="string">'PageBreak'</span>, <span class="string">'Iframe'</span> ] &#125;,</span><br><span class="line">    <span class="string">'/'</span>,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'styles'</span>, <span class="attr">items</span>: [ <span class="string">'Styles'</span>, <span class="string">'Format'</span>, <span class="string">'Font'</span>, <span class="string">'FontSize'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'colors'</span>, <span class="attr">items</span>: [ <span class="string">'TextColor'</span>, <span class="string">'BGColor'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'tools'</span>, <span class="attr">items</span>: [ <span class="string">'Maximize'</span>, <span class="string">'ShowBlocks'</span> ] &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'about'</span>, <span class="attr">items</span>: [ <span class="string">'About'</span> ] &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="以编程方式选中指定的选项卡"><a href="#以编程方式选中指定的选项卡" class="headerlink" title="以编程方式选中指定的选项卡"></a>以编程方式选中指定的选项卡</h1><p>当相应的事件触发后，比如用户点击了某个按钮，以编程的方式，选中对话框中，指定的选项卡，可以使用 <code>dialog</code> 对象的 <code>selectPage(tabId)</code> 方法。<br>例如当前选中的选项卡 ID 为 <code>tab_3</code>，现在需要切换到 ID 为 <code>tab_0</code> 的选项卡，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dialog = CKEDITOR.dialog.getCurrent(); // 获取当前打开的对话框对象</span><br><span class="line">dialog.selectPage(&apos;tab_0&apos;);// 切换到 ID 为`tab_0` 的选项卡</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ckeditor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 工作笔记（持续更新）</title>
      <link href="/2015/06/30/MySQL-%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2015/06/30/MySQL-%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_area;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_area`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`parentId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`code`</span> <span class="built_in">varchar</span>(<span class="number">1000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">''</span>用来快速查询<span class="string">''</span>,</span><br><span class="line">  <span class="string">`priority`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`fee`</span> <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span><span class="number">0.00</span><span class="string">''</span>,</span><br><span class="line">  <span class="string">`valid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span><span class="number">1</span><span class="string">''</span>,</span><br><span class="line">  <span class="string">`weight`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span><span class="number">10</span><span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">''</span>排序的权值<span class="string">''</span>,</span><br><span class="line">  <span class="string">`level`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`available`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span><span class="number">0</span><span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">''</span><span class="number">0</span>: 不可用, <span class="number">1</span>: 可用<span class="string">''</span>,</span><br><span class="line">  <span class="string">`status`</span> tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span><span class="number">0</span><span class="string">''</span>,</span><br><span class="line">  <span class="string">`createUser`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`createDate`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updateUser`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updateDate`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`idx_code`</span> (<span class="string">`code`</span>(<span class="number">180</span>)) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_level`</span> (<span class="string">`level`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 ROW_FORMAT=<span class="keyword">COMPACT</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sys_area <span class="keyword">SET</span> code = code + <span class="string">','</span> <span class="keyword">WHERE</span> code <span class="keyword">NOT</span> REGEXP<span class="string">'%,'</span>;</span><br></pre></td></tr></table></figure><p><strong>Response</strong>:</p><p>Error Code: 1062. Duplicate entry ‘0’ for key ‘idx_code’</p><p><strong>正确语句</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sys_area <span class="keyword">SET</span> code = <span class="keyword">CONCAT</span>(code, <span class="string">','</span>) <span class="keyword">WHERE</span> code <span class="keyword">NOT</span> REGEXP<span class="string">'%,'</span>;</span><br></pre></td></tr></table></figure></p><h1 id="使用mysql-workbench-6-2-5-0导出5-6-16-log到5-6-23失败"><a href="#使用mysql-workbench-6-2-5-0导出5-6-16-log到5-6-23失败" class="headerlink" title="使用mysql workbench 6.2.5.0导出5.6.16-log到5.6.23失败"></a>使用mysql workbench 6.2.5.0导出5.6.16-log到5.6.23失败</h1><p>Response：<br>10:06:31 Restoring game_dev (admin_config)<br>Running: mysql.exe –defaults-file=”c:\users\liang\appdata\local\temp\tmpkjgddd.cnf”  –protocol=tcp –host=127.0.0.1 –user=root –port=3306 –default-character-set=utf8 –comments &lt; “F:\database\dumps\Dump20150518\game_dev_admin_config.sql”<br>ERROR 1839 (HY000) at line 24: @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_MODE = ON.</p><p>Operation failed with exitcode 1</p><p>解决方案：<br><img src="http://image.xueliang.org/20150518221758183" alt=""></p><h1 id="MySQL实现Oracle中的-rownum-功能"><a href="#MySQL实现Oracle中的-rownum-功能" class="headerlink" title="MySQL实现Oracle中的 rownum 功能"></a>MySQL实现Oracle中的 rownum 功能</h1><p>示例代码如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @curRow := @curRow + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">rownum</span>, tn.* <span class="keyword">FROM</span> database_name.table_name tn <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> @curRow := <span class="number">0</span>) temp;</span><br></pre></td></tr></table></figure></p><h1 id="删除数据库语句"><a href="#删除数据库语句" class="headerlink" title="删除数据库语句"></a>删除数据库语句</h1><p>创建临时数据库时，没注意规范，命名成了<code>a.b</code>的格式，结果在删除该数据库时，提示SQL语句出错，因为 <code>.</code> 在程序中一般用作隶属或者分隔命名空间的作用，同属于关键字，故数据库命名尽量不要含英文句点(.)，可以使用下划线代替，估计很少人遇到这个问题。不过，即便遇到这个问题，也有办法解决，很简单，将数据库名称用反引号(`)引起来就行了。<br>最后执行的代码如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="string">`database_name`</span>;</span><br></pre></td></tr></table></figure></p><h1 id="存储过程示例1"><a href="#存储过程示例1" class="headerlink" title="存储过程示例1"></a>存储过程示例1</h1><p>该存储过程主要用于添加测试数据。<br>展示如何创建及调用存储过程，以及在存储过程中使用游标。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> init_match_menu_data;</span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> init_match_menu_data ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment"># 声明变量</span></span><br><span class="line">    <span class="keyword">DECLARE</span> match_id <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> match_icon <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> match_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> done TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment"># 声明游标</span></span><br><span class="line">    <span class="keyword">DECLARE</span> matchList <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="keyword">id</span>, icon, <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="string">`match`</span> <span class="keyword">WHERE</span> <span class="keyword">status</span> &gt;= <span class="number">0</span> <span class="keyword">LIMIT</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="comment"># 将结束标志绑定到游标</span></span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">SET</span> done = <span class="literal">TRUE</span>;</span><br><span class="line">    <span class="comment"># 打开游标</span></span><br><span class="line">    OPEN matchList;</span><br><span class="line">    READ_LOOP: LOOP </span><br><span class="line">        <span class="comment"># 提取游标里的数据</span></span><br><span class="line">        FETCH matchList INTO match_id, match_icon, match_name;</span><br><span class="line">        <span class="comment"># 声明结束的时候</span></span><br><span class="line">        IF done THEN</span><br><span class="line">            LEAVE READ_LOOP;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">        <span class="comment"># 做爱做的事</span></span><br><span class="line">        <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> bm_match_menu(<span class="keyword">id</span>, matchId, title, icon, <span class="keyword">content</span>, content1, seq, <span class="keyword">status</span>)</span><br><span class="line">        <span class="keyword">VALUES</span> (i, match_id, <span class="string">'赛事规程'</span>, match_icon, <span class="keyword">CONCAT</span>(match_name, <span class="string">'0'</span>), <span class="keyword">CONCAT</span>(match_name, <span class="string">'0'</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> bm_match_menu(<span class="keyword">id</span>, matchId, title, icon, <span class="keyword">content</span>, content1, seq, <span class="keyword">status</span>)</span><br><span class="line">        <span class="keyword">VALUES</span> (i, match_id, <span class="string">'赛事规程'</span>, match_icon, <span class="keyword">CONCAT</span>(match_name, <span class="string">'1'</span>), <span class="keyword">CONCAT</span>(match_name, <span class="string">'1'</span>), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># select match_id, match_icon, match_name, i;    # 不能使用select @match_id</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;    <span class="comment"># 循环结束</span></span><br><span class="line">    CLOSE matchList;    <span class="comment"># 关闭游标</span></span><br><span class="line"><span class="keyword">END</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></p><p>调用存储过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL init_match_menu_data();</span><br></pre></td></tr></table></figure></p><h1 id="存储过程示例2"><a href="#存储过程示例2" class="headerlink" title="存储过程示例2"></a>存储过程示例2</h1><p>该存储过程是为了查找指定数据库指定表中，字符集不正确的列，并将其更新为指定字符集编码。<br>主要展示如何在存储过程中预编译并执行动态 SQL。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> update_column_collation_name;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="string">`update_column_collation_name`</span>(<span class="keyword">in</span> in_schema_name <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">in</span> in_tbl_name <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">in</span> in_default_character_set <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">in</span> in_default_collation <span class="built_in">varchar</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> tbl_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> col_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> col_type <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> col_comment <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> is_nullable TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> sql_string <span class="built_in">VARCHAR</span>(<span class="number">1000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> done TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> column_list <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> table_name, column_name, column_type, column_comment, <span class="keyword">IF</span>(IS_NULLABLE = <span class="string">'NO'</span>, <span class="number">0</span>, <span class="number">1</span>) is_nullable <span class="keyword">FROM</span> information_schema.COLUMNS <span class="keyword">WHERE</span> TABLE_SCHEMA = in_schema_name <span class="keyword">and</span> TABLE_NAME = in_tbl_name <span class="keyword">and</span> ((CHARACTER_SET_NAME <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> CHARACTER_SET_NAME &lt;&gt; in_default_character_set) <span class="keyword">or</span> (COLLATION_NAME <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">AND</span> COLLATION_NAME &lt;&gt; in_default_collation));</span><br><span class="line">  <span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">SET</span> done = <span class="literal">TRUE</span>;</span><br><span class="line">  OPEN column_list;</span><br><span class="line">  <span class="keyword">SET</span> foreign_key_checks = <span class="number">0</span>;  <span class="comment"># 因为修改字符集时，可能影响到外键约束，故先关闭外键检查</span></span><br><span class="line">  READ_LOOP:</span><br><span class="line">  LOOP</span><br><span class="line">    FETCH column_list INTO tbl_name, col_name, col_type, col_comment, is_nullable;</span><br><span class="line">    IF done THEN</span><br><span class="line">      LEAVE READ_LOOP;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">SET</span> sql_string = <span class="keyword">CONCAT</span>(<span class="string">'alter table `'</span>, in_schema_name, <span class="string">'`.`'</span>, tbl_name, <span class="string">'` change `'</span>, col_name, <span class="string">'` `'</span>, col_name, <span class="string">'` '</span>, col_type, <span class="string">' character set '</span>, in_default_character_set,<span class="string">' collate '</span>, in_default_collation, <span class="string">' '</span>, <span class="keyword">IF</span>(is_nullable = <span class="number">0</span>, <span class="string">'NOT NULL'</span>, <span class="string">'NULL'</span>), <span class="string">' comment \''</span>, col_comment, <span class="string">'\''</span>);</span><br><span class="line">    <span class="keyword">select</span> sql_string; <span class="comment"># 生成的动态sql</span></span><br><span class="line">    <span class="keyword">SET</span> @sql_string = sql_string; <span class="comment"># PREPARE语句不能使用局部变量，所以在此处声明一个用户变量</span></span><br><span class="line">    <span class="keyword">PREPARE</span> stmt <span class="keyword">FROM</span> @sql_string; <span class="comment"># 预编译该SQL字符串</span></span><br><span class="line">    <span class="keyword">EXECUTE</span> stmt; <span class="comment"># 执行</span></span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line">  <span class="keyword">SET</span> foreign_key_checks = <span class="number">1</span>; <span class="comment"># 恢复外键检查</span></span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><p>调用存储过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call update_column_collation_name(&apos;schema_name&apos;, &apos;table_name&apos;, &apos;utf8mb4&apos;, &apos;utf8mb4_general_ci&apos;);</span><br></pre></td></tr></table></figure></p><h1 id="存储过程示例3"><a href="#存储过程示例3" class="headerlink" title="存储过程示例3"></a>存储过程示例3</h1><p>该存储过程用于初始化表中的测试数据到指定数量。<br>主要展示了，如何给存储过程传递参数，以及 <code>WHILE</code> 语句的使用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> init_test_data_screen_log;</span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> init_test_data_screen_log (<span class="keyword">IN</span> <span class="keyword">max</span> <span class="built_in">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">id</span> + <span class="number">0</span>) <span class="keyword">INTO</span> i <span class="keyword">FROM</span> screen_log;</span><br><span class="line">  WHILE i &lt; max DO</span><br><span class="line">    <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> screen_log(<span class="keyword">id</span>, deviceId, <span class="keyword">type</span>, code, message, <span class="keyword">status</span>, createDate) </span><br><span class="line">    <span class="keyword">VALUES</span> (i, <span class="number">1</span>, <span class="string">'设备'</span>, <span class="string">'DEVICE_INIT'</span>, <span class="keyword">CONCAT</span>(i, <span class="string">' - 设备请求初始化:Agent-232,ip:192.168.3.20'</span>), <span class="number">0</span>, <span class="keyword">NOW</span>());</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></p><p>调用存储过程：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> init_test_data_screen_log(<span class="number">1000</span>); <span class="comment"># 初始化表中的测试数据到1000条</span></span><br></pre></td></tr></table></figure></p><h1 id="存储过程示例4"><a href="#存储过程示例4" class="headerlink" title="存储过程示例4"></a>存储过程示例4</h1><p>演示如何在存储过程中，预编译带参数的动态 SQL，以及向存储过程中传递参数。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tmp_init_data; <span class="comment"># 删除已经存在的存储过程</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> tmp_init_data(<span class="keyword">IN</span> prefix <span class="built_in">VARCHAR</span>(<span class="number">10</span>), <span class="keyword">IN</span> init <span class="built_in">INT</span>, <span class="keyword">IN</span> <span class="keyword">max</span> <span class="built_in">INT</span>)  <span class="comment"># 参数前面加 `IN` 表示，这个参数是入参，即由外界传递给此存储过程的，若为 `OUT` 这表示该参数将会返回给外界，此外还有 `INOUT`</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> _name <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="string">'name'</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> init;</span><br><span class="line">  <span class="keyword">DECLARE</span> sql_stmt <span class="built_in">VARCHAR</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">SET</span> @sql_insert = <span class="string">'insert into test_repl.test_repl_table0(`name`) values(?);'</span>;</span><br><span class="line"></span><br><span class="line">  WHILE i &lt; max DO</span><br><span class="line">    <span class="keyword">SET</span> @name_ = <span class="keyword">CONCAT</span>(prefix, i); <span class="comment"># 声明一个用户变量，以便传递给预编译的 SQL</span></span><br><span class="line">    <span class="keyword">PREPARE</span> stmt <span class="keyword">FROM</span> @sql_insert;</span><br><span class="line">    <span class="keyword">EXECUTE</span> stmt <span class="keyword">USING</span> @name_; <span class="comment"># `using` 后跟用户变量(`user variables`)</span></span><br><span class="line">    <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></p><h1 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h1><p>工作中经常需要将时间格式化后输出，可以使用<code>DATE_FORMAT</code>这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_FORMAT(&apos;2009-10-04 22:23:00&apos;, &apos;%W %M %Y&apos;);</span><br><span class="line">        -&gt; &apos;Sunday October 2009&apos;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&apos;2007-10-04 22:23:00&apos;, &apos;%H:%i:%s&apos;);</span><br><span class="line">        -&gt; &apos;22:23:00&apos;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&apos;1900-10-04 22:23:00&apos;,</span><br><span class="line">    -&gt;                 &apos;%D %y %a %d %m %b %j&apos;);</span><br><span class="line">        -&gt; &apos;4th 00 Thu 04 10 Oct 277&apos;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&apos;1997-10-04 22:23:00&apos;,</span><br><span class="line">    -&gt;                 &apos;%H %k %I %r %T %S %w&apos;);</span><br><span class="line">        -&gt; &apos;22 22 10 10:23:00 PM 22:23:00 00 6&apos;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&apos;1999-01-01&apos;, &apos;%X %V&apos;);</span><br><span class="line">        -&gt; &apos;1998 52&apos;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&apos;2006-06-00&apos;, &apos;%d&apos;);</span><br><span class="line">        -&gt; &apos;00&apos;</span><br></pre></td></tr></table></figure></p><p>详细介绍可参考MySQL官网文档：<a href="http://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html#function_date-format" target="_blank" rel="noopener">12.7 Date and Time Functions</a></p><h1 id="DELETE语法"><a href="#DELETE语法" class="headerlink" title="DELETE语法"></a>DELETE语法</h1><h2 id="单表语法："><a href="#单表语法：" class="headerlink" title="单表语法："></a>单表语法：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">QUICK</span>] [<span class="keyword">IGNORE</span>] <span class="keyword">FROM</span> tbl_name</span><br><span class="line">    [<span class="keyword">PARTITION</span> (partition_name,...)]</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]</span><br><span class="line">    [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span>]</span><br></pre></td></tr></table></figure><h2 id="多表语法："><a href="#多表语法：" class="headerlink" title="多表语法："></a>多表语法：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">QUICK</span>] [<span class="keyword">IGNORE</span>]</span><br><span class="line">    tbl_name[.*] [, tbl_name[.*]] ...</span><br><span class="line">    <span class="keyword">FROM</span> table_references</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">QUICK</span>] [<span class="keyword">IGNORE</span>]</span><br><span class="line">    <span class="keyword">FROM</span> tbl_name[.*] [, tbl_name[.*]] ...</span><br><span class="line">    <span class="keyword">USING</span> table_references</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br></pre></td></tr></table></figure></p><h1 id="Warning-Using-a-password-on-the-command-line-interface-can-be-insecure"><a href="#Warning-Using-a-password-on-the-command-line-interface-can-be-insecure" class="headerlink" title="Warning: Using a password on the command line interface can be insecure."></a>Warning: Using a password on the command line interface can be insecure.</h1><p>在命令行上使用下面的方式登录MySQL时，会报此警告信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql -u francis -pfrank db_name</span><br></pre></td></tr></table></figure></p><p>警告内容翻译过来大概是：在命令行界面上使用密码可以是不安全的。<br>官方给出的解释：</p><blockquote><p> This is convenient but insecure. On some systems, your password becomes visible to system status programs such as ps that may be invoked by other users to display command lines. MySQL clients typically overwrite the command-line password argument with zeros during their initialization sequence. However, there is still a brief interval during which the value is visible. Also, on some systems this overwriting strategy is ineffective and the password remains visible to ps. (SystemV Unix systems and perhaps others are subject to this problem.)</p></blockquote><blockquote><p>If your operating environment is set up to display your current command in the title bar of your terminal window, the password remains visible as long as the command is running, even if the command has scrolled out of view in the window content area. </p></blockquote><p>简单来说，MySQL不推荐在命令行上直接使用密码。因为直接显示在命令行上的密码，可能被系统内的其他应用程序捕捉到，比如查看进程的<code>ps</code>命令，以及<code>history</code>命令等，都有可能造成密码泄露。<br>MySQL官方提供的解决方案有3种：<br><strong> 在命令行上使用 不跟密码值的<code>-p</code> 或者 <code>--password</code>选项 </strong>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql -u francis -p db_name</span><br><span class="line">Enter password: ********</span><br></pre></td></tr></table></figure></p><p><strong> 将密码保存在配置文件里。举个例子，在Unix系统上，你可以在你的家目录的<code>.my.cnf</code>文件的<code>[client]</code>部分，罗列你的密码 </strong>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">password=your_pass</span><br></pre></td></tr></table></figure></p><p>为了保证密码的安全，该文件不应该除你之外的任何人或应用程序获取到。为了达到这一点，设置该文件访问权限为<code>400</code>或者<code>600</code>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; chmod 600 .my.cnf</span><br></pre></td></tr></table></figure></p><p><strong> 把你的密码保存在名为<code>MYSQL_PWD</code>的环境变量中。 </strong> 详细请移步至<a href="http://dev.mysql.com/doc/refman/5.6/en/environment-variables.html" target="_blank" rel="noopener">Section 2.12, “Environment Variables”. </a><br>官方参考文档：<a href="http://dev.mysql.com/doc/refman/5.6/en/password-security-user.html" target="_blank" rel="noopener">MySQL :: MySQL 5.6 Reference Manual :: 6.1.2.1 End-User Guidelines for Password Security</a>：</p><h1 id="Warning-World-writable-config-file-‘-usr-local-mysql-my-cnf’-is-ignored"><a href="#Warning-World-writable-config-file-‘-usr-local-mysql-my-cnf’-is-ignored" class="headerlink" title="Warning: World-writable config file ‘/usr/local/mysql/my.cnf’ is ignored"></a>Warning: World-writable config file ‘/usr/local/mysql/my.cnf’ is ignored</h1><p>大概意思是：全局可写的<code>/usr/local/mysql/my.cnf</code>配置文件被忽略。<br>MySQL担心这种文件被其他用户或应用程序恶意修改，所以忽略掉这个配置文件。因此，修改该文件的权限为，该用户可读，其他用户不可写即可，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; chmod 644 /usr/local/mysql/my.cnf</span><br></pre></td></tr></table></figure></p><h1 id="主从架构模式下，复制失败（中断）"><a href="#主从架构模式下，复制失败（中断）" class="headerlink" title="主从架构模式下，复制失败（中断）"></a>主从架构模式下，复制失败（中断）</h1><p>2016年08月12日记：<br>在配置主从数据库时，给从库配置了主库的 <code>log-bin</code> 的文件名及位置后，并没有立即开启复制，而是在主库上做了其他操作，主要是修改了一个账户的密码和权限，这个账户是给从库登录主库使用的。<br>处理完成后，开启从库的复制功能，发现并没有执行复制，执行 <code>show slave status</code>，发现 <code>Last_SQL_Error</code> 列有内容，是一个修改密码和权限的的操作，具体内容没有记下来。初步判断是从库在同步主库的修改密码或者权限时，没有找到用户的异常，因为我修改的那个账户，不在从库上，而是在主库上。<br>翻阅 <a href="http://dev.mysql.com/doc/refman/5.6/en/show-slave-status.html" target="_blank" rel="noopener">MySQL 官网文档</a> 发现，<code>Last_SQL_Errno</code> 和 <code>Last_SQL_Error</code> 代表的是最近一次导致 SQL 线程停止的错误编号和对应的错误信息，同一页的上方，可以看到有写到：</p><blockquote><p>Note<br>When the slave SQL thread receives an error, it reports the error first, then stops the SQL thread. This means that there is a small window of time during which SHOW SLAVE STATUS shows a nonzero value for Last_SQL_Errno even though Slave_SQL_Running still displays Yes.</p></blockquote><p>也就是说当从库的 SQL 线程接收到错误信息时，它会<strong>首先报告</strong>这个错误，<strong>然后停止</strong> SQL 线程。这也就意味着，在报告时并没有停止 SQL 线程，它们之间存在一个很小的窗口期，再具体一点就是，在你执行 <code>SHOW SLAVE STATUS</code> 时，看到的 <code>Last_SQL_Errno</code> 列的值不是 <code>0</code>，但 <code>Slave_SQL_Running</code> 列显示的依旧是 <code>Yes</code>。<br>到目前基本找到原因，是这个错误导致！原来是这个错误导致了从库停止了同步操作。一把 Google 后得知，可以执行 <code>set global sql_slave_skip_counter = N;</code> （N是一个整数）语句，跳过从主库同步过来的 N 条语句，保险起见，我执行了 <code>set global sql_slave_skip_counter = 1;</code> ，完美解决！<br>后来发现官网说这个全局变量<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-options-slave.html#sysvar_sql_slave_skip_counter" target="_blank" rel="noopener">有 Bug</a>。还好没被我碰上，以后碰上再说…<img src="http://image.xueliang.org/FqDzMuOL_L-WZ8yUYxGWBkbXT834?imageView2/2/w/25/3/25" alt="relieved"><br>说了这一堆，最终的解决方案是在发生问题的从库上执行以下命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stop</span> <span class="keyword">slave</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_slave_skip_counter = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure></p><p>之后，使用 <code>show slave status</code> 查看问题是否已解决，若还有其他类似问题，可以多执行几次上面的命令。</p><h1 id="Windows下非安装版MySQL的启动与停止"><a href="#Windows下非安装版MySQL的启动与停止" class="headerlink" title="Windows下非安装版MySQL的启动与停止"></a>Windows下非安装版MySQL的启动与停止</h1><p>切换到 MySQL bin 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /d d:\ProgramFiles\mysql-5.6.29-winx64\bin</span><br></pre></td></tr></table></figure></p><ul><li><p>启动<br>启动端口为 3306 的实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld</span><br></pre></td></tr></table></figure></li><li><p>停止<br>停止端口为 3306 的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root shutdown</span><br></pre></td></tr></table></figure></li></ul><p>停止端口为 3307 的实例：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -P 3307 shutdown</span><br></pre></td></tr></table></figure><h1 id="主从复制时，只同步指定的数据库"><a href="#主从复制时，只同步指定的数据库" class="headerlink" title="主从复制时，只同步指定的数据库"></a>主从复制时，只同步指定的数据库</h1><p>若只想复制指定的一个或者多个库，可以在命令行或者配置文件中使用 <code>--replicate-do-db</code> 参数，该配置项是从库的配置选项。如果要指定多个数据库，可以使用多次该参数，比如，可以在从库的 <code>my.cnf</code> 中配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 忽略其他配置</span><br><span class="line">replicate-do-db=db_name0</span><br><span class="line">replicate-do-db=db_name1</span><br><span class="line">replicate-do-db=db_name2</span><br></pre></td></tr></table></figure></p><p>与之类似的还有 <code>--replicate-ignore-db</code> ，不过它与 <code>--replicate-do-db</code> 相反，<code>--replicate-do-db</code> 是用来指定哪些数据库需要复制，而 <code>--replicate-ignore-db</code> 用来指定哪些数据库不需要复制，两者可以配合使用。<br>参考官方链接：<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-options-slave.html#option_mysqld_replicate-do-db" target="_blank" rel="noopener">MySQL :: MySQL 5.6 Reference Manual :: 17.1.4.3 Replication Slave Options and Variables</a></p><h1 id="终止指定的-SQL-线程"><a href="#终止指定的-SQL-线程" class="headerlink" title="终止指定的 SQL 线程"></a>终止指定的 SQL 线程</h1><p>今天用存储过程向数据库添加一些测试数据，结果在 <code>while</code> 语句块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET @sql_insert = &apos;insert into test_repl.test_repl_table0(`name`) values(?);&apos;;</span><br><span class="line">WHILE i &lt; max DO</span><br><span class="line">  SET @name_ = CONCAT(prefix, i);</span><br><span class="line">  PREPARE stmt FROM @sql_insert;</span><br><span class="line">  EXECUTE stmt USING @name_;</span><br><span class="line">END WHILE;</span><br></pre></td></tr></table></figure></p><p>忘记进行 <code>SET i = i + 1;</code> 了… 结果可想而知，表中的数据失控性的增长，使用 <code>SHOW PROCESSLIST</code> 查看正在运行的线程，结果如下图：<br><img src="http://image.xueliang.org/Flpyp2hG9iUVGCpJWAU60suKzLb0" alt="图片加载中..."><br>可以看出 <code>Id</code> 列为 <code>7</code> 的列，就是正在无限执行的语句。</p><p>按照以往的做法，也是终极大法：重启 MySQL 服务…毕竟重启能解决 99% 的问题…不过一直感觉这个方法有点水，想换个专业点的…<br>Google了一把，很快找到了解决方案，使用 MySQL <code>KILL</code> 这个命令，杀死指定的线程。简单说下 <code>KILL</code> 这个命令。<br>每个与 <code>mysqld</code> 建立的连接，都运行在一个独立的线程里运行，可以使用 <code>KILL</code> 终止指定的线程。<br><code>KILL</code> 不仅可以终止线程，还可以终止正在执行的语句。在终止之前，可以使用 <code>SHOW PROCESSLIST</code> 查看已建立连接或正在执行语句的线程 <code>ID</code> ，然后执行 <code>KILL YOUR_PROCESS_ID</code> 即可终止指定线程。<br>因此可以执行以下语句终止执行 SQL 语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">KILL</span> <span class="number">7</span>;</span><br></pre></td></tr></table></figure></p><p>官方参考文档：<a href="http://dev.mysql.com/doc/refman/5.6/en/kill.html" target="_blank" rel="noopener">MySQL :: MySQL 5.6 Reference Manual :: 13.7.6.4 KILL Syntax</a></p><h1 id="MySQL-Cursor-Fetch无法取出值的问题"><a href="#MySQL-Cursor-Fetch无法取出值的问题" class="headerlink" title="MySQL Cursor Fetch无法取出值的问题"></a>MySQL Cursor Fetch无法取出值的问题</h1><blockquote><p>CentOS 7，MySQL 5.6</p></blockquote><p>问题代码如下，<code>article_id</code> 为局部变量，<code>ARTICLE.ARTICLE_ID</code> 为主键列，在循环中 Fetch 游标中的值时，无法获取数据，<code>SELECT article_id;</code> 结果为空，独立执行定义CURSOR 的SQL语句是有结果的。<a href="http://blog.csdn.net/motrsky/article/details/52291594" target="_blank" rel="noopener">一说</a>是由 <code>ARTICLE.ARTICLE_ID</code> 为主键的缘故，非主键列未发现此问题。其实不然，经测试，非主键列同样有此问题。<br>问题的根本原因是 MySQL对 <code>article_id</code> 和 <code>ARTICLE_ID</code> 未区分大小写。十年前就被提出来了…详见 <a href="https://bugs.mysql.com/bug.php?id=5967" target="_blank" rel="noopener">MySQL Bugs: #5967: Stored procedure declared variable used instead of column</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE IF EXISTS test;</span><br><span class="line">delimiter $$</span><br><span class="line">CREATE PROCEDURE test()</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE article_id VARCHAR(50) DEFAULT NULL;</span><br><span class="line">  DECLARE done TINYINT(1) DEFAULT 0;</span><br><span class="line">  DECLARE article_list CURSOR FOR SELECT ARTICLE_ID FROM ARTICLE LIMIT 2;</span><br><span class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;</span><br><span class="line">  OPEN article_list;</span><br><span class="line">  READ_LOOP:</span><br><span class="line">  LOOP</span><br><span class="line">    FETCH article_list INTO _article_id;</span><br><span class="line">    IF done THEN</span><br><span class="line">      LEAVE READ_LOOP;</span><br><span class="line">    END IF;</span><br><span class="line">    SELECT article_id;</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE article_list;</span><br><span class="line">END$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></p><h1 id="创建支持Emoji表情的数据库"><a href="#创建支持Emoji表情的数据库" class="headerlink" title="创建支持Emoji表情的数据库"></a>创建支持Emoji表情的数据库</h1><p>随手记<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS `mydb` /*!40100 DEFAULT CHARACTER SET utf8mb4 DEFAULT  COLLATE = &apos;utf8mb4_unicode_ci&apos; */;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery 学习笔记</title>
      <link href="/2015/06/30/jQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/06/30/jQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="在不同的callback函数间传递变量"><a href="#在不同的callback函数间传递变量" class="headerlink" title="在不同的callback函数间传递变量"></a>在不同的callback函数间传递变量</h2><p>jQuery中的ajax()函数的返回值可以链式调用done()、fail()等函数，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">"/exmple.do"</span>)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//①</span></span><br><span class="line">    alert(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//②</span></span><br><span class="line">    alert(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//③</span></span><br><span class="line">    alert(<span class="string">"fail"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果想在②处获取①处的数据，只需在①处将数据绑定在this关键字上，即可在②处用过this.exmple获取。</p><p>最终实现代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">"/exmple.do"</span>)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"liangzai_cool"</span>; <span class="comment">//①</span></span><br><span class="line">    alert(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name); <span class="comment">//② 此处会弹出对话框，内容即为:liangzai_cool</span></span><br><span class="line">    alert(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//③</span></span><br><span class="line">    alert(<span class="string">"fail"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery.fancybox 学习笔记</title>
      <link href="/2015/06/30/jQuery-fancybox-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/06/30/jQuery-fancybox-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="设置堆叠顺序-z-index"><a href="#设置堆叠顺序-z-index" class="headerlink" title="设置堆叠顺序(z-index)"></a>设置堆叠顺序(z-index)</h1><p>用bootstrap+jquery开发前端，需要给弹出的模态框中的图片，增加单击图片，可以对图片进行放大预览的功能，如果仅仅绑定了fancybox()函数，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"a.fancybox"</span>).fancybox();</span><br></pre></td></tr></table></figure></p><p>而没有配置z-index的值，可能出现弹出层在模态框的后面的情况，如：<br><img src="http://image.xueliang.org/20150530014351296" alt="点击模态框中的图片，预览图出现在了模态框的后面"></p><p>解决方案：<br>配置fancybox的覆盖层(overlay)的堆叠顺序(z-index)，大约为12500</p><p>最终实现代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"a.fancybox"</span>).fancybox(&#123;</span><br><span class="line">  helpers: &#123;</span><br><span class="line">    overlay : &#123;<span class="comment">//z-index 仅能在定位元素(position=absolute||fixed)上奏效 ,此时 z-index值可以设置在12500左右</span></span><br><span class="line">      css : &#123;<span class="attr">position</span>: <span class="string">"fixed"</span>, <span class="string">"z-index"</span>: <span class="number">12500</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="http://image.xueliang.org/20150601145235951" alt="这里写图片描述"></p><h1 id="语言本地化"><a href="#语言本地化" class="headerlink" title="语言本地化"></a>语言本地化</h1><p>fancybox没有提供完整的国际化语言包，但提供了模版自定义方案，我们可以通过修改模版实现语言本地化，即非完整的国际化。</p><p>解决方案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".fancybox"</span>).fancybox(&#123;</span><br><span class="line">  <span class="comment">// HTML templates</span></span><br><span class="line">  tpl: &#123;</span><br><span class="line">    wrap    : <span class="string">'&lt;div class="fancybox-wrap" tabIndex="-1"&gt;&lt;div class="fancybox-skin"&gt;&lt;div class="fancybox-outer"&gt;&lt;div class="fancybox-inner"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span>,</span><br><span class="line">    image   : <span class="string">'&lt;img class="fancybox-image" src="&#123;href&#125;" alt="" /&gt;'</span>,</span><br><span class="line">    iframe  : <span class="string">'&lt;iframe id="fancybox-frame&#123;rnd&#125;" name="fancybox-frame&#123;rnd&#125;" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen'</span> + ($.browser.msie ? <span class="string">' allowtransparency="true"'</span> : <span class="string">''</span>) + <span class="string">'&gt;&lt;/iframe&gt;'</span>,</span><br><span class="line">    error   : <span class="string">'&lt;p class="fancybox-error"&gt;请求的内容未找到。&lt;br/&gt;请稍后再试。&lt;/p&gt;'</span>,</span><br><span class="line">    closeBtn: <span class="string">'&lt;a title="关闭" class="fancybox-item fancybox-close" href="javascript:;"&gt;&lt;/a&gt;'</span>,</span><br><span class="line">    next    : <span class="string">'&lt;a title="下一个" class="fancybox-nav fancybox-next" href="javascript:;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/a&gt;'</span>,</span><br><span class="line">    prev    : <span class="string">'&lt;a title="上一个" class="fancybox-nav fancybox-prev" href="javascript:;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/a&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://image.xueliang.org/20150601145250147" alt="这里写图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> fancybox </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript 工作笔记</title>
      <link href="/2015/06/30/javascript-%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/06/30/javascript-%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h1><h2 id="一个类型如何从另一个类型继承"><a href="#一个类型如何从另一个类型继承" class="headerlink" title="一个类型如何从另一个类型继承"></a>一个类型如何从另一个类型继承</h2><p>实例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.method1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.field2 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">this</span>.method2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class2.prototype = <span class="keyword">new</span> Class1(); <span class="comment">//关键代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> myObject1 = <span class="keyword">new</span> Class1();</span><br><span class="line">alert(myObject1.field1); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">if</span> (myObject1.method1) &#123; <span class="comment">//true</span></span><br><span class="line">  myObject1.method1();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"myObject1.mehtod1 is undefined"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(myObject1.field2); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">if</span> (myObject1.method2) &#123;</span><br><span class="line">  myObject1.method2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"myObject1.mehtod2 is undefined"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject2 = <span class="keyword">new</span> Class2();</span><br><span class="line">alert(myObject2.field1); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">if</span> (myObject2.method1) &#123; <span class="comment">//true</span></span><br><span class="line">  myObject2.method1();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"myObject2.mehtod1 is undefined"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(myObject2.field2); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">if</span> (myObject2.method2) &#123; <span class="comment">//true</span></span><br><span class="line">  myObject2.method2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"myObject2.mehtod2 is undefined"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>附：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> windowHeight = $(<span class="built_in">window</span>).height();    <span class="comment">//浏览器时下窗口可视区域高度;</span></span><br><span class="line"><span class="keyword">var</span> scrollTop = $(<span class="built_in">document</span>).scrollTop();    <span class="comment">//获取滚动条到顶部的垂直高度;</span></span><br><span class="line"><span class="keyword">var</span> documentHeight = $(<span class="built_in">document</span>.body).height();    <span class="comment">//浏览器时下窗口文档body的高度;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> windowHeight = $(<span class="built_in">window</span>).height();    <span class="comment">//浏览器时下窗口可视区域高度;</span></span><br><span class="line"><span class="keyword">var</span> scrollTop = $(<span class="built_in">document</span>).scrollTop();    <span class="comment">//获取滚动条到顶部的垂直高度;</span></span><br><span class="line"><span class="keyword">var</span> documentHeight = $(<span class="built_in">document</span>.body).height();    <span class="comment">//浏览器时下窗口文档body的高度;</span></span><br></pre></td></tr></table></figure></p><h1 id="URL传递中文之JavaScript-encodeURIComponent"><a href="#URL传递中文之JavaScript-encodeURIComponent" class="headerlink" title="URL传递中文之JavaScript encodeURIComponent"></a>URL传递中文之JavaScript encodeURIComponent</h1><p>使用URL传递中文等特殊符号时，可以使用<code>encodeURIComponent</code>进行encode一下，服务器端接收后，进行dencode，可以避免乱码</p><h1 id="通过原生JS获取iframe内容物-示例："><a href="#通过原生JS获取iframe内容物-示例：" class="headerlink" title="通过原生JS获取iframe内容物 示例："></a>通过原生JS获取iframe内容物 示例：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="built_in">document</span>.getElementById(<span class="string">'iframeId'</span>).context.contentWindow.document);</span><br></pre></td></tr></table></figure><h1 id="将滚动条内的指定元素显示在可视区域"><a href="#将滚动条内的指定元素显示在可视区域" class="headerlink" title="将滚动条内的指定元素显示在可视区域"></a>将滚动条内的指定元素显示在可视区域</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> index = <span class="built_in">parseInt</span>(value) - <span class="number">1</span>;  <span class="comment">// 指定元素的索引</span></span><br><span class="line"><span class="keyword">var</span> $container = <span class="built_in">document</span>.querySelector(<span class="string">'ul.list-group'</span>);  <span class="comment">// 容器</span></span><br><span class="line"><span class="keyword">var</span> $item = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul.list-group li'</span>).item(index);  <span class="comment">// 指定元素</span></span><br><span class="line">$container.scrollTop = $item.offsetTop - $container.offsetTop;</span><br></pre></td></tr></table></figure><iframe width="100%" height="300" src="//jsfiddle.net/liangzai_cool/uhvyymyn/embedded/js,html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
